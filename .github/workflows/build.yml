name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        platform: [macos-latest] # windows-latest temporarily disabled
        go-version: [1.22]
    runs-on: ${{ matrix.platform }}
    environment: Official Build
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: false
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
      
      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
        timeout-minutes: 10
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install --frozen-lockfile
        timeout-minutes: 10
      
      - name: Download FFmpeg binaries
        run: |
          mkdir -p binaries/static
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            curl -L -o binaries/static/ffmpeg-macos.zip https://github.com/ffbinaries/ffbinaries-prebuilt/releases/download/v6.1/ffmpeg-6.1-macos-64.zip
            cd binaries/static && unzip -o ffmpeg-macos.zip && mv ffmpeg ffmpeg-darwin-amd64
            rm -f ffmpeg-macos.zip
          else
            curl -L -o binaries/static/ffmpeg-windows.zip https://github.com/ffbinaries/ffbinaries-prebuilt/releases/download/v6.1/ffmpeg-6.1-win-64.zip
            cd binaries/static && unzip -o ffmpeg-windows.zip && mv ffmpeg.exe ffmpeg-windows-amd64.exe
            rm -f ffmpeg-windows.zip
          fi
        shell: bash
      
      - name: Build Wails app
        run: wails build -tags production
      
      - name: Clean up after build to save space
        run: |
          echo "Disk space before cleanup:"
          df -h
          
          # Extremely aggressive cleanup to free maximum space
          rm -rf binaries/static
          rm -rf frontend/node_modules
          rm -rf frontend/.svelte-kit
          rm -rf frontend/build
          go clean -cache -modcache -testcache
          
          # Clean Go workspace
          rm -rf ~/go/pkg/mod
          rm -rf ~/.cache/go-build
          
          # Clean any temporary build files
          find . -name "*.tmp" -delete 2>/dev/null || true
          find . -name "*.temp" -delete 2>/dev/null || true
          find . -name "*.log" -delete 2>/dev/null || true
          
          # Clean homebrew cache
          brew cleanup --prune=all 2>/dev/null || true
          
          echo "Disk space after cleanup:"
          df -h
        shell: bash
      
      # macOS signing with gon - following Wails documentation approach
      - name: Install gon for macOS signing
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        run: brew install Bearer/tap/gon
      
      - name: Import Code-Signing Certificates for macOS
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      
      - name: List available signing identities
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        run: |
          echo "Available signing identities:"
          security find-identity -v -p codesigning
          echo ""
          echo "Looking for Developer ID Application:"
          security find-identity -v -p codesigning | grep "Developer ID Application" || echo "No Developer ID Application found"
      
      - name: Create gon configuration with actual values
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        run: |
          # Get the actual Developer ID Application identity
          IDENTITY=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -1 | awk -F'"' '{print $2}')
          
          if [[ -z "$IDENTITY" ]]; then
            echo "❌ No Developer ID Application identity found after importing certificate"
            exit 1
          fi
          
          echo "✅ Found identity: $IDENTITY"
          
          cat > ./build/darwin/gon-sign-runtime.json << EOF
          {
            "source": ["./build/bin/RambleAI.app"],
            "bundle_id": "com.leoaudibert.ramble-ai",
            "apple_id": {
              "username": "${{ secrets.APPLE_ID }}",
              "password": "${{ secrets.APPLE_ID_PASSWORD }}",
              "provider": "${{ secrets.APPLE_TEAM_ID }}"
            },
            "sign": {
              "application_identity": "$IDENTITY"
            }
          }
          EOF
          echo "✅ Created runtime gon configuration with identity: $IDENTITY"
        shell: bash
      
      - name: Sign macOS app with gon
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        run: |
          echo "✅ Signing macOS app with gon..."
          gon -log-level=info ./build/darwin/gon-sign-runtime.json
          echo "✅ App signed successfully"
        shell: bash
      
      # Skip DMG creation for now - just upload the .app bundle
      # DMG creation is failing due to disk space constraints
      # - name: Create macOS DMG
      
      # DMG and notarization disabled for now - focusing on basic signing first
      # - name: Sign macOS DMG
      # - name: Notarize macOS app
      
      # Windows build temporarily disabled
      
      - name: Package macOS app for upload
        if: matrix.platform == 'macos-latest'
        run: |
          cd build/bin
          zip -r RambleAI-macos.zip RambleAI.app
          echo "✅ Created RambleAI-macos.zip"
          ls -lh RambleAI-macos.zip
      
      - name: Upload artifacts macOS
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: RambleAI-macos
          path: build/bin/RambleAI-macos.zip
      
      # Windows artifacts disabled
      # - name: Upload artifacts Windows
      
      # Create release when pushing tags
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/') && matrix.platform == 'macos-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: build/bin/RambleAI-macos.zip
          draft: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Windows release disabled
      # - name: Add Windows to Release