name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        platform: [macos-latest, windows-latest]
        go-version: [1.22]
    runs-on: ${{ matrix.platform }}
    environment: Official Build
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: false
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install
      
      - name: Download FFmpeg binaries
        run: |
          mkdir -p binaries/static
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            curl -L -o binaries/static/ffmpeg-macos.zip https://github.com/ffbinaries/ffbinaries-prebuilt/releases/download/v6.1/ffmpeg-6.1-macos-64.zip
            cd binaries/static && unzip -o ffmpeg-macos.zip && mv ffmpeg ffmpeg-darwin-amd64
            rm -f ffmpeg-macos.zip
          else
            curl -L -o binaries/static/ffmpeg-windows.zip https://github.com/ffbinaries/ffbinaries-prebuilt/releases/download/v6.1/ffmpeg-6.1-win-64.zip
            cd binaries/static && unzip -o ffmpeg-windows.zip && mv ffmpeg.exe ffmpeg-windows-amd64.exe
            rm -f ffmpeg-windows.zip
          fi
        shell: bash
      
      - name: Build Wails app
        run: wails build -tags production
      
      - name: Clean up after build to save space
        run: |
          echo "Disk space before cleanup:"
          df -h
          
          # Clean up build artifacts we don't need for packaging
          rm -rf binaries/static
          go clean -cache -modcache -testcache
          
          # Clean frontend caches but keep node_modules for now
          if [[ -d "frontend/node_modules/.cache" ]]; then
            rm -rf frontend/node_modules/.cache
          fi
          
          echo "Disk space after cleanup:"
          df -h
        shell: bash
      
      # macOS signing with gon
      - name: Install gon for macOS signing
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        run: brew install Bearer/tap/gon
      
      - name: Import Code-Signing Certificates for macOS
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      
      - name: Sign macOS app with gon
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_DEVELOPER_NAME: ${{ vars.APPLE_DEVELOPER_NAME }}
        run: |
          echo "Verifying signing configuration..."
          
          # Fail fast if required files/vars are missing
          if [[ ! -f "./build/darwin/gon-sign.json" ]]; then
            echo "❌ ERROR: gon-sign.json not found at ./build/darwin/gon-sign.json"
            exit 1
          fi
          
          if [[ -z "$APPLE_DEVELOPER_NAME" ]]; then
            echo "❌ ERROR: APPLE_DEVELOPER_NAME environment variable is not set"
            exit 1
          fi
          
          echo "✅ Configuration verified. Signing macOS app with gon..."
          gon -log-level=info ./build/darwin/gon-sign.json
          echo "✅ App signed successfully"
        shell: bash
      
      - name: Create macOS DMG
        if: matrix.platform == 'macos-latest'
        run: |
          # Create DMG efficiently
          mkdir -p build/dmg
          cp -R build/bin/MYAPP.app build/dmg/
          ln -sf /Applications build/dmg/Applications
          hdiutil create -volname "MYAPP" -srcfolder build/dmg -ov -format UDBZ -imagekey zlib-level=9 build/MYAPP.dmg
          rm -rf build/dmg
        shell: bash
      
      - name: Sign macOS DMG
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        run: |
          IDENTITY=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -1 | awk -F'"' '{print $2}')
          if [[ -z "$IDENTITY" ]]; then
            echo "❌ ERROR: No Developer ID Application identity found"
            exit 1
          fi
          
          echo "✅ Signing DMG with identity: $IDENTITY"
          codesign --force --sign "$IDENTITY" build/MYAPP.dmg
          echo "✅ DMG signed successfully"
        shell: bash
      
      - name: Notarize macOS app
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          if [[ -z "$APPLE_ID" ]] || [[ -z "$APPLE_ID_PASSWORD" ]] || [[ -z "$APPLE_TEAM_ID" ]]; then
            echo "❌ ERROR: Missing notarization credentials (APPLE_ID, APPLE_ID_PASSWORD, or APPLE_TEAM_ID)"
            exit 1
          fi
          
          echo "✅ Notarizing app..."
          xcrun notarytool submit build/MYAPP.dmg \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait
          xcrun stapler staple build/MYAPP.dmg
          echo "✅ App notarized and stapled successfully"
        shell: bash
      
      # Windows signing
      - name: Sign Windows binaries
        if: matrix.platform == 'windows-latest' && github.event_name != 'pull_request'
        env:
          WIN_SIGNING_CERT: ${{ secrets.WIN_SIGNING_CERT }}
          WIN_SIGNING_CERT_PASSWORD: ${{ secrets.WIN_SIGNING_CERT_PASSWORD }}
        run: |
          if (-not $env:WIN_SIGNING_CERT) {
            Write-Error "❌ ERROR: WIN_SIGNING_CERT secret is not set"
            exit 1
          }
          
          if (-not $env:WIN_SIGNING_CERT_PASSWORD) {
            Write-Error "❌ ERROR: WIN_SIGNING_CERT_PASSWORD secret is not set"
            exit 1
          }
          
          echo "✅ Creating certificate file"
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value $env:WIN_SIGNING_CERT
          certutil -decode certificate\certificate.txt certificate\certificate.pfx
          
          echo "✅ Signing Windows binary"
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /fd sha256 /tr http://timestamp.digicert.com /f certificate\certificate.pfx /p $env:WIN_SIGNING_CERT_PASSWORD .\build\bin\MYAPP.exe
          
          Remove-Item -Recurse -Force certificate
          echo "✅ Windows binary signed successfully"
      
      - name: Upload artifacts macOS
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: MYAPP-macos
          path: |
            build/bin/MYAPP.app
            build/MYAPP.dmg
      
      - name: Upload artifacts Windows
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: MYAPP-windows
          path: build/bin/*
      
      # Create release when pushing tags
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/') && matrix.platform == 'macos-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/MYAPP.dmg
            build/bin/MYAPP.app
          draft: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Add Windows to Release
        if: startsWith(github.ref, 'refs/tags/') && matrix.platform == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: build/bin/MYAPP.exe
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}