name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        platform: [macos-latest] # windows-latest temporarily disabled
        go-version: [1.22]
    runs-on: ${{ matrix.platform }}
    environment: Official Build
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: false
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
      
      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
        timeout-minutes: 10
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install --frozen-lockfile
        timeout-minutes: 10
      
        
      - name: Build Wails app
        run: |
          echo "Building Wails app..."
          echo "Current platform: ${{ matrix.platform }}"
          echo "Building universal macOS binary (Intel + ARM)"
          echo "FFmpeg will be bundled in the app during signing"
          
          echo "Starting Wails universal build..."
          wails build -platform "darwin/universal" -v 2 || {
            echo "❌ Wails universal build failed!"
            exit 1
          }
          
          echo "✅ Wails universal build completed successfully"
      
      
      
      - name: Verify app build
        run: |
          echo "Verifying app build completed successfully..."
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            if [ -f "build/bin/RambleAI.app/Contents/MacOS/RambleAI" ]; then
              echo "✅ App binary found: build/bin/RambleAI.app/Contents/MacOS/RambleAI"
              ls -lh build/bin/RambleAI.app/Contents/MacOS/RambleAI
              echo "✅ App build verification completed"
            else
              echo "❌ ERROR: App binary not found!"
              exit 1
            fi
          fi
        shell: bash

      
      - name: Clean up after build to save space
        run: |
          echo "Disk space before cleanup:"
          df -h
          
          # Extremely aggressive cleanup to free maximum space  
          rm -rf frontend/node_modules
          rm -rf frontend/.svelte-kit
          rm -rf frontend/build
          go clean -cache -modcache -testcache
          
          # Clean Go workspace
          rm -rf ~/go/pkg/mod
          rm -rf ~/.cache/go-build
          
          # Clean any temporary build files
          find . -name "*.tmp" -delete 2>/dev/null || true
          find . -name "*.temp" -delete 2>/dev/null || true
          find . -name "*.log" -delete 2>/dev/null || true
          
          # Clean homebrew cache
          brew cleanup --prune=all 2>/dev/null || true
          
          echo "Disk space after cleanup:"
          df -h
        shell: bash
      
      # macOS signing with gon - following Wails documentation approach
      
      - name: Install gon for macOS signing
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        run: brew install Bearer/tap/gon
      
      - name: Debug - Check required secrets
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        run: |
          echo "Checking required configuration (secrets or vars):"
          
          # Check certificate (usually a secret)
          if [ -n "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}" ] || [ -n "${{ vars.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}" ]; then
            echo "✅ APPLE_DEVELOPER_CERTIFICATE_P12_BASE64: found"
          else
            echo "❌ APPLE_DEVELOPER_CERTIFICATE_P12_BASE64: missing from both secrets and vars"
          fi
          
          # Check certificate password (usually a secret)
          if [ -n "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}" ] || [ -n "${{ vars.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}" ]; then
            echo "✅ APPLE_DEVELOPER_CERTIFICATE_PASSWORD: found"
          else
            echo "❌ APPLE_DEVELOPER_CERTIFICATE_PASSWORD: missing from both secrets and vars"
          fi
          
          # Check Apple ID (can be either)
          if [ -n "${{ secrets.APPLE_ID }}" ] || [ -n "${{ vars.APPLE_ID }}" ]; then
            echo "✅ APPLE_ID: found"
          else
            echo "❌ APPLE_ID: missing from both secrets and vars"
          fi
          
          # Check Apple ID password (usually a secret)
          if [ -n "${{ secrets.APPLE_ID_PASSWORD }}" ] || [ -n "${{ vars.APPLE_ID_PASSWORD }}" ]; then
            echo "✅ APPLE_ID_PASSWORD: found"
          else
            echo "❌ APPLE_ID_PASSWORD: missing from both secrets and vars"
          fi
          
          # Check Team ID (can be either)
          if [ -n "${{ secrets.APPLE_TEAM_ID }}" ] || [ -n "${{ vars.APPLE_TEAM_ID }}" ]; then
            echo "✅ APPLE_TEAM_ID: found"
          else
            echo "❌ APPLE_TEAM_ID: missing from both secrets and vars"
          fi
      
      - name: Import Code-Signing Certificates for macOS
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      
      - name: List available signing identities
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        run: |
          echo "Available signing identities:"
          security find-identity -v -p codesigning
          echo ""
          echo "Looking for Developer ID Application:"
          security find-identity -v -p codesigning | grep "Developer ID Application" || echo "No Developer ID Application found"
      
      
      - name: Create gon configuration with actual values
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        run: |
          # Get the actual Developer ID Application identity
          IDENTITY=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -1 | awk -F'"' '{print $2}')
          
          if [[ -z "$IDENTITY" ]]; then
            echo "❌ No Developer ID Application identity found after importing certificate"
            exit 1
          fi
          
          echo "✅ Found identity: $IDENTITY"
          
          # Create gon configuration with actual values (not env variables)
          # We need gon to create a zip for notarization, then we'll fix the structure afterward
          cat > ./build/darwin/gon-sign-runtime.json << EOF
          {
            "source": ["./build/bin/RambleAI.app"],
            "bundle_id": "com.leoaudibert.ramble-ai",
            "apple_id": {
              "username": "${{ vars.APPLE_ID || secrets.APPLE_ID }}",
              "password": "${{ secrets.APPLE_ID_PASSWORD }}",
              "provider": "${{ vars.APPLE_TEAM_ID || secrets.APPLE_TEAM_ID }}"
            },
            "sign": {
              "application_identity": "$IDENTITY",
              "entitlements_file": "./build/darwin/entitlements.plist"
            },
            "zip": {
              "output_path": "./build/bin/RambleAI-notarized.zip"
            }
          }
          EOF
          echo "✅ Created gon configuration with identity: $IDENTITY"
        shell: bash
      

      - name: Sign and notarize macOS app with gon
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        run: |
          echo "✅ Signing and notarizing macOS app with gon..."
          echo "Using runtime configuration: ./build/darwin/gon-sign-runtime.json"
          
          # Show the configuration being used (without sensitive data)
          echo "Configuration contents:"
          cat ./build/darwin/gon-sign-runtime.json | jq -r 'del(.apple_id.password)'
          
          gon -log-level=info ./build/darwin/gon-sign-runtime.json
          echo "✅ App signed and notarized successfully"
          
          # Fix the zip structure - gon creates a notarized zip but structure may not be ideal for end users
          cd build/bin
          if [ -f "RambleAI-notarized.zip" ]; then
            echo "📦 Fixing zip structure for better user experience..."
            
            # Check what's in the gon-created zip
            echo "Original zip contents:"
            unzip -l RambleAI-notarized.zip | head -10
            
            # Extract to temp directory
            mkdir -p temp_fix
            cd temp_fix
            unzip -q ../RambleAI-notarized.zip
            
            # Find the .app bundle and create a properly structured zip
            if [ -d "RambleAI.app" ]; then
              echo "✅ Found RambleAI.app at root - creating proper zip"
              ditto -ck --keepParent RambleAI.app ../RambleAI-signed.zip
            else
              # Look for Contents directory and reconstruct the .app
              if [ -d "Contents" ]; then
                echo "🔧 Found Contents directory - reconstructing RambleAI.app bundle"
                mkdir -p RambleAI.app
                mv Contents RambleAI.app/
                ditto -ck --keepParent RambleAI.app ../RambleAI-signed.zip
              else
                echo "❌ Could not find .app or Contents directory"
                ls -la
                exit 1
              fi
            fi
            
            cd ..
            rm -rf temp_fix
            echo "✅ Created properly structured RambleAI-signed.zip"
          else
            echo "❌ No notarized zip found"
            exit 1
          fi
        shell: bash

      - name: Create DMG from signed app
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        run: |
          echo "Creating DMG from signed .app..."
          
          # Install create-dmg if not already installed
          brew install create-dmg
          
          # Extract the signed .app from the notarized zip to use for DMG
          cd build/bin
          if [ -f "RambleAI-signed.zip" ]; then
            echo "Extracting signed app from ZIP for DMG creation..."
            mkdir -p temp_dmg
            cd temp_dmg
            unzip -q ../RambleAI-signed.zip
            
            # Create DMG from signed app with professional appearance
            create-dmg \
              --volname "Ramble AI" \
              --window-pos 200 120 \
              --window-size 600 300 \
              --icon-size 100 \
              --icon "RambleAI.app" 175 120 \
              --hide-extension "RambleAI.app" \
              --app-drop-link 425 120 \
              "../ramble-macos-unsigned.dmg" \
              "RambleAI.app"
            
            cd ..
            rm -rf temp_dmg
            
            if [ -f "ramble-macos-unsigned.dmg" ]; then
              echo "✅ DMG created from signed app"
              ls -lh ramble-macos-unsigned.dmg
            else
              echo "❌ ERROR: DMG creation failed!"
              exit 1
            fi
          else
            echo "❌ No signed ZIP found for DMG creation"
            exit 1
          fi
        shell: bash

      - name: Sign and notarize DMG
        if: matrix.platform == 'macos-latest' && github.event_name != 'pull_request'
        run: |
          echo "Signing and notarizing DMG..."
          
          # Get the signing identity
          IDENTITY=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -1 | awk -F'"' '{print $2}')
          
          if [[ -z "$IDENTITY" ]]; then
            echo "❌ No Developer ID Application identity found"
            exit 1
          fi
          
          cd build/bin
          
          # Sign the DMG
          echo "Signing DMG with identity: $IDENTITY"
          codesign --force --verify --verbose --sign "$IDENTITY" ramble-macos-unsigned.dmg
          
          # Verify signing
          codesign --verify --verbose=2 ramble-macos-unsigned.dmg
          echo "✅ DMG signed successfully"
          
          # Create gon configuration for DMG notarization using absolute path
          DMG_PATH=$(pwd)/ramble-macos-unsigned.dmg
          echo "Using absolute DMG path: $DMG_PATH"
          cat > gon-dmg-notarize.json << EOF
          {
            "notarize": [{
              "path": "$DMG_PATH",
              "bundle_id": "com.leoaudibert.ramble-ai"
            }],
            "apple_id": {
              "username": "${{ vars.APPLE_ID || secrets.APPLE_ID }}",
              "password": "${{ secrets.APPLE_ID_PASSWORD }}",
              "provider": "${{ vars.APPLE_TEAM_ID || secrets.APPLE_TEAM_ID }}"
            }
          }
          EOF
          
          # Notarize the DMG
          echo "Notarizing DMG..."
          gon -log-level=info gon-dmg-notarize.json
          
          # Rename to final name after successful notarization
          mv ramble-macos-unsigned.dmg ramble-macos-universal.dmg
          
          # Staple the notarization ticket
          xcrun stapler staple ramble-macos-universal.dmg
          
          echo "✅ DMG signed and notarized successfully"
          ls -lh ramble-macos-universal.dmg
          
          # Verify the final DMG
          spctl --assess --type open --context context:primary-signature --verbose ramble-macos-universal.dmg
        shell: bash

      - name: Create unsigned DMG for development/PR builds
        if: matrix.platform == 'macos-latest' && github.event_name == 'pull_request'
        run: |
          echo "Creating unsigned DMG for development build..."
          
          # Install create-dmg if not already installed
          brew install create-dmg
          
          cd build/bin
          
          # Create DMG from unsigned app
          create-dmg \
            --volname "Ramble AI (Development)" \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 100 \
            --icon "RambleAI.app" 175 120 \
            --hide-extension "RambleAI.app" \
            --app-drop-link 425 120 \
            "ramble-macos-universal.dmg" \
            "RambleAI.app"
          
          if [ -f "ramble-macos-universal.dmg" ]; then
            echo "✅ Unsigned DMG created for development"
            ls -lh ramble-macos-universal.dmg
            echo "⚠️ This is an unsigned development build"
          else
            echo "❌ ERROR: Development DMG creation failed!"
            exit 1
          fi
        shell: bash
      
      # Windows build temporarily disabled
      
      - name: Package macOS app for upload
        if: matrix.platform == 'macos-latest'
        run: |
          cd build/bin
          
          # Handle ZIP artifact (for backwards compatibility)
          if [ -f "RambleAI-signed.zip" ]; then
            echo "✅ Found notarized zip file"
            ls -lh RambleAI-signed.zip
            
            # Verify the notarized zip contains the app bundle properly
            echo "📦 Contents of notarized zip (should show RambleAI.app at root):"
            unzip -l RambleAI-signed.zip | head -20
            
            # Copy the notarized zip for upload
            cp RambleAI-signed.zip RambleAI-macos.zip
            echo "✅ Using notarized RambleAI-macos.zip"
          else
            echo "⚠️ No notarized file found, creating regular zip with ditto"
            # Use ditto to preserve .app bundle structure
            ditto -ck --keepParent RambleAI.app RambleAI-macos.zip
            echo "✅ Created regular RambleAI-macos.zip with proper structure"
          fi
          
          # Verify DMG artifact exists (signed or unsigned depending on build type)
          if [ -f "ramble-macos-universal.dmg" ]; then
            if [[ "${{ github.event_name }}" != "pull_request" ]]; then
              echo "✅ Signed and notarized DMG ready for upload (RECOMMENDED FOR USERS)"
              ls -lh ramble-macos-universal.dmg
              
              # Verify DMG signature for production builds
              echo "DMG signature verification:"
              if codesign --verify --verbose=2 ramble-macos-universal.dmg; then
                echo "✅ DMG signature verification passed"
              else
                echo "❌ ERROR: DMG signature verification failed!"
                exit 1
              fi
            else
              echo "✅ Unsigned development DMG ready for upload"
              ls -lh ramble-macos-universal.dmg
              echo "⚠️ This is an unsigned development build - not for distribution"
            fi
          else
            echo "❌ ERROR: DMG not found for upload!"
            exit 1
          fi
          
          echo ""
          echo "📦 Final macOS artifacts:"
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "🎯 PRIMARY: ramble-macos-universal.dmg (signed & notarized - recommended for users)"
            echo "📁 BACKUP:  RambleAI-macos.zip (for compatibility/advanced users)"
            echo ""
            echo "✅ Users should download the DMG for the best installation experience!"
          else
            echo "🔨 DEV BUILD: ramble-macos-universal.dmg (unsigned - for testing only)"
            echo "📁 DEV BACKUP: RambleAI-macos.zip (unsigned - for testing only)"
            echo ""
            echo "⚠️ These are unsigned development builds - not for distribution!"
          fi
          ls -lh ramble-macos-universal.dmg
          ls -lh RambleAI-macos.zip
          echo ""
          echo "ZIP contents (for reference):"
          unzip -l RambleAI-macos.zip | head -10
      
      - name: Upload artifacts macOS
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: RambleAI-macos
          path: |
            build/bin/ramble-macos-universal.dmg
            build/bin/RambleAI-macos.zip
          compression-level: 0  # Don't compress again since files are already compressed
      
      # Windows artifacts disabled
      # - name: Upload artifacts Windows
      
      # Create release when pushing tags
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/') && matrix.platform == 'macos-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/bin/ramble-macos-universal.dmg
            build/bin/RambleAI-macos.zip
          draft: true
          generate_release_notes: true
          body: |
            ## Download Instructions

            **🎯 Recommended for macOS users:** Download `ramble-macos-universal.dmg`
            - Fully signed and notarized by Apple
            - Professional installer with drag-to-install interface
            - Works on both Intel and Apple Silicon Macs
            - No security warnings from macOS Gatekeeper

            **📁 Alternative:** `RambleAI-macos.zip` (for advanced users or compatibility)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Windows release disabled
      # - name: Add Windows to Release