// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MYAPP/ent/exportjob"
	"MYAPP/ent/predicate"
	"MYAPP/ent/project"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExportJobUpdate is the builder for updating ExportJob entities.
type ExportJobUpdate struct {
	config
	hooks    []Hook
	mutation *ExportJobMutation
}

// Where appends a list predicates to the ExportJobUpdate builder.
func (eju *ExportJobUpdate) Where(ps ...predicate.ExportJob) *ExportJobUpdate {
	eju.mutation.Where(ps...)
	return eju
}

// SetJobID sets the "job_id" field.
func (eju *ExportJobUpdate) SetJobID(s string) *ExportJobUpdate {
	eju.mutation.SetJobID(s)
	return eju
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableJobID(s *string) *ExportJobUpdate {
	if s != nil {
		eju.SetJobID(*s)
	}
	return eju
}

// SetExportType sets the "export_type" field.
func (eju *ExportJobUpdate) SetExportType(s string) *ExportJobUpdate {
	eju.mutation.SetExportType(s)
	return eju
}

// SetNillableExportType sets the "export_type" field if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableExportType(s *string) *ExportJobUpdate {
	if s != nil {
		eju.SetExportType(*s)
	}
	return eju
}

// SetOutputPath sets the "output_path" field.
func (eju *ExportJobUpdate) SetOutputPath(s string) *ExportJobUpdate {
	eju.mutation.SetOutputPath(s)
	return eju
}

// SetNillableOutputPath sets the "output_path" field if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableOutputPath(s *string) *ExportJobUpdate {
	if s != nil {
		eju.SetOutputPath(*s)
	}
	return eju
}

// SetStage sets the "stage" field.
func (eju *ExportJobUpdate) SetStage(s string) *ExportJobUpdate {
	eju.mutation.SetStage(s)
	return eju
}

// SetNillableStage sets the "stage" field if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableStage(s *string) *ExportJobUpdate {
	if s != nil {
		eju.SetStage(*s)
	}
	return eju
}

// SetProgress sets the "progress" field.
func (eju *ExportJobUpdate) SetProgress(f float64) *ExportJobUpdate {
	eju.mutation.ResetProgress()
	eju.mutation.SetProgress(f)
	return eju
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableProgress(f *float64) *ExportJobUpdate {
	if f != nil {
		eju.SetProgress(*f)
	}
	return eju
}

// AddProgress adds f to the "progress" field.
func (eju *ExportJobUpdate) AddProgress(f float64) *ExportJobUpdate {
	eju.mutation.AddProgress(f)
	return eju
}

// SetCurrentFile sets the "current_file" field.
func (eju *ExportJobUpdate) SetCurrentFile(s string) *ExportJobUpdate {
	eju.mutation.SetCurrentFile(s)
	return eju
}

// SetNillableCurrentFile sets the "current_file" field if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableCurrentFile(s *string) *ExportJobUpdate {
	if s != nil {
		eju.SetCurrentFile(*s)
	}
	return eju
}

// ClearCurrentFile clears the value of the "current_file" field.
func (eju *ExportJobUpdate) ClearCurrentFile() *ExportJobUpdate {
	eju.mutation.ClearCurrentFile()
	return eju
}

// SetTotalFiles sets the "total_files" field.
func (eju *ExportJobUpdate) SetTotalFiles(i int) *ExportJobUpdate {
	eju.mutation.ResetTotalFiles()
	eju.mutation.SetTotalFiles(i)
	return eju
}

// SetNillableTotalFiles sets the "total_files" field if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableTotalFiles(i *int) *ExportJobUpdate {
	if i != nil {
		eju.SetTotalFiles(*i)
	}
	return eju
}

// AddTotalFiles adds i to the "total_files" field.
func (eju *ExportJobUpdate) AddTotalFiles(i int) *ExportJobUpdate {
	eju.mutation.AddTotalFiles(i)
	return eju
}

// SetProcessedFiles sets the "processed_files" field.
func (eju *ExportJobUpdate) SetProcessedFiles(i int) *ExportJobUpdate {
	eju.mutation.ResetProcessedFiles()
	eju.mutation.SetProcessedFiles(i)
	return eju
}

// SetNillableProcessedFiles sets the "processed_files" field if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableProcessedFiles(i *int) *ExportJobUpdate {
	if i != nil {
		eju.SetProcessedFiles(*i)
	}
	return eju
}

// AddProcessedFiles adds i to the "processed_files" field.
func (eju *ExportJobUpdate) AddProcessedFiles(i int) *ExportJobUpdate {
	eju.mutation.AddProcessedFiles(i)
	return eju
}

// SetIsComplete sets the "is_complete" field.
func (eju *ExportJobUpdate) SetIsComplete(b bool) *ExportJobUpdate {
	eju.mutation.SetIsComplete(b)
	return eju
}

// SetNillableIsComplete sets the "is_complete" field if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableIsComplete(b *bool) *ExportJobUpdate {
	if b != nil {
		eju.SetIsComplete(*b)
	}
	return eju
}

// SetHasError sets the "has_error" field.
func (eju *ExportJobUpdate) SetHasError(b bool) *ExportJobUpdate {
	eju.mutation.SetHasError(b)
	return eju
}

// SetNillableHasError sets the "has_error" field if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableHasError(b *bool) *ExportJobUpdate {
	if b != nil {
		eju.SetHasError(*b)
	}
	return eju
}

// SetErrorMessage sets the "error_message" field.
func (eju *ExportJobUpdate) SetErrorMessage(s string) *ExportJobUpdate {
	eju.mutation.SetErrorMessage(s)
	return eju
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableErrorMessage(s *string) *ExportJobUpdate {
	if s != nil {
		eju.SetErrorMessage(*s)
	}
	return eju
}

// ClearErrorMessage clears the value of the "error_message" field.
func (eju *ExportJobUpdate) ClearErrorMessage() *ExportJobUpdate {
	eju.mutation.ClearErrorMessage()
	return eju
}

// SetIsCancelled sets the "is_cancelled" field.
func (eju *ExportJobUpdate) SetIsCancelled(b bool) *ExportJobUpdate {
	eju.mutation.SetIsCancelled(b)
	return eju
}

// SetNillableIsCancelled sets the "is_cancelled" field if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableIsCancelled(b *bool) *ExportJobUpdate {
	if b != nil {
		eju.SetIsCancelled(*b)
	}
	return eju
}

// SetCreatedAt sets the "created_at" field.
func (eju *ExportJobUpdate) SetCreatedAt(t time.Time) *ExportJobUpdate {
	eju.mutation.SetCreatedAt(t)
	return eju
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableCreatedAt(t *time.Time) *ExportJobUpdate {
	if t != nil {
		eju.SetCreatedAt(*t)
	}
	return eju
}

// SetUpdatedAt sets the "updated_at" field.
func (eju *ExportJobUpdate) SetUpdatedAt(t time.Time) *ExportJobUpdate {
	eju.mutation.SetUpdatedAt(t)
	return eju
}

// SetCompletedAt sets the "completed_at" field.
func (eju *ExportJobUpdate) SetCompletedAt(t time.Time) *ExportJobUpdate {
	eju.mutation.SetCompletedAt(t)
	return eju
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableCompletedAt(t *time.Time) *ExportJobUpdate {
	if t != nil {
		eju.SetCompletedAt(*t)
	}
	return eju
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (eju *ExportJobUpdate) ClearCompletedAt() *ExportJobUpdate {
	eju.mutation.ClearCompletedAt()
	return eju
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (eju *ExportJobUpdate) SetProjectID(id int) *ExportJobUpdate {
	eju.mutation.SetProjectID(id)
	return eju
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (eju *ExportJobUpdate) SetNillableProjectID(id *int) *ExportJobUpdate {
	if id != nil {
		eju = eju.SetProjectID(*id)
	}
	return eju
}

// SetProject sets the "project" edge to the Project entity.
func (eju *ExportJobUpdate) SetProject(p *Project) *ExportJobUpdate {
	return eju.SetProjectID(p.ID)
}

// Mutation returns the ExportJobMutation object of the builder.
func (eju *ExportJobUpdate) Mutation() *ExportJobMutation {
	return eju.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (eju *ExportJobUpdate) ClearProject() *ExportJobUpdate {
	eju.mutation.ClearProject()
	return eju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eju *ExportJobUpdate) Save(ctx context.Context) (int, error) {
	eju.defaults()
	return withHooks(ctx, eju.sqlSave, eju.mutation, eju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eju *ExportJobUpdate) SaveX(ctx context.Context) int {
	affected, err := eju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eju *ExportJobUpdate) Exec(ctx context.Context) error {
	_, err := eju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eju *ExportJobUpdate) ExecX(ctx context.Context) {
	if err := eju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eju *ExportJobUpdate) defaults() {
	if _, ok := eju.mutation.UpdatedAt(); !ok {
		v := exportjob.UpdateDefaultUpdatedAt()
		eju.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eju *ExportJobUpdate) check() error {
	if v, ok := eju.mutation.JobID(); ok {
		if err := exportjob.JobIDValidator(v); err != nil {
			return &ValidationError{Name: "job_id", err: fmt.Errorf(`ent: validator failed for field "ExportJob.job_id": %w`, err)}
		}
	}
	if v, ok := eju.mutation.ExportType(); ok {
		if err := exportjob.ExportTypeValidator(v); err != nil {
			return &ValidationError{Name: "export_type", err: fmt.Errorf(`ent: validator failed for field "ExportJob.export_type": %w`, err)}
		}
	}
	if v, ok := eju.mutation.OutputPath(); ok {
		if err := exportjob.OutputPathValidator(v); err != nil {
			return &ValidationError{Name: "output_path", err: fmt.Errorf(`ent: validator failed for field "ExportJob.output_path": %w`, err)}
		}
	}
	return nil
}

func (eju *ExportJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(exportjob.Table, exportjob.Columns, sqlgraph.NewFieldSpec(exportjob.FieldID, field.TypeInt))
	if ps := eju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eju.mutation.JobID(); ok {
		_spec.SetField(exportjob.FieldJobID, field.TypeString, value)
	}
	if value, ok := eju.mutation.ExportType(); ok {
		_spec.SetField(exportjob.FieldExportType, field.TypeString, value)
	}
	if value, ok := eju.mutation.OutputPath(); ok {
		_spec.SetField(exportjob.FieldOutputPath, field.TypeString, value)
	}
	if value, ok := eju.mutation.Stage(); ok {
		_spec.SetField(exportjob.FieldStage, field.TypeString, value)
	}
	if value, ok := eju.mutation.Progress(); ok {
		_spec.SetField(exportjob.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := eju.mutation.AddedProgress(); ok {
		_spec.AddField(exportjob.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := eju.mutation.CurrentFile(); ok {
		_spec.SetField(exportjob.FieldCurrentFile, field.TypeString, value)
	}
	if eju.mutation.CurrentFileCleared() {
		_spec.ClearField(exportjob.FieldCurrentFile, field.TypeString)
	}
	if value, ok := eju.mutation.TotalFiles(); ok {
		_spec.SetField(exportjob.FieldTotalFiles, field.TypeInt, value)
	}
	if value, ok := eju.mutation.AddedTotalFiles(); ok {
		_spec.AddField(exportjob.FieldTotalFiles, field.TypeInt, value)
	}
	if value, ok := eju.mutation.ProcessedFiles(); ok {
		_spec.SetField(exportjob.FieldProcessedFiles, field.TypeInt, value)
	}
	if value, ok := eju.mutation.AddedProcessedFiles(); ok {
		_spec.AddField(exportjob.FieldProcessedFiles, field.TypeInt, value)
	}
	if value, ok := eju.mutation.IsComplete(); ok {
		_spec.SetField(exportjob.FieldIsComplete, field.TypeBool, value)
	}
	if value, ok := eju.mutation.HasError(); ok {
		_spec.SetField(exportjob.FieldHasError, field.TypeBool, value)
	}
	if value, ok := eju.mutation.ErrorMessage(); ok {
		_spec.SetField(exportjob.FieldErrorMessage, field.TypeString, value)
	}
	if eju.mutation.ErrorMessageCleared() {
		_spec.ClearField(exportjob.FieldErrorMessage, field.TypeString)
	}
	if value, ok := eju.mutation.IsCancelled(); ok {
		_spec.SetField(exportjob.FieldIsCancelled, field.TypeBool, value)
	}
	if value, ok := eju.mutation.CreatedAt(); ok {
		_spec.SetField(exportjob.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eju.mutation.UpdatedAt(); ok {
		_spec.SetField(exportjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eju.mutation.CompletedAt(); ok {
		_spec.SetField(exportjob.FieldCompletedAt, field.TypeTime, value)
	}
	if eju.mutation.CompletedAtCleared() {
		_spec.ClearField(exportjob.FieldCompletedAt, field.TypeTime)
	}
	if eju.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportjob.ProjectTable,
			Columns: []string{exportjob.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eju.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportjob.ProjectTable,
			Columns: []string{exportjob.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exportjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eju.mutation.done = true
	return n, nil
}

// ExportJobUpdateOne is the builder for updating a single ExportJob entity.
type ExportJobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExportJobMutation
}

// SetJobID sets the "job_id" field.
func (ejuo *ExportJobUpdateOne) SetJobID(s string) *ExportJobUpdateOne {
	ejuo.mutation.SetJobID(s)
	return ejuo
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableJobID(s *string) *ExportJobUpdateOne {
	if s != nil {
		ejuo.SetJobID(*s)
	}
	return ejuo
}

// SetExportType sets the "export_type" field.
func (ejuo *ExportJobUpdateOne) SetExportType(s string) *ExportJobUpdateOne {
	ejuo.mutation.SetExportType(s)
	return ejuo
}

// SetNillableExportType sets the "export_type" field if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableExportType(s *string) *ExportJobUpdateOne {
	if s != nil {
		ejuo.SetExportType(*s)
	}
	return ejuo
}

// SetOutputPath sets the "output_path" field.
func (ejuo *ExportJobUpdateOne) SetOutputPath(s string) *ExportJobUpdateOne {
	ejuo.mutation.SetOutputPath(s)
	return ejuo
}

// SetNillableOutputPath sets the "output_path" field if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableOutputPath(s *string) *ExportJobUpdateOne {
	if s != nil {
		ejuo.SetOutputPath(*s)
	}
	return ejuo
}

// SetStage sets the "stage" field.
func (ejuo *ExportJobUpdateOne) SetStage(s string) *ExportJobUpdateOne {
	ejuo.mutation.SetStage(s)
	return ejuo
}

// SetNillableStage sets the "stage" field if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableStage(s *string) *ExportJobUpdateOne {
	if s != nil {
		ejuo.SetStage(*s)
	}
	return ejuo
}

// SetProgress sets the "progress" field.
func (ejuo *ExportJobUpdateOne) SetProgress(f float64) *ExportJobUpdateOne {
	ejuo.mutation.ResetProgress()
	ejuo.mutation.SetProgress(f)
	return ejuo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableProgress(f *float64) *ExportJobUpdateOne {
	if f != nil {
		ejuo.SetProgress(*f)
	}
	return ejuo
}

// AddProgress adds f to the "progress" field.
func (ejuo *ExportJobUpdateOne) AddProgress(f float64) *ExportJobUpdateOne {
	ejuo.mutation.AddProgress(f)
	return ejuo
}

// SetCurrentFile sets the "current_file" field.
func (ejuo *ExportJobUpdateOne) SetCurrentFile(s string) *ExportJobUpdateOne {
	ejuo.mutation.SetCurrentFile(s)
	return ejuo
}

// SetNillableCurrentFile sets the "current_file" field if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableCurrentFile(s *string) *ExportJobUpdateOne {
	if s != nil {
		ejuo.SetCurrentFile(*s)
	}
	return ejuo
}

// ClearCurrentFile clears the value of the "current_file" field.
func (ejuo *ExportJobUpdateOne) ClearCurrentFile() *ExportJobUpdateOne {
	ejuo.mutation.ClearCurrentFile()
	return ejuo
}

// SetTotalFiles sets the "total_files" field.
func (ejuo *ExportJobUpdateOne) SetTotalFiles(i int) *ExportJobUpdateOne {
	ejuo.mutation.ResetTotalFiles()
	ejuo.mutation.SetTotalFiles(i)
	return ejuo
}

// SetNillableTotalFiles sets the "total_files" field if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableTotalFiles(i *int) *ExportJobUpdateOne {
	if i != nil {
		ejuo.SetTotalFiles(*i)
	}
	return ejuo
}

// AddTotalFiles adds i to the "total_files" field.
func (ejuo *ExportJobUpdateOne) AddTotalFiles(i int) *ExportJobUpdateOne {
	ejuo.mutation.AddTotalFiles(i)
	return ejuo
}

// SetProcessedFiles sets the "processed_files" field.
func (ejuo *ExportJobUpdateOne) SetProcessedFiles(i int) *ExportJobUpdateOne {
	ejuo.mutation.ResetProcessedFiles()
	ejuo.mutation.SetProcessedFiles(i)
	return ejuo
}

// SetNillableProcessedFiles sets the "processed_files" field if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableProcessedFiles(i *int) *ExportJobUpdateOne {
	if i != nil {
		ejuo.SetProcessedFiles(*i)
	}
	return ejuo
}

// AddProcessedFiles adds i to the "processed_files" field.
func (ejuo *ExportJobUpdateOne) AddProcessedFiles(i int) *ExportJobUpdateOne {
	ejuo.mutation.AddProcessedFiles(i)
	return ejuo
}

// SetIsComplete sets the "is_complete" field.
func (ejuo *ExportJobUpdateOne) SetIsComplete(b bool) *ExportJobUpdateOne {
	ejuo.mutation.SetIsComplete(b)
	return ejuo
}

// SetNillableIsComplete sets the "is_complete" field if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableIsComplete(b *bool) *ExportJobUpdateOne {
	if b != nil {
		ejuo.SetIsComplete(*b)
	}
	return ejuo
}

// SetHasError sets the "has_error" field.
func (ejuo *ExportJobUpdateOne) SetHasError(b bool) *ExportJobUpdateOne {
	ejuo.mutation.SetHasError(b)
	return ejuo
}

// SetNillableHasError sets the "has_error" field if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableHasError(b *bool) *ExportJobUpdateOne {
	if b != nil {
		ejuo.SetHasError(*b)
	}
	return ejuo
}

// SetErrorMessage sets the "error_message" field.
func (ejuo *ExportJobUpdateOne) SetErrorMessage(s string) *ExportJobUpdateOne {
	ejuo.mutation.SetErrorMessage(s)
	return ejuo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableErrorMessage(s *string) *ExportJobUpdateOne {
	if s != nil {
		ejuo.SetErrorMessage(*s)
	}
	return ejuo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (ejuo *ExportJobUpdateOne) ClearErrorMessage() *ExportJobUpdateOne {
	ejuo.mutation.ClearErrorMessage()
	return ejuo
}

// SetIsCancelled sets the "is_cancelled" field.
func (ejuo *ExportJobUpdateOne) SetIsCancelled(b bool) *ExportJobUpdateOne {
	ejuo.mutation.SetIsCancelled(b)
	return ejuo
}

// SetNillableIsCancelled sets the "is_cancelled" field if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableIsCancelled(b *bool) *ExportJobUpdateOne {
	if b != nil {
		ejuo.SetIsCancelled(*b)
	}
	return ejuo
}

// SetCreatedAt sets the "created_at" field.
func (ejuo *ExportJobUpdateOne) SetCreatedAt(t time.Time) *ExportJobUpdateOne {
	ejuo.mutation.SetCreatedAt(t)
	return ejuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableCreatedAt(t *time.Time) *ExportJobUpdateOne {
	if t != nil {
		ejuo.SetCreatedAt(*t)
	}
	return ejuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ejuo *ExportJobUpdateOne) SetUpdatedAt(t time.Time) *ExportJobUpdateOne {
	ejuo.mutation.SetUpdatedAt(t)
	return ejuo
}

// SetCompletedAt sets the "completed_at" field.
func (ejuo *ExportJobUpdateOne) SetCompletedAt(t time.Time) *ExportJobUpdateOne {
	ejuo.mutation.SetCompletedAt(t)
	return ejuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableCompletedAt(t *time.Time) *ExportJobUpdateOne {
	if t != nil {
		ejuo.SetCompletedAt(*t)
	}
	return ejuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (ejuo *ExportJobUpdateOne) ClearCompletedAt() *ExportJobUpdateOne {
	ejuo.mutation.ClearCompletedAt()
	return ejuo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ejuo *ExportJobUpdateOne) SetProjectID(id int) *ExportJobUpdateOne {
	ejuo.mutation.SetProjectID(id)
	return ejuo
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (ejuo *ExportJobUpdateOne) SetNillableProjectID(id *int) *ExportJobUpdateOne {
	if id != nil {
		ejuo = ejuo.SetProjectID(*id)
	}
	return ejuo
}

// SetProject sets the "project" edge to the Project entity.
func (ejuo *ExportJobUpdateOne) SetProject(p *Project) *ExportJobUpdateOne {
	return ejuo.SetProjectID(p.ID)
}

// Mutation returns the ExportJobMutation object of the builder.
func (ejuo *ExportJobUpdateOne) Mutation() *ExportJobMutation {
	return ejuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (ejuo *ExportJobUpdateOne) ClearProject() *ExportJobUpdateOne {
	ejuo.mutation.ClearProject()
	return ejuo
}

// Where appends a list predicates to the ExportJobUpdate builder.
func (ejuo *ExportJobUpdateOne) Where(ps ...predicate.ExportJob) *ExportJobUpdateOne {
	ejuo.mutation.Where(ps...)
	return ejuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ejuo *ExportJobUpdateOne) Select(field string, fields ...string) *ExportJobUpdateOne {
	ejuo.fields = append([]string{field}, fields...)
	return ejuo
}

// Save executes the query and returns the updated ExportJob entity.
func (ejuo *ExportJobUpdateOne) Save(ctx context.Context) (*ExportJob, error) {
	ejuo.defaults()
	return withHooks(ctx, ejuo.sqlSave, ejuo.mutation, ejuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ejuo *ExportJobUpdateOne) SaveX(ctx context.Context) *ExportJob {
	node, err := ejuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ejuo *ExportJobUpdateOne) Exec(ctx context.Context) error {
	_, err := ejuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ejuo *ExportJobUpdateOne) ExecX(ctx context.Context) {
	if err := ejuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ejuo *ExportJobUpdateOne) defaults() {
	if _, ok := ejuo.mutation.UpdatedAt(); !ok {
		v := exportjob.UpdateDefaultUpdatedAt()
		ejuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ejuo *ExportJobUpdateOne) check() error {
	if v, ok := ejuo.mutation.JobID(); ok {
		if err := exportjob.JobIDValidator(v); err != nil {
			return &ValidationError{Name: "job_id", err: fmt.Errorf(`ent: validator failed for field "ExportJob.job_id": %w`, err)}
		}
	}
	if v, ok := ejuo.mutation.ExportType(); ok {
		if err := exportjob.ExportTypeValidator(v); err != nil {
			return &ValidationError{Name: "export_type", err: fmt.Errorf(`ent: validator failed for field "ExportJob.export_type": %w`, err)}
		}
	}
	if v, ok := ejuo.mutation.OutputPath(); ok {
		if err := exportjob.OutputPathValidator(v); err != nil {
			return &ValidationError{Name: "output_path", err: fmt.Errorf(`ent: validator failed for field "ExportJob.output_path": %w`, err)}
		}
	}
	return nil
}

func (ejuo *ExportJobUpdateOne) sqlSave(ctx context.Context) (_node *ExportJob, err error) {
	if err := ejuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(exportjob.Table, exportjob.Columns, sqlgraph.NewFieldSpec(exportjob.FieldID, field.TypeInt))
	id, ok := ejuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExportJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ejuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exportjob.FieldID)
		for _, f := range fields {
			if !exportjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exportjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ejuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ejuo.mutation.JobID(); ok {
		_spec.SetField(exportjob.FieldJobID, field.TypeString, value)
	}
	if value, ok := ejuo.mutation.ExportType(); ok {
		_spec.SetField(exportjob.FieldExportType, field.TypeString, value)
	}
	if value, ok := ejuo.mutation.OutputPath(); ok {
		_spec.SetField(exportjob.FieldOutputPath, field.TypeString, value)
	}
	if value, ok := ejuo.mutation.Stage(); ok {
		_spec.SetField(exportjob.FieldStage, field.TypeString, value)
	}
	if value, ok := ejuo.mutation.Progress(); ok {
		_spec.SetField(exportjob.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := ejuo.mutation.AddedProgress(); ok {
		_spec.AddField(exportjob.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := ejuo.mutation.CurrentFile(); ok {
		_spec.SetField(exportjob.FieldCurrentFile, field.TypeString, value)
	}
	if ejuo.mutation.CurrentFileCleared() {
		_spec.ClearField(exportjob.FieldCurrentFile, field.TypeString)
	}
	if value, ok := ejuo.mutation.TotalFiles(); ok {
		_spec.SetField(exportjob.FieldTotalFiles, field.TypeInt, value)
	}
	if value, ok := ejuo.mutation.AddedTotalFiles(); ok {
		_spec.AddField(exportjob.FieldTotalFiles, field.TypeInt, value)
	}
	if value, ok := ejuo.mutation.ProcessedFiles(); ok {
		_spec.SetField(exportjob.FieldProcessedFiles, field.TypeInt, value)
	}
	if value, ok := ejuo.mutation.AddedProcessedFiles(); ok {
		_spec.AddField(exportjob.FieldProcessedFiles, field.TypeInt, value)
	}
	if value, ok := ejuo.mutation.IsComplete(); ok {
		_spec.SetField(exportjob.FieldIsComplete, field.TypeBool, value)
	}
	if value, ok := ejuo.mutation.HasError(); ok {
		_spec.SetField(exportjob.FieldHasError, field.TypeBool, value)
	}
	if value, ok := ejuo.mutation.ErrorMessage(); ok {
		_spec.SetField(exportjob.FieldErrorMessage, field.TypeString, value)
	}
	if ejuo.mutation.ErrorMessageCleared() {
		_spec.ClearField(exportjob.FieldErrorMessage, field.TypeString)
	}
	if value, ok := ejuo.mutation.IsCancelled(); ok {
		_spec.SetField(exportjob.FieldIsCancelled, field.TypeBool, value)
	}
	if value, ok := ejuo.mutation.CreatedAt(); ok {
		_spec.SetField(exportjob.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ejuo.mutation.UpdatedAt(); ok {
		_spec.SetField(exportjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ejuo.mutation.CompletedAt(); ok {
		_spec.SetField(exportjob.FieldCompletedAt, field.TypeTime, value)
	}
	if ejuo.mutation.CompletedAtCleared() {
		_spec.ClearField(exportjob.FieldCompletedAt, field.TypeTime)
	}
	if ejuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportjob.ProjectTable,
			Columns: []string{exportjob.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ejuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportjob.ProjectTable,
			Columns: []string{exportjob.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExportJob{config: ejuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ejuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exportjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ejuo.mutation.done = true
	return _node, nil
}
