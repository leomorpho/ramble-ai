// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MYAPP/ent/chatmessage"
	"MYAPP/ent/chatsession"
	"MYAPP/ent/exportjob"
	"MYAPP/ent/predicate"
	"MYAPP/ent/project"
	"MYAPP/ent/schema"
	"MYAPP/ent/settings"
	"MYAPP/ent/videoclip"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChatMessage = "ChatMessage"
	TypeChatSession = "ChatSession"
	TypeExportJob   = "ExportJob"
	TypeProject     = "Project"
	TypeSettings    = "Settings"
	TypeVideoClip   = "VideoClip"
)

// ChatMessageMutation represents an operation that mutates the ChatMessage nodes in the graph.
type ChatMessageMutation struct {
	config
	op             Op
	typ            string
	id             *int
	message_id     *string
	role           *chatmessage.Role
	content        *string
	hidden_context *string
	timestamp      *time.Time
	model          *string
	clearedFields  map[string]struct{}
	session        *int
	clearedsession bool
	done           bool
	oldValue       func(context.Context) (*ChatMessage, error)
	predicates     []predicate.ChatMessage
}

var _ ent.Mutation = (*ChatMessageMutation)(nil)

// chatmessageOption allows management of the mutation configuration using functional options.
type chatmessageOption func(*ChatMessageMutation)

// newChatMessageMutation creates new mutation for the ChatMessage entity.
func newChatMessageMutation(c config, op Op, opts ...chatmessageOption) *ChatMessageMutation {
	m := &ChatMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeChatMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatMessageID sets the ID field of the mutation.
func withChatMessageID(id int) chatmessageOption {
	return func(m *ChatMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *ChatMessage
		)
		m.oldValue = func(ctx context.Context) (*ChatMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChatMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChatMessage sets the old ChatMessage of the mutation.
func withChatMessage(node *ChatMessage) chatmessageOption {
	return func(m *ChatMessageMutation) {
		m.oldValue = func(context.Context) (*ChatMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatMessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChatMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMessageID sets the "message_id" field.
func (m *ChatMessageMutation) SetMessageID(s string) {
	m.message_id = &s
}

// MessageID returns the value of the "message_id" field in the mutation.
func (m *ChatMessageMutation) MessageID() (r string, exists bool) {
	v := m.message_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMessageID returns the old "message_id" field's value of the ChatMessage entity.
// If the ChatMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMessageMutation) OldMessageID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessageID: %w", err)
	}
	return oldValue.MessageID, nil
}

// ResetMessageID resets all changes to the "message_id" field.
func (m *ChatMessageMutation) ResetMessageID() {
	m.message_id = nil
}

// SetSessionID sets the "session_id" field.
func (m *ChatMessageMutation) SetSessionID(i int) {
	m.session = &i
}

// SessionID returns the value of the "session_id" field in the mutation.
func (m *ChatMessageMutation) SessionID() (r int, exists bool) {
	v := m.session
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionID returns the old "session_id" field's value of the ChatMessage entity.
// If the ChatMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMessageMutation) OldSessionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionID: %w", err)
	}
	return oldValue.SessionID, nil
}

// ResetSessionID resets all changes to the "session_id" field.
func (m *ChatMessageMutation) ResetSessionID() {
	m.session = nil
}

// SetRole sets the "role" field.
func (m *ChatMessageMutation) SetRole(c chatmessage.Role) {
	m.role = &c
}

// Role returns the value of the "role" field in the mutation.
func (m *ChatMessageMutation) Role() (r chatmessage.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the ChatMessage entity.
// If the ChatMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMessageMutation) OldRole(ctx context.Context) (v chatmessage.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *ChatMessageMutation) ResetRole() {
	m.role = nil
}

// SetContent sets the "content" field.
func (m *ChatMessageMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *ChatMessageMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the ChatMessage entity.
// If the ChatMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMessageMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *ChatMessageMutation) ResetContent() {
	m.content = nil
}

// SetHiddenContext sets the "hidden_context" field.
func (m *ChatMessageMutation) SetHiddenContext(s string) {
	m.hidden_context = &s
}

// HiddenContext returns the value of the "hidden_context" field in the mutation.
func (m *ChatMessageMutation) HiddenContext() (r string, exists bool) {
	v := m.hidden_context
	if v == nil {
		return
	}
	return *v, true
}

// OldHiddenContext returns the old "hidden_context" field's value of the ChatMessage entity.
// If the ChatMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMessageMutation) OldHiddenContext(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHiddenContext is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHiddenContext requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHiddenContext: %w", err)
	}
	return oldValue.HiddenContext, nil
}

// ClearHiddenContext clears the value of the "hidden_context" field.
func (m *ChatMessageMutation) ClearHiddenContext() {
	m.hidden_context = nil
	m.clearedFields[chatmessage.FieldHiddenContext] = struct{}{}
}

// HiddenContextCleared returns if the "hidden_context" field was cleared in this mutation.
func (m *ChatMessageMutation) HiddenContextCleared() bool {
	_, ok := m.clearedFields[chatmessage.FieldHiddenContext]
	return ok
}

// ResetHiddenContext resets all changes to the "hidden_context" field.
func (m *ChatMessageMutation) ResetHiddenContext() {
	m.hidden_context = nil
	delete(m.clearedFields, chatmessage.FieldHiddenContext)
}

// SetTimestamp sets the "timestamp" field.
func (m *ChatMessageMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *ChatMessageMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the ChatMessage entity.
// If the ChatMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMessageMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *ChatMessageMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetModel sets the "model" field.
func (m *ChatMessageMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *ChatMessageMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the ChatMessage entity.
// If the ChatMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMessageMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ClearModel clears the value of the "model" field.
func (m *ChatMessageMutation) ClearModel() {
	m.model = nil
	m.clearedFields[chatmessage.FieldModel] = struct{}{}
}

// ModelCleared returns if the "model" field was cleared in this mutation.
func (m *ChatMessageMutation) ModelCleared() bool {
	_, ok := m.clearedFields[chatmessage.FieldModel]
	return ok
}

// ResetModel resets all changes to the "model" field.
func (m *ChatMessageMutation) ResetModel() {
	m.model = nil
	delete(m.clearedFields, chatmessage.FieldModel)
}

// ClearSession clears the "session" edge to the ChatSession entity.
func (m *ChatMessageMutation) ClearSession() {
	m.clearedsession = true
	m.clearedFields[chatmessage.FieldSessionID] = struct{}{}
}

// SessionCleared reports if the "session" edge to the ChatSession entity was cleared.
func (m *ChatMessageMutation) SessionCleared() bool {
	return m.clearedsession
}

// SessionIDs returns the "session" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SessionID instead. It exists only for internal usage by the builders.
func (m *ChatMessageMutation) SessionIDs() (ids []int) {
	if id := m.session; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSession resets all changes to the "session" edge.
func (m *ChatMessageMutation) ResetSession() {
	m.session = nil
	m.clearedsession = false
}

// Where appends a list predicates to the ChatMessageMutation builder.
func (m *ChatMessageMutation) Where(ps ...predicate.ChatMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChatMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChatMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ChatMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChatMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChatMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ChatMessage).
func (m *ChatMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatMessageMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.message_id != nil {
		fields = append(fields, chatmessage.FieldMessageID)
	}
	if m.session != nil {
		fields = append(fields, chatmessage.FieldSessionID)
	}
	if m.role != nil {
		fields = append(fields, chatmessage.FieldRole)
	}
	if m.content != nil {
		fields = append(fields, chatmessage.FieldContent)
	}
	if m.hidden_context != nil {
		fields = append(fields, chatmessage.FieldHiddenContext)
	}
	if m.timestamp != nil {
		fields = append(fields, chatmessage.FieldTimestamp)
	}
	if m.model != nil {
		fields = append(fields, chatmessage.FieldModel)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chatmessage.FieldMessageID:
		return m.MessageID()
	case chatmessage.FieldSessionID:
		return m.SessionID()
	case chatmessage.FieldRole:
		return m.Role()
	case chatmessage.FieldContent:
		return m.Content()
	case chatmessage.FieldHiddenContext:
		return m.HiddenContext()
	case chatmessage.FieldTimestamp:
		return m.Timestamp()
	case chatmessage.FieldModel:
		return m.Model()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chatmessage.FieldMessageID:
		return m.OldMessageID(ctx)
	case chatmessage.FieldSessionID:
		return m.OldSessionID(ctx)
	case chatmessage.FieldRole:
		return m.OldRole(ctx)
	case chatmessage.FieldContent:
		return m.OldContent(ctx)
	case chatmessage.FieldHiddenContext:
		return m.OldHiddenContext(ctx)
	case chatmessage.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case chatmessage.FieldModel:
		return m.OldModel(ctx)
	}
	return nil, fmt.Errorf("unknown ChatMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chatmessage.FieldMessageID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessageID(v)
		return nil
	case chatmessage.FieldSessionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	case chatmessage.FieldRole:
		v, ok := value.(chatmessage.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case chatmessage.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case chatmessage.FieldHiddenContext:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHiddenContext(v)
		return nil
	case chatmessage.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case chatmessage.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	}
	return fmt.Errorf("unknown ChatMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatMessageMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatMessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ChatMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatMessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(chatmessage.FieldHiddenContext) {
		fields = append(fields, chatmessage.FieldHiddenContext)
	}
	if m.FieldCleared(chatmessage.FieldModel) {
		fields = append(fields, chatmessage.FieldModel)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatMessageMutation) ClearField(name string) error {
	switch name {
	case chatmessage.FieldHiddenContext:
		m.ClearHiddenContext()
		return nil
	case chatmessage.FieldModel:
		m.ClearModel()
		return nil
	}
	return fmt.Errorf("unknown ChatMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatMessageMutation) ResetField(name string) error {
	switch name {
	case chatmessage.FieldMessageID:
		m.ResetMessageID()
		return nil
	case chatmessage.FieldSessionID:
		m.ResetSessionID()
		return nil
	case chatmessage.FieldRole:
		m.ResetRole()
		return nil
	case chatmessage.FieldContent:
		m.ResetContent()
		return nil
	case chatmessage.FieldHiddenContext:
		m.ResetHiddenContext()
		return nil
	case chatmessage.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case chatmessage.FieldModel:
		m.ResetModel()
		return nil
	}
	return fmt.Errorf("unknown ChatMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.session != nil {
		edges = append(edges, chatmessage.EdgeSession)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatMessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chatmessage.EdgeSession:
		if id := m.session; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsession {
		edges = append(edges, chatmessage.EdgeSession)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatMessageMutation) EdgeCleared(name string) bool {
	switch name {
	case chatmessage.EdgeSession:
		return m.clearedsession
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatMessageMutation) ClearEdge(name string) error {
	switch name {
	case chatmessage.EdgeSession:
		m.ClearSession()
		return nil
	}
	return fmt.Errorf("unknown ChatMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatMessageMutation) ResetEdge(name string) error {
	switch name {
	case chatmessage.EdgeSession:
		m.ResetSession()
		return nil
	}
	return fmt.Errorf("unknown ChatMessage edge %s", name)
}

// ChatSessionMutation represents an operation that mutates the ChatSession nodes in the graph.
type ChatSessionMutation struct {
	config
	op              Op
	typ             string
	id              *int
	session_id      *string
	endpoint_id     *string
	created_at      *time.Time
	updated_at      *time.Time
	selected_model  *string
	clearedFields   map[string]struct{}
	project         *int
	clearedproject  bool
	messages        map[int]struct{}
	removedmessages map[int]struct{}
	clearedmessages bool
	done            bool
	oldValue        func(context.Context) (*ChatSession, error)
	predicates      []predicate.ChatSession
}

var _ ent.Mutation = (*ChatSessionMutation)(nil)

// chatsessionOption allows management of the mutation configuration using functional options.
type chatsessionOption func(*ChatSessionMutation)

// newChatSessionMutation creates new mutation for the ChatSession entity.
func newChatSessionMutation(c config, op Op, opts ...chatsessionOption) *ChatSessionMutation {
	m := &ChatSessionMutation{
		config:        c,
		op:            op,
		typ:           TypeChatSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatSessionID sets the ID field of the mutation.
func withChatSessionID(id int) chatsessionOption {
	return func(m *ChatSessionMutation) {
		var (
			err   error
			once  sync.Once
			value *ChatSession
		)
		m.oldValue = func(ctx context.Context) (*ChatSession, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChatSession.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChatSession sets the old ChatSession of the mutation.
func withChatSession(node *ChatSession) chatsessionOption {
	return func(m *ChatSessionMutation) {
		m.oldValue = func(context.Context) (*ChatSession, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatSessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatSessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatSessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatSessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChatSession.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSessionID sets the "session_id" field.
func (m *ChatSessionMutation) SetSessionID(s string) {
	m.session_id = &s
}

// SessionID returns the value of the "session_id" field in the mutation.
func (m *ChatSessionMutation) SessionID() (r string, exists bool) {
	v := m.session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionID returns the old "session_id" field's value of the ChatSession entity.
// If the ChatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatSessionMutation) OldSessionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionID: %w", err)
	}
	return oldValue.SessionID, nil
}

// ResetSessionID resets all changes to the "session_id" field.
func (m *ChatSessionMutation) ResetSessionID() {
	m.session_id = nil
}

// SetProjectID sets the "project_id" field.
func (m *ChatSessionMutation) SetProjectID(i int) {
	m.project = &i
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *ChatSessionMutation) ProjectID() (r int, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the ChatSession entity.
// If the ChatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatSessionMutation) OldProjectID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *ChatSessionMutation) ResetProjectID() {
	m.project = nil
}

// SetEndpointID sets the "endpoint_id" field.
func (m *ChatSessionMutation) SetEndpointID(s string) {
	m.endpoint_id = &s
}

// EndpointID returns the value of the "endpoint_id" field in the mutation.
func (m *ChatSessionMutation) EndpointID() (r string, exists bool) {
	v := m.endpoint_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEndpointID returns the old "endpoint_id" field's value of the ChatSession entity.
// If the ChatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatSessionMutation) OldEndpointID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndpointID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndpointID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndpointID: %w", err)
	}
	return oldValue.EndpointID, nil
}

// ResetEndpointID resets all changes to the "endpoint_id" field.
func (m *ChatSessionMutation) ResetEndpointID() {
	m.endpoint_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ChatSessionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ChatSessionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ChatSession entity.
// If the ChatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatSessionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ChatSessionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ChatSessionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ChatSessionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ChatSession entity.
// If the ChatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatSessionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ChatSessionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSelectedModel sets the "selected_model" field.
func (m *ChatSessionMutation) SetSelectedModel(s string) {
	m.selected_model = &s
}

// SelectedModel returns the value of the "selected_model" field in the mutation.
func (m *ChatSessionMutation) SelectedModel() (r string, exists bool) {
	v := m.selected_model
	if v == nil {
		return
	}
	return *v, true
}

// OldSelectedModel returns the old "selected_model" field's value of the ChatSession entity.
// If the ChatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatSessionMutation) OldSelectedModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSelectedModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSelectedModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSelectedModel: %w", err)
	}
	return oldValue.SelectedModel, nil
}

// ClearSelectedModel clears the value of the "selected_model" field.
func (m *ChatSessionMutation) ClearSelectedModel() {
	m.selected_model = nil
	m.clearedFields[chatsession.FieldSelectedModel] = struct{}{}
}

// SelectedModelCleared returns if the "selected_model" field was cleared in this mutation.
func (m *ChatSessionMutation) SelectedModelCleared() bool {
	_, ok := m.clearedFields[chatsession.FieldSelectedModel]
	return ok
}

// ResetSelectedModel resets all changes to the "selected_model" field.
func (m *ChatSessionMutation) ResetSelectedModel() {
	m.selected_model = nil
	delete(m.clearedFields, chatsession.FieldSelectedModel)
}

// ClearProject clears the "project" edge to the Project entity.
func (m *ChatSessionMutation) ClearProject() {
	m.clearedproject = true
	m.clearedFields[chatsession.FieldProjectID] = struct{}{}
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *ChatSessionMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *ChatSessionMutation) ProjectIDs() (ids []int) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *ChatSessionMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// AddMessageIDs adds the "messages" edge to the ChatMessage entity by ids.
func (m *ChatSessionMutation) AddMessageIDs(ids ...int) {
	if m.messages == nil {
		m.messages = make(map[int]struct{})
	}
	for i := range ids {
		m.messages[ids[i]] = struct{}{}
	}
}

// ClearMessages clears the "messages" edge to the ChatMessage entity.
func (m *ChatSessionMutation) ClearMessages() {
	m.clearedmessages = true
}

// MessagesCleared reports if the "messages" edge to the ChatMessage entity was cleared.
func (m *ChatSessionMutation) MessagesCleared() bool {
	return m.clearedmessages
}

// RemoveMessageIDs removes the "messages" edge to the ChatMessage entity by IDs.
func (m *ChatSessionMutation) RemoveMessageIDs(ids ...int) {
	if m.removedmessages == nil {
		m.removedmessages = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.messages, ids[i])
		m.removedmessages[ids[i]] = struct{}{}
	}
}

// RemovedMessages returns the removed IDs of the "messages" edge to the ChatMessage entity.
func (m *ChatSessionMutation) RemovedMessagesIDs() (ids []int) {
	for id := range m.removedmessages {
		ids = append(ids, id)
	}
	return
}

// MessagesIDs returns the "messages" edge IDs in the mutation.
func (m *ChatSessionMutation) MessagesIDs() (ids []int) {
	for id := range m.messages {
		ids = append(ids, id)
	}
	return
}

// ResetMessages resets all changes to the "messages" edge.
func (m *ChatSessionMutation) ResetMessages() {
	m.messages = nil
	m.clearedmessages = false
	m.removedmessages = nil
}

// Where appends a list predicates to the ChatSessionMutation builder.
func (m *ChatSessionMutation) Where(ps ...predicate.ChatSession) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChatSessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChatSessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ChatSession, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChatSessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChatSessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ChatSession).
func (m *ChatSessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatSessionMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.session_id != nil {
		fields = append(fields, chatsession.FieldSessionID)
	}
	if m.project != nil {
		fields = append(fields, chatsession.FieldProjectID)
	}
	if m.endpoint_id != nil {
		fields = append(fields, chatsession.FieldEndpointID)
	}
	if m.created_at != nil {
		fields = append(fields, chatsession.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, chatsession.FieldUpdatedAt)
	}
	if m.selected_model != nil {
		fields = append(fields, chatsession.FieldSelectedModel)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatSessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chatsession.FieldSessionID:
		return m.SessionID()
	case chatsession.FieldProjectID:
		return m.ProjectID()
	case chatsession.FieldEndpointID:
		return m.EndpointID()
	case chatsession.FieldCreatedAt:
		return m.CreatedAt()
	case chatsession.FieldUpdatedAt:
		return m.UpdatedAt()
	case chatsession.FieldSelectedModel:
		return m.SelectedModel()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatSessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chatsession.FieldSessionID:
		return m.OldSessionID(ctx)
	case chatsession.FieldProjectID:
		return m.OldProjectID(ctx)
	case chatsession.FieldEndpointID:
		return m.OldEndpointID(ctx)
	case chatsession.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case chatsession.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case chatsession.FieldSelectedModel:
		return m.OldSelectedModel(ctx)
	}
	return nil, fmt.Errorf("unknown ChatSession field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatSessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chatsession.FieldSessionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	case chatsession.FieldProjectID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case chatsession.FieldEndpointID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndpointID(v)
		return nil
	case chatsession.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case chatsession.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case chatsession.FieldSelectedModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSelectedModel(v)
		return nil
	}
	return fmt.Errorf("unknown ChatSession field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatSessionMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatSessionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatSessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ChatSession numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatSessionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(chatsession.FieldSelectedModel) {
		fields = append(fields, chatsession.FieldSelectedModel)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatSessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatSessionMutation) ClearField(name string) error {
	switch name {
	case chatsession.FieldSelectedModel:
		m.ClearSelectedModel()
		return nil
	}
	return fmt.Errorf("unknown ChatSession nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatSessionMutation) ResetField(name string) error {
	switch name {
	case chatsession.FieldSessionID:
		m.ResetSessionID()
		return nil
	case chatsession.FieldProjectID:
		m.ResetProjectID()
		return nil
	case chatsession.FieldEndpointID:
		m.ResetEndpointID()
		return nil
	case chatsession.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case chatsession.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case chatsession.FieldSelectedModel:
		m.ResetSelectedModel()
		return nil
	}
	return fmt.Errorf("unknown ChatSession field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatSessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.project != nil {
		edges = append(edges, chatsession.EdgeProject)
	}
	if m.messages != nil {
		edges = append(edges, chatsession.EdgeMessages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatSessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chatsession.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case chatsession.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.messages))
		for id := range m.messages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatSessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmessages != nil {
		edges = append(edges, chatsession.EdgeMessages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatSessionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case chatsession.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.removedmessages))
		for id := range m.removedmessages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatSessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedproject {
		edges = append(edges, chatsession.EdgeProject)
	}
	if m.clearedmessages {
		edges = append(edges, chatsession.EdgeMessages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatSessionMutation) EdgeCleared(name string) bool {
	switch name {
	case chatsession.EdgeProject:
		return m.clearedproject
	case chatsession.EdgeMessages:
		return m.clearedmessages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatSessionMutation) ClearEdge(name string) error {
	switch name {
	case chatsession.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown ChatSession unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatSessionMutation) ResetEdge(name string) error {
	switch name {
	case chatsession.EdgeProject:
		m.ResetProject()
		return nil
	case chatsession.EdgeMessages:
		m.ResetMessages()
		return nil
	}
	return fmt.Errorf("unknown ChatSession edge %s", name)
}

// ExportJobMutation represents an operation that mutates the ExportJob nodes in the graph.
type ExportJobMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	job_id             *string
	export_type        *string
	output_path        *string
	stage              *string
	progress           *float64
	addprogress        *float64
	current_file       *string
	total_files        *int
	addtotal_files     *int
	processed_files    *int
	addprocessed_files *int
	is_complete        *bool
	has_error          *bool
	error_message      *string
	is_cancelled       *bool
	created_at         *time.Time
	updated_at         *time.Time
	completed_at       *time.Time
	clearedFields      map[string]struct{}
	project            *int
	clearedproject     bool
	done               bool
	oldValue           func(context.Context) (*ExportJob, error)
	predicates         []predicate.ExportJob
}

var _ ent.Mutation = (*ExportJobMutation)(nil)

// exportjobOption allows management of the mutation configuration using functional options.
type exportjobOption func(*ExportJobMutation)

// newExportJobMutation creates new mutation for the ExportJob entity.
func newExportJobMutation(c config, op Op, opts ...exportjobOption) *ExportJobMutation {
	m := &ExportJobMutation{
		config:        c,
		op:            op,
		typ:           TypeExportJob,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExportJobID sets the ID field of the mutation.
func withExportJobID(id int) exportjobOption {
	return func(m *ExportJobMutation) {
		var (
			err   error
			once  sync.Once
			value *ExportJob
		)
		m.oldValue = func(ctx context.Context) (*ExportJob, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExportJob.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExportJob sets the old ExportJob of the mutation.
func withExportJob(node *ExportJob) exportjobOption {
	return func(m *ExportJobMutation) {
		m.oldValue = func(context.Context) (*ExportJob, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExportJobMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExportJobMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExportJobMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExportJobMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExportJob.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetJobID sets the "job_id" field.
func (m *ExportJobMutation) SetJobID(s string) {
	m.job_id = &s
}

// JobID returns the value of the "job_id" field in the mutation.
func (m *ExportJobMutation) JobID() (r string, exists bool) {
	v := m.job_id
	if v == nil {
		return
	}
	return *v, true
}

// OldJobID returns the old "job_id" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldJobID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJobID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJobID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobID: %w", err)
	}
	return oldValue.JobID, nil
}

// ResetJobID resets all changes to the "job_id" field.
func (m *ExportJobMutation) ResetJobID() {
	m.job_id = nil
}

// SetExportType sets the "export_type" field.
func (m *ExportJobMutation) SetExportType(s string) {
	m.export_type = &s
}

// ExportType returns the value of the "export_type" field in the mutation.
func (m *ExportJobMutation) ExportType() (r string, exists bool) {
	v := m.export_type
	if v == nil {
		return
	}
	return *v, true
}

// OldExportType returns the old "export_type" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldExportType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExportType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExportType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExportType: %w", err)
	}
	return oldValue.ExportType, nil
}

// ResetExportType resets all changes to the "export_type" field.
func (m *ExportJobMutation) ResetExportType() {
	m.export_type = nil
}

// SetOutputPath sets the "output_path" field.
func (m *ExportJobMutation) SetOutputPath(s string) {
	m.output_path = &s
}

// OutputPath returns the value of the "output_path" field in the mutation.
func (m *ExportJobMutation) OutputPath() (r string, exists bool) {
	v := m.output_path
	if v == nil {
		return
	}
	return *v, true
}

// OldOutputPath returns the old "output_path" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldOutputPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutputPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutputPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutputPath: %w", err)
	}
	return oldValue.OutputPath, nil
}

// ResetOutputPath resets all changes to the "output_path" field.
func (m *ExportJobMutation) ResetOutputPath() {
	m.output_path = nil
}

// SetStage sets the "stage" field.
func (m *ExportJobMutation) SetStage(s string) {
	m.stage = &s
}

// Stage returns the value of the "stage" field in the mutation.
func (m *ExportJobMutation) Stage() (r string, exists bool) {
	v := m.stage
	if v == nil {
		return
	}
	return *v, true
}

// OldStage returns the old "stage" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldStage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStage: %w", err)
	}
	return oldValue.Stage, nil
}

// ResetStage resets all changes to the "stage" field.
func (m *ExportJobMutation) ResetStage() {
	m.stage = nil
}

// SetProgress sets the "progress" field.
func (m *ExportJobMutation) SetProgress(f float64) {
	m.progress = &f
	m.addprogress = nil
}

// Progress returns the value of the "progress" field in the mutation.
func (m *ExportJobMutation) Progress() (r float64, exists bool) {
	v := m.progress
	if v == nil {
		return
	}
	return *v, true
}

// OldProgress returns the old "progress" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldProgress(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgress: %w", err)
	}
	return oldValue.Progress, nil
}

// AddProgress adds f to the "progress" field.
func (m *ExportJobMutation) AddProgress(f float64) {
	if m.addprogress != nil {
		*m.addprogress += f
	} else {
		m.addprogress = &f
	}
}

// AddedProgress returns the value that was added to the "progress" field in this mutation.
func (m *ExportJobMutation) AddedProgress() (r float64, exists bool) {
	v := m.addprogress
	if v == nil {
		return
	}
	return *v, true
}

// ResetProgress resets all changes to the "progress" field.
func (m *ExportJobMutation) ResetProgress() {
	m.progress = nil
	m.addprogress = nil
}

// SetCurrentFile sets the "current_file" field.
func (m *ExportJobMutation) SetCurrentFile(s string) {
	m.current_file = &s
}

// CurrentFile returns the value of the "current_file" field in the mutation.
func (m *ExportJobMutation) CurrentFile() (r string, exists bool) {
	v := m.current_file
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentFile returns the old "current_file" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldCurrentFile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentFile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentFile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentFile: %w", err)
	}
	return oldValue.CurrentFile, nil
}

// ClearCurrentFile clears the value of the "current_file" field.
func (m *ExportJobMutation) ClearCurrentFile() {
	m.current_file = nil
	m.clearedFields[exportjob.FieldCurrentFile] = struct{}{}
}

// CurrentFileCleared returns if the "current_file" field was cleared in this mutation.
func (m *ExportJobMutation) CurrentFileCleared() bool {
	_, ok := m.clearedFields[exportjob.FieldCurrentFile]
	return ok
}

// ResetCurrentFile resets all changes to the "current_file" field.
func (m *ExportJobMutation) ResetCurrentFile() {
	m.current_file = nil
	delete(m.clearedFields, exportjob.FieldCurrentFile)
}

// SetTotalFiles sets the "total_files" field.
func (m *ExportJobMutation) SetTotalFiles(i int) {
	m.total_files = &i
	m.addtotal_files = nil
}

// TotalFiles returns the value of the "total_files" field in the mutation.
func (m *ExportJobMutation) TotalFiles() (r int, exists bool) {
	v := m.total_files
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalFiles returns the old "total_files" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldTotalFiles(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalFiles is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalFiles requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalFiles: %w", err)
	}
	return oldValue.TotalFiles, nil
}

// AddTotalFiles adds i to the "total_files" field.
func (m *ExportJobMutation) AddTotalFiles(i int) {
	if m.addtotal_files != nil {
		*m.addtotal_files += i
	} else {
		m.addtotal_files = &i
	}
}

// AddedTotalFiles returns the value that was added to the "total_files" field in this mutation.
func (m *ExportJobMutation) AddedTotalFiles() (r int, exists bool) {
	v := m.addtotal_files
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalFiles resets all changes to the "total_files" field.
func (m *ExportJobMutation) ResetTotalFiles() {
	m.total_files = nil
	m.addtotal_files = nil
}

// SetProcessedFiles sets the "processed_files" field.
func (m *ExportJobMutation) SetProcessedFiles(i int) {
	m.processed_files = &i
	m.addprocessed_files = nil
}

// ProcessedFiles returns the value of the "processed_files" field in the mutation.
func (m *ExportJobMutation) ProcessedFiles() (r int, exists bool) {
	v := m.processed_files
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessedFiles returns the old "processed_files" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldProcessedFiles(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessedFiles is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessedFiles requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessedFiles: %w", err)
	}
	return oldValue.ProcessedFiles, nil
}

// AddProcessedFiles adds i to the "processed_files" field.
func (m *ExportJobMutation) AddProcessedFiles(i int) {
	if m.addprocessed_files != nil {
		*m.addprocessed_files += i
	} else {
		m.addprocessed_files = &i
	}
}

// AddedProcessedFiles returns the value that was added to the "processed_files" field in this mutation.
func (m *ExportJobMutation) AddedProcessedFiles() (r int, exists bool) {
	v := m.addprocessed_files
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcessedFiles resets all changes to the "processed_files" field.
func (m *ExportJobMutation) ResetProcessedFiles() {
	m.processed_files = nil
	m.addprocessed_files = nil
}

// SetIsComplete sets the "is_complete" field.
func (m *ExportJobMutation) SetIsComplete(b bool) {
	m.is_complete = &b
}

// IsComplete returns the value of the "is_complete" field in the mutation.
func (m *ExportJobMutation) IsComplete() (r bool, exists bool) {
	v := m.is_complete
	if v == nil {
		return
	}
	return *v, true
}

// OldIsComplete returns the old "is_complete" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldIsComplete(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsComplete is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsComplete requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsComplete: %w", err)
	}
	return oldValue.IsComplete, nil
}

// ResetIsComplete resets all changes to the "is_complete" field.
func (m *ExportJobMutation) ResetIsComplete() {
	m.is_complete = nil
}

// SetHasError sets the "has_error" field.
func (m *ExportJobMutation) SetHasError(b bool) {
	m.has_error = &b
}

// HasError returns the value of the "has_error" field in the mutation.
func (m *ExportJobMutation) HasError() (r bool, exists bool) {
	v := m.has_error
	if v == nil {
		return
	}
	return *v, true
}

// OldHasError returns the old "has_error" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldHasError(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasError is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasError: %w", err)
	}
	return oldValue.HasError, nil
}

// ResetHasError resets all changes to the "has_error" field.
func (m *ExportJobMutation) ResetHasError() {
	m.has_error = nil
}

// SetErrorMessage sets the "error_message" field.
func (m *ExportJobMutation) SetErrorMessage(s string) {
	m.error_message = &s
}

// ErrorMessage returns the value of the "error_message" field in the mutation.
func (m *ExportJobMutation) ErrorMessage() (r string, exists bool) {
	v := m.error_message
	if v == nil {
		return
	}
	return *v, true
}

// OldErrorMessage returns the old "error_message" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldErrorMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErrorMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErrorMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrorMessage: %w", err)
	}
	return oldValue.ErrorMessage, nil
}

// ClearErrorMessage clears the value of the "error_message" field.
func (m *ExportJobMutation) ClearErrorMessage() {
	m.error_message = nil
	m.clearedFields[exportjob.FieldErrorMessage] = struct{}{}
}

// ErrorMessageCleared returns if the "error_message" field was cleared in this mutation.
func (m *ExportJobMutation) ErrorMessageCleared() bool {
	_, ok := m.clearedFields[exportjob.FieldErrorMessage]
	return ok
}

// ResetErrorMessage resets all changes to the "error_message" field.
func (m *ExportJobMutation) ResetErrorMessage() {
	m.error_message = nil
	delete(m.clearedFields, exportjob.FieldErrorMessage)
}

// SetIsCancelled sets the "is_cancelled" field.
func (m *ExportJobMutation) SetIsCancelled(b bool) {
	m.is_cancelled = &b
}

// IsCancelled returns the value of the "is_cancelled" field in the mutation.
func (m *ExportJobMutation) IsCancelled() (r bool, exists bool) {
	v := m.is_cancelled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCancelled returns the old "is_cancelled" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldIsCancelled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCancelled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCancelled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCancelled: %w", err)
	}
	return oldValue.IsCancelled, nil
}

// ResetIsCancelled resets all changes to the "is_cancelled" field.
func (m *ExportJobMutation) ResetIsCancelled() {
	m.is_cancelled = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ExportJobMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExportJobMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExportJobMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExportJobMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExportJobMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExportJobMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCompletedAt sets the "completed_at" field.
func (m *ExportJobMutation) SetCompletedAt(t time.Time) {
	m.completed_at = &t
}

// CompletedAt returns the value of the "completed_at" field in the mutation.
func (m *ExportJobMutation) CompletedAt() (r time.Time, exists bool) {
	v := m.completed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCompletedAt returns the old "completed_at" field's value of the ExportJob entity.
// If the ExportJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportJobMutation) OldCompletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompletedAt: %w", err)
	}
	return oldValue.CompletedAt, nil
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (m *ExportJobMutation) ClearCompletedAt() {
	m.completed_at = nil
	m.clearedFields[exportjob.FieldCompletedAt] = struct{}{}
}

// CompletedAtCleared returns if the "completed_at" field was cleared in this mutation.
func (m *ExportJobMutation) CompletedAtCleared() bool {
	_, ok := m.clearedFields[exportjob.FieldCompletedAt]
	return ok
}

// ResetCompletedAt resets all changes to the "completed_at" field.
func (m *ExportJobMutation) ResetCompletedAt() {
	m.completed_at = nil
	delete(m.clearedFields, exportjob.FieldCompletedAt)
}

// SetProjectID sets the "project" edge to the Project entity by id.
func (m *ExportJobMutation) SetProjectID(id int) {
	m.project = &id
}

// ClearProject clears the "project" edge to the Project entity.
func (m *ExportJobMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *ExportJobMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectID returns the "project" edge ID in the mutation.
func (m *ExportJobMutation) ProjectID() (id int, exists bool) {
	if m.project != nil {
		return *m.project, true
	}
	return
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *ExportJobMutation) ProjectIDs() (ids []int) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *ExportJobMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// Where appends a list predicates to the ExportJobMutation builder.
func (m *ExportJobMutation) Where(ps ...predicate.ExportJob) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExportJobMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExportJobMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExportJob, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExportJobMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExportJobMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExportJob).
func (m *ExportJobMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExportJobMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.job_id != nil {
		fields = append(fields, exportjob.FieldJobID)
	}
	if m.export_type != nil {
		fields = append(fields, exportjob.FieldExportType)
	}
	if m.output_path != nil {
		fields = append(fields, exportjob.FieldOutputPath)
	}
	if m.stage != nil {
		fields = append(fields, exportjob.FieldStage)
	}
	if m.progress != nil {
		fields = append(fields, exportjob.FieldProgress)
	}
	if m.current_file != nil {
		fields = append(fields, exportjob.FieldCurrentFile)
	}
	if m.total_files != nil {
		fields = append(fields, exportjob.FieldTotalFiles)
	}
	if m.processed_files != nil {
		fields = append(fields, exportjob.FieldProcessedFiles)
	}
	if m.is_complete != nil {
		fields = append(fields, exportjob.FieldIsComplete)
	}
	if m.has_error != nil {
		fields = append(fields, exportjob.FieldHasError)
	}
	if m.error_message != nil {
		fields = append(fields, exportjob.FieldErrorMessage)
	}
	if m.is_cancelled != nil {
		fields = append(fields, exportjob.FieldIsCancelled)
	}
	if m.created_at != nil {
		fields = append(fields, exportjob.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, exportjob.FieldUpdatedAt)
	}
	if m.completed_at != nil {
		fields = append(fields, exportjob.FieldCompletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExportJobMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case exportjob.FieldJobID:
		return m.JobID()
	case exportjob.FieldExportType:
		return m.ExportType()
	case exportjob.FieldOutputPath:
		return m.OutputPath()
	case exportjob.FieldStage:
		return m.Stage()
	case exportjob.FieldProgress:
		return m.Progress()
	case exportjob.FieldCurrentFile:
		return m.CurrentFile()
	case exportjob.FieldTotalFiles:
		return m.TotalFiles()
	case exportjob.FieldProcessedFiles:
		return m.ProcessedFiles()
	case exportjob.FieldIsComplete:
		return m.IsComplete()
	case exportjob.FieldHasError:
		return m.HasError()
	case exportjob.FieldErrorMessage:
		return m.ErrorMessage()
	case exportjob.FieldIsCancelled:
		return m.IsCancelled()
	case exportjob.FieldCreatedAt:
		return m.CreatedAt()
	case exportjob.FieldUpdatedAt:
		return m.UpdatedAt()
	case exportjob.FieldCompletedAt:
		return m.CompletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExportJobMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case exportjob.FieldJobID:
		return m.OldJobID(ctx)
	case exportjob.FieldExportType:
		return m.OldExportType(ctx)
	case exportjob.FieldOutputPath:
		return m.OldOutputPath(ctx)
	case exportjob.FieldStage:
		return m.OldStage(ctx)
	case exportjob.FieldProgress:
		return m.OldProgress(ctx)
	case exportjob.FieldCurrentFile:
		return m.OldCurrentFile(ctx)
	case exportjob.FieldTotalFiles:
		return m.OldTotalFiles(ctx)
	case exportjob.FieldProcessedFiles:
		return m.OldProcessedFiles(ctx)
	case exportjob.FieldIsComplete:
		return m.OldIsComplete(ctx)
	case exportjob.FieldHasError:
		return m.OldHasError(ctx)
	case exportjob.FieldErrorMessage:
		return m.OldErrorMessage(ctx)
	case exportjob.FieldIsCancelled:
		return m.OldIsCancelled(ctx)
	case exportjob.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case exportjob.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case exportjob.FieldCompletedAt:
		return m.OldCompletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ExportJob field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExportJobMutation) SetField(name string, value ent.Value) error {
	switch name {
	case exportjob.FieldJobID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobID(v)
		return nil
	case exportjob.FieldExportType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExportType(v)
		return nil
	case exportjob.FieldOutputPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutputPath(v)
		return nil
	case exportjob.FieldStage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStage(v)
		return nil
	case exportjob.FieldProgress:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgress(v)
		return nil
	case exportjob.FieldCurrentFile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentFile(v)
		return nil
	case exportjob.FieldTotalFiles:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalFiles(v)
		return nil
	case exportjob.FieldProcessedFiles:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessedFiles(v)
		return nil
	case exportjob.FieldIsComplete:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsComplete(v)
		return nil
	case exportjob.FieldHasError:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasError(v)
		return nil
	case exportjob.FieldErrorMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrorMessage(v)
		return nil
	case exportjob.FieldIsCancelled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCancelled(v)
		return nil
	case exportjob.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case exportjob.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case exportjob.FieldCompletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ExportJob field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExportJobMutation) AddedFields() []string {
	var fields []string
	if m.addprogress != nil {
		fields = append(fields, exportjob.FieldProgress)
	}
	if m.addtotal_files != nil {
		fields = append(fields, exportjob.FieldTotalFiles)
	}
	if m.addprocessed_files != nil {
		fields = append(fields, exportjob.FieldProcessedFiles)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExportJobMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case exportjob.FieldProgress:
		return m.AddedProgress()
	case exportjob.FieldTotalFiles:
		return m.AddedTotalFiles()
	case exportjob.FieldProcessedFiles:
		return m.AddedProcessedFiles()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExportJobMutation) AddField(name string, value ent.Value) error {
	switch name {
	case exportjob.FieldProgress:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProgress(v)
		return nil
	case exportjob.FieldTotalFiles:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalFiles(v)
		return nil
	case exportjob.FieldProcessedFiles:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcessedFiles(v)
		return nil
	}
	return fmt.Errorf("unknown ExportJob numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExportJobMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(exportjob.FieldCurrentFile) {
		fields = append(fields, exportjob.FieldCurrentFile)
	}
	if m.FieldCleared(exportjob.FieldErrorMessage) {
		fields = append(fields, exportjob.FieldErrorMessage)
	}
	if m.FieldCleared(exportjob.FieldCompletedAt) {
		fields = append(fields, exportjob.FieldCompletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExportJobMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExportJobMutation) ClearField(name string) error {
	switch name {
	case exportjob.FieldCurrentFile:
		m.ClearCurrentFile()
		return nil
	case exportjob.FieldErrorMessage:
		m.ClearErrorMessage()
		return nil
	case exportjob.FieldCompletedAt:
		m.ClearCompletedAt()
		return nil
	}
	return fmt.Errorf("unknown ExportJob nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExportJobMutation) ResetField(name string) error {
	switch name {
	case exportjob.FieldJobID:
		m.ResetJobID()
		return nil
	case exportjob.FieldExportType:
		m.ResetExportType()
		return nil
	case exportjob.FieldOutputPath:
		m.ResetOutputPath()
		return nil
	case exportjob.FieldStage:
		m.ResetStage()
		return nil
	case exportjob.FieldProgress:
		m.ResetProgress()
		return nil
	case exportjob.FieldCurrentFile:
		m.ResetCurrentFile()
		return nil
	case exportjob.FieldTotalFiles:
		m.ResetTotalFiles()
		return nil
	case exportjob.FieldProcessedFiles:
		m.ResetProcessedFiles()
		return nil
	case exportjob.FieldIsComplete:
		m.ResetIsComplete()
		return nil
	case exportjob.FieldHasError:
		m.ResetHasError()
		return nil
	case exportjob.FieldErrorMessage:
		m.ResetErrorMessage()
		return nil
	case exportjob.FieldIsCancelled:
		m.ResetIsCancelled()
		return nil
	case exportjob.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case exportjob.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case exportjob.FieldCompletedAt:
		m.ResetCompletedAt()
		return nil
	}
	return fmt.Errorf("unknown ExportJob field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExportJobMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.project != nil {
		edges = append(edges, exportjob.EdgeProject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExportJobMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case exportjob.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExportJobMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExportJobMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExportJobMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproject {
		edges = append(edges, exportjob.EdgeProject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExportJobMutation) EdgeCleared(name string) bool {
	switch name {
	case exportjob.EdgeProject:
		return m.clearedproject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExportJobMutation) ClearEdge(name string) error {
	switch name {
	case exportjob.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown ExportJob unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExportJobMutation) ResetEdge(name string) error {
	switch name {
	case exportjob.EdgeProject:
		m.ResetProject()
		return nil
	}
	return fmt.Errorf("unknown ExportJob edge %s", name)
}

// ProjectMutation represents an operation that mutates the Project nodes in the graph.
type ProjectMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int
	name                          *string
	description                   *string
	_path                         *string
	created_at                    *time.Time
	updated_at                    *time.Time
	ai_model                      *string
	ai_prompt                     *string
	ai_suggestion_order           *[]interface{}
	appendai_suggestion_order     []interface{}
	ai_suggestion_model           *string
	ai_suggestion_created_at      *time.Time
	ai_highlight_model            *string
	ai_highlight_prompt           *string
	active_tab                    *string
	ai_silence_improvements       *[]map[string]interface{}
	appendai_silence_improvements []map[string]interface{}
	ai_silence_model              *string
	ai_silence_created_at         *time.Time
	highlight_order               *[]interface{}
	appendhighlight_order         []interface{}
	order_history                 *[][]interface{}
	appendorder_history           [][]interface{}
	order_history_index           *int
	addorder_history_index        *int
	hidden_highlights             *[]string
	appendhidden_highlights       []string
	clearedFields                 map[string]struct{}
	video_clips                   map[int]struct{}
	removedvideo_clips            map[int]struct{}
	clearedvideo_clips            bool
	export_jobs                   map[int]struct{}
	removedexport_jobs            map[int]struct{}
	clearedexport_jobs            bool
	chat_sessions                 map[int]struct{}
	removedchat_sessions          map[int]struct{}
	clearedchat_sessions          bool
	done                          bool
	oldValue                      func(context.Context) (*Project, error)
	predicates                    []predicate.Project
}

var _ ent.Mutation = (*ProjectMutation)(nil)

// projectOption allows management of the mutation configuration using functional options.
type projectOption func(*ProjectMutation)

// newProjectMutation creates new mutation for the Project entity.
func newProjectMutation(c config, op Op, opts ...projectOption) *ProjectMutation {
	m := &ProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectID sets the ID field of the mutation.
func withProjectID(id int) projectOption {
	return func(m *ProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Project
		)
		m.oldValue = func(ctx context.Context) (*Project, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Project.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProject sets the old Project of the mutation.
func withProject(node *Project) projectOption {
	return func(m *ProjectMutation) {
		m.oldValue = func(context.Context) (*Project, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Project.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProjectMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ProjectMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProjectMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProjectMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[project.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProjectMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[project.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProjectMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, project.FieldDescription)
}

// SetPath sets the "path" field.
func (m *ProjectMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *ProjectMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *ProjectMutation) ResetPath() {
	m._path = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAiModel sets the "ai_model" field.
func (m *ProjectMutation) SetAiModel(s string) {
	m.ai_model = &s
}

// AiModel returns the value of the "ai_model" field in the mutation.
func (m *ProjectMutation) AiModel() (r string, exists bool) {
	v := m.ai_model
	if v == nil {
		return
	}
	return *v, true
}

// OldAiModel returns the old "ai_model" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldAiModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAiModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAiModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAiModel: %w", err)
	}
	return oldValue.AiModel, nil
}

// ClearAiModel clears the value of the "ai_model" field.
func (m *ProjectMutation) ClearAiModel() {
	m.ai_model = nil
	m.clearedFields[project.FieldAiModel] = struct{}{}
}

// AiModelCleared returns if the "ai_model" field was cleared in this mutation.
func (m *ProjectMutation) AiModelCleared() bool {
	_, ok := m.clearedFields[project.FieldAiModel]
	return ok
}

// ResetAiModel resets all changes to the "ai_model" field.
func (m *ProjectMutation) ResetAiModel() {
	m.ai_model = nil
	delete(m.clearedFields, project.FieldAiModel)
}

// SetAiPrompt sets the "ai_prompt" field.
func (m *ProjectMutation) SetAiPrompt(s string) {
	m.ai_prompt = &s
}

// AiPrompt returns the value of the "ai_prompt" field in the mutation.
func (m *ProjectMutation) AiPrompt() (r string, exists bool) {
	v := m.ai_prompt
	if v == nil {
		return
	}
	return *v, true
}

// OldAiPrompt returns the old "ai_prompt" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldAiPrompt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAiPrompt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAiPrompt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAiPrompt: %w", err)
	}
	return oldValue.AiPrompt, nil
}

// ClearAiPrompt clears the value of the "ai_prompt" field.
func (m *ProjectMutation) ClearAiPrompt() {
	m.ai_prompt = nil
	m.clearedFields[project.FieldAiPrompt] = struct{}{}
}

// AiPromptCleared returns if the "ai_prompt" field was cleared in this mutation.
func (m *ProjectMutation) AiPromptCleared() bool {
	_, ok := m.clearedFields[project.FieldAiPrompt]
	return ok
}

// ResetAiPrompt resets all changes to the "ai_prompt" field.
func (m *ProjectMutation) ResetAiPrompt() {
	m.ai_prompt = nil
	delete(m.clearedFields, project.FieldAiPrompt)
}

// SetAiSuggestionOrder sets the "ai_suggestion_order" field.
func (m *ProjectMutation) SetAiSuggestionOrder(i []interface{}) {
	m.ai_suggestion_order = &i
	m.appendai_suggestion_order = nil
}

// AiSuggestionOrder returns the value of the "ai_suggestion_order" field in the mutation.
func (m *ProjectMutation) AiSuggestionOrder() (r []interface{}, exists bool) {
	v := m.ai_suggestion_order
	if v == nil {
		return
	}
	return *v, true
}

// OldAiSuggestionOrder returns the old "ai_suggestion_order" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldAiSuggestionOrder(ctx context.Context) (v []interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAiSuggestionOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAiSuggestionOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAiSuggestionOrder: %w", err)
	}
	return oldValue.AiSuggestionOrder, nil
}

// AppendAiSuggestionOrder adds i to the "ai_suggestion_order" field.
func (m *ProjectMutation) AppendAiSuggestionOrder(i []interface{}) {
	m.appendai_suggestion_order = append(m.appendai_suggestion_order, i...)
}

// AppendedAiSuggestionOrder returns the list of values that were appended to the "ai_suggestion_order" field in this mutation.
func (m *ProjectMutation) AppendedAiSuggestionOrder() ([]interface{}, bool) {
	if len(m.appendai_suggestion_order) == 0 {
		return nil, false
	}
	return m.appendai_suggestion_order, true
}

// ClearAiSuggestionOrder clears the value of the "ai_suggestion_order" field.
func (m *ProjectMutation) ClearAiSuggestionOrder() {
	m.ai_suggestion_order = nil
	m.appendai_suggestion_order = nil
	m.clearedFields[project.FieldAiSuggestionOrder] = struct{}{}
}

// AiSuggestionOrderCleared returns if the "ai_suggestion_order" field was cleared in this mutation.
func (m *ProjectMutation) AiSuggestionOrderCleared() bool {
	_, ok := m.clearedFields[project.FieldAiSuggestionOrder]
	return ok
}

// ResetAiSuggestionOrder resets all changes to the "ai_suggestion_order" field.
func (m *ProjectMutation) ResetAiSuggestionOrder() {
	m.ai_suggestion_order = nil
	m.appendai_suggestion_order = nil
	delete(m.clearedFields, project.FieldAiSuggestionOrder)
}

// SetAiSuggestionModel sets the "ai_suggestion_model" field.
func (m *ProjectMutation) SetAiSuggestionModel(s string) {
	m.ai_suggestion_model = &s
}

// AiSuggestionModel returns the value of the "ai_suggestion_model" field in the mutation.
func (m *ProjectMutation) AiSuggestionModel() (r string, exists bool) {
	v := m.ai_suggestion_model
	if v == nil {
		return
	}
	return *v, true
}

// OldAiSuggestionModel returns the old "ai_suggestion_model" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldAiSuggestionModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAiSuggestionModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAiSuggestionModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAiSuggestionModel: %w", err)
	}
	return oldValue.AiSuggestionModel, nil
}

// ClearAiSuggestionModel clears the value of the "ai_suggestion_model" field.
func (m *ProjectMutation) ClearAiSuggestionModel() {
	m.ai_suggestion_model = nil
	m.clearedFields[project.FieldAiSuggestionModel] = struct{}{}
}

// AiSuggestionModelCleared returns if the "ai_suggestion_model" field was cleared in this mutation.
func (m *ProjectMutation) AiSuggestionModelCleared() bool {
	_, ok := m.clearedFields[project.FieldAiSuggestionModel]
	return ok
}

// ResetAiSuggestionModel resets all changes to the "ai_suggestion_model" field.
func (m *ProjectMutation) ResetAiSuggestionModel() {
	m.ai_suggestion_model = nil
	delete(m.clearedFields, project.FieldAiSuggestionModel)
}

// SetAiSuggestionCreatedAt sets the "ai_suggestion_created_at" field.
func (m *ProjectMutation) SetAiSuggestionCreatedAt(t time.Time) {
	m.ai_suggestion_created_at = &t
}

// AiSuggestionCreatedAt returns the value of the "ai_suggestion_created_at" field in the mutation.
func (m *ProjectMutation) AiSuggestionCreatedAt() (r time.Time, exists bool) {
	v := m.ai_suggestion_created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldAiSuggestionCreatedAt returns the old "ai_suggestion_created_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldAiSuggestionCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAiSuggestionCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAiSuggestionCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAiSuggestionCreatedAt: %w", err)
	}
	return oldValue.AiSuggestionCreatedAt, nil
}

// ClearAiSuggestionCreatedAt clears the value of the "ai_suggestion_created_at" field.
func (m *ProjectMutation) ClearAiSuggestionCreatedAt() {
	m.ai_suggestion_created_at = nil
	m.clearedFields[project.FieldAiSuggestionCreatedAt] = struct{}{}
}

// AiSuggestionCreatedAtCleared returns if the "ai_suggestion_created_at" field was cleared in this mutation.
func (m *ProjectMutation) AiSuggestionCreatedAtCleared() bool {
	_, ok := m.clearedFields[project.FieldAiSuggestionCreatedAt]
	return ok
}

// ResetAiSuggestionCreatedAt resets all changes to the "ai_suggestion_created_at" field.
func (m *ProjectMutation) ResetAiSuggestionCreatedAt() {
	m.ai_suggestion_created_at = nil
	delete(m.clearedFields, project.FieldAiSuggestionCreatedAt)
}

// SetAiHighlightModel sets the "ai_highlight_model" field.
func (m *ProjectMutation) SetAiHighlightModel(s string) {
	m.ai_highlight_model = &s
}

// AiHighlightModel returns the value of the "ai_highlight_model" field in the mutation.
func (m *ProjectMutation) AiHighlightModel() (r string, exists bool) {
	v := m.ai_highlight_model
	if v == nil {
		return
	}
	return *v, true
}

// OldAiHighlightModel returns the old "ai_highlight_model" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldAiHighlightModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAiHighlightModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAiHighlightModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAiHighlightModel: %w", err)
	}
	return oldValue.AiHighlightModel, nil
}

// ClearAiHighlightModel clears the value of the "ai_highlight_model" field.
func (m *ProjectMutation) ClearAiHighlightModel() {
	m.ai_highlight_model = nil
	m.clearedFields[project.FieldAiHighlightModel] = struct{}{}
}

// AiHighlightModelCleared returns if the "ai_highlight_model" field was cleared in this mutation.
func (m *ProjectMutation) AiHighlightModelCleared() bool {
	_, ok := m.clearedFields[project.FieldAiHighlightModel]
	return ok
}

// ResetAiHighlightModel resets all changes to the "ai_highlight_model" field.
func (m *ProjectMutation) ResetAiHighlightModel() {
	m.ai_highlight_model = nil
	delete(m.clearedFields, project.FieldAiHighlightModel)
}

// SetAiHighlightPrompt sets the "ai_highlight_prompt" field.
func (m *ProjectMutation) SetAiHighlightPrompt(s string) {
	m.ai_highlight_prompt = &s
}

// AiHighlightPrompt returns the value of the "ai_highlight_prompt" field in the mutation.
func (m *ProjectMutation) AiHighlightPrompt() (r string, exists bool) {
	v := m.ai_highlight_prompt
	if v == nil {
		return
	}
	return *v, true
}

// OldAiHighlightPrompt returns the old "ai_highlight_prompt" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldAiHighlightPrompt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAiHighlightPrompt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAiHighlightPrompt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAiHighlightPrompt: %w", err)
	}
	return oldValue.AiHighlightPrompt, nil
}

// ClearAiHighlightPrompt clears the value of the "ai_highlight_prompt" field.
func (m *ProjectMutation) ClearAiHighlightPrompt() {
	m.ai_highlight_prompt = nil
	m.clearedFields[project.FieldAiHighlightPrompt] = struct{}{}
}

// AiHighlightPromptCleared returns if the "ai_highlight_prompt" field was cleared in this mutation.
func (m *ProjectMutation) AiHighlightPromptCleared() bool {
	_, ok := m.clearedFields[project.FieldAiHighlightPrompt]
	return ok
}

// ResetAiHighlightPrompt resets all changes to the "ai_highlight_prompt" field.
func (m *ProjectMutation) ResetAiHighlightPrompt() {
	m.ai_highlight_prompt = nil
	delete(m.clearedFields, project.FieldAiHighlightPrompt)
}

// SetActiveTab sets the "active_tab" field.
func (m *ProjectMutation) SetActiveTab(s string) {
	m.active_tab = &s
}

// ActiveTab returns the value of the "active_tab" field in the mutation.
func (m *ProjectMutation) ActiveTab() (r string, exists bool) {
	v := m.active_tab
	if v == nil {
		return
	}
	return *v, true
}

// OldActiveTab returns the old "active_tab" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldActiveTab(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActiveTab is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActiveTab requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActiveTab: %w", err)
	}
	return oldValue.ActiveTab, nil
}

// ClearActiveTab clears the value of the "active_tab" field.
func (m *ProjectMutation) ClearActiveTab() {
	m.active_tab = nil
	m.clearedFields[project.FieldActiveTab] = struct{}{}
}

// ActiveTabCleared returns if the "active_tab" field was cleared in this mutation.
func (m *ProjectMutation) ActiveTabCleared() bool {
	_, ok := m.clearedFields[project.FieldActiveTab]
	return ok
}

// ResetActiveTab resets all changes to the "active_tab" field.
func (m *ProjectMutation) ResetActiveTab() {
	m.active_tab = nil
	delete(m.clearedFields, project.FieldActiveTab)
}

// SetAiSilenceImprovements sets the "ai_silence_improvements" field.
func (m *ProjectMutation) SetAiSilenceImprovements(value []map[string]interface{}) {
	m.ai_silence_improvements = &value
	m.appendai_silence_improvements = nil
}

// AiSilenceImprovements returns the value of the "ai_silence_improvements" field in the mutation.
func (m *ProjectMutation) AiSilenceImprovements() (r []map[string]interface{}, exists bool) {
	v := m.ai_silence_improvements
	if v == nil {
		return
	}
	return *v, true
}

// OldAiSilenceImprovements returns the old "ai_silence_improvements" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldAiSilenceImprovements(ctx context.Context) (v []map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAiSilenceImprovements is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAiSilenceImprovements requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAiSilenceImprovements: %w", err)
	}
	return oldValue.AiSilenceImprovements, nil
}

// AppendAiSilenceImprovements adds value to the "ai_silence_improvements" field.
func (m *ProjectMutation) AppendAiSilenceImprovements(value []map[string]interface{}) {
	m.appendai_silence_improvements = append(m.appendai_silence_improvements, value...)
}

// AppendedAiSilenceImprovements returns the list of values that were appended to the "ai_silence_improvements" field in this mutation.
func (m *ProjectMutation) AppendedAiSilenceImprovements() ([]map[string]interface{}, bool) {
	if len(m.appendai_silence_improvements) == 0 {
		return nil, false
	}
	return m.appendai_silence_improvements, true
}

// ClearAiSilenceImprovements clears the value of the "ai_silence_improvements" field.
func (m *ProjectMutation) ClearAiSilenceImprovements() {
	m.ai_silence_improvements = nil
	m.appendai_silence_improvements = nil
	m.clearedFields[project.FieldAiSilenceImprovements] = struct{}{}
}

// AiSilenceImprovementsCleared returns if the "ai_silence_improvements" field was cleared in this mutation.
func (m *ProjectMutation) AiSilenceImprovementsCleared() bool {
	_, ok := m.clearedFields[project.FieldAiSilenceImprovements]
	return ok
}

// ResetAiSilenceImprovements resets all changes to the "ai_silence_improvements" field.
func (m *ProjectMutation) ResetAiSilenceImprovements() {
	m.ai_silence_improvements = nil
	m.appendai_silence_improvements = nil
	delete(m.clearedFields, project.FieldAiSilenceImprovements)
}

// SetAiSilenceModel sets the "ai_silence_model" field.
func (m *ProjectMutation) SetAiSilenceModel(s string) {
	m.ai_silence_model = &s
}

// AiSilenceModel returns the value of the "ai_silence_model" field in the mutation.
func (m *ProjectMutation) AiSilenceModel() (r string, exists bool) {
	v := m.ai_silence_model
	if v == nil {
		return
	}
	return *v, true
}

// OldAiSilenceModel returns the old "ai_silence_model" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldAiSilenceModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAiSilenceModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAiSilenceModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAiSilenceModel: %w", err)
	}
	return oldValue.AiSilenceModel, nil
}

// ClearAiSilenceModel clears the value of the "ai_silence_model" field.
func (m *ProjectMutation) ClearAiSilenceModel() {
	m.ai_silence_model = nil
	m.clearedFields[project.FieldAiSilenceModel] = struct{}{}
}

// AiSilenceModelCleared returns if the "ai_silence_model" field was cleared in this mutation.
func (m *ProjectMutation) AiSilenceModelCleared() bool {
	_, ok := m.clearedFields[project.FieldAiSilenceModel]
	return ok
}

// ResetAiSilenceModel resets all changes to the "ai_silence_model" field.
func (m *ProjectMutation) ResetAiSilenceModel() {
	m.ai_silence_model = nil
	delete(m.clearedFields, project.FieldAiSilenceModel)
}

// SetAiSilenceCreatedAt sets the "ai_silence_created_at" field.
func (m *ProjectMutation) SetAiSilenceCreatedAt(t time.Time) {
	m.ai_silence_created_at = &t
}

// AiSilenceCreatedAt returns the value of the "ai_silence_created_at" field in the mutation.
func (m *ProjectMutation) AiSilenceCreatedAt() (r time.Time, exists bool) {
	v := m.ai_silence_created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldAiSilenceCreatedAt returns the old "ai_silence_created_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldAiSilenceCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAiSilenceCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAiSilenceCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAiSilenceCreatedAt: %w", err)
	}
	return oldValue.AiSilenceCreatedAt, nil
}

// ClearAiSilenceCreatedAt clears the value of the "ai_silence_created_at" field.
func (m *ProjectMutation) ClearAiSilenceCreatedAt() {
	m.ai_silence_created_at = nil
	m.clearedFields[project.FieldAiSilenceCreatedAt] = struct{}{}
}

// AiSilenceCreatedAtCleared returns if the "ai_silence_created_at" field was cleared in this mutation.
func (m *ProjectMutation) AiSilenceCreatedAtCleared() bool {
	_, ok := m.clearedFields[project.FieldAiSilenceCreatedAt]
	return ok
}

// ResetAiSilenceCreatedAt resets all changes to the "ai_silence_created_at" field.
func (m *ProjectMutation) ResetAiSilenceCreatedAt() {
	m.ai_silence_created_at = nil
	delete(m.clearedFields, project.FieldAiSilenceCreatedAt)
}

// SetHighlightOrder sets the "highlight_order" field.
func (m *ProjectMutation) SetHighlightOrder(i []interface{}) {
	m.highlight_order = &i
	m.appendhighlight_order = nil
}

// HighlightOrder returns the value of the "highlight_order" field in the mutation.
func (m *ProjectMutation) HighlightOrder() (r []interface{}, exists bool) {
	v := m.highlight_order
	if v == nil {
		return
	}
	return *v, true
}

// OldHighlightOrder returns the old "highlight_order" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldHighlightOrder(ctx context.Context) (v []interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHighlightOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHighlightOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHighlightOrder: %w", err)
	}
	return oldValue.HighlightOrder, nil
}

// AppendHighlightOrder adds i to the "highlight_order" field.
func (m *ProjectMutation) AppendHighlightOrder(i []interface{}) {
	m.appendhighlight_order = append(m.appendhighlight_order, i...)
}

// AppendedHighlightOrder returns the list of values that were appended to the "highlight_order" field in this mutation.
func (m *ProjectMutation) AppendedHighlightOrder() ([]interface{}, bool) {
	if len(m.appendhighlight_order) == 0 {
		return nil, false
	}
	return m.appendhighlight_order, true
}

// ClearHighlightOrder clears the value of the "highlight_order" field.
func (m *ProjectMutation) ClearHighlightOrder() {
	m.highlight_order = nil
	m.appendhighlight_order = nil
	m.clearedFields[project.FieldHighlightOrder] = struct{}{}
}

// HighlightOrderCleared returns if the "highlight_order" field was cleared in this mutation.
func (m *ProjectMutation) HighlightOrderCleared() bool {
	_, ok := m.clearedFields[project.FieldHighlightOrder]
	return ok
}

// ResetHighlightOrder resets all changes to the "highlight_order" field.
func (m *ProjectMutation) ResetHighlightOrder() {
	m.highlight_order = nil
	m.appendhighlight_order = nil
	delete(m.clearedFields, project.FieldHighlightOrder)
}

// SetOrderHistory sets the "order_history" field.
func (m *ProjectMutation) SetOrderHistory(i [][]interface{}) {
	m.order_history = &i
	m.appendorder_history = nil
}

// OrderHistory returns the value of the "order_history" field in the mutation.
func (m *ProjectMutation) OrderHistory() (r [][]interface{}, exists bool) {
	v := m.order_history
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderHistory returns the old "order_history" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldOrderHistory(ctx context.Context) (v [][]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderHistory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderHistory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderHistory: %w", err)
	}
	return oldValue.OrderHistory, nil
}

// AppendOrderHistory adds i to the "order_history" field.
func (m *ProjectMutation) AppendOrderHistory(i [][]interface{}) {
	m.appendorder_history = append(m.appendorder_history, i...)
}

// AppendedOrderHistory returns the list of values that were appended to the "order_history" field in this mutation.
func (m *ProjectMutation) AppendedOrderHistory() ([][]interface{}, bool) {
	if len(m.appendorder_history) == 0 {
		return nil, false
	}
	return m.appendorder_history, true
}

// ClearOrderHistory clears the value of the "order_history" field.
func (m *ProjectMutation) ClearOrderHistory() {
	m.order_history = nil
	m.appendorder_history = nil
	m.clearedFields[project.FieldOrderHistory] = struct{}{}
}

// OrderHistoryCleared returns if the "order_history" field was cleared in this mutation.
func (m *ProjectMutation) OrderHistoryCleared() bool {
	_, ok := m.clearedFields[project.FieldOrderHistory]
	return ok
}

// ResetOrderHistory resets all changes to the "order_history" field.
func (m *ProjectMutation) ResetOrderHistory() {
	m.order_history = nil
	m.appendorder_history = nil
	delete(m.clearedFields, project.FieldOrderHistory)
}

// SetOrderHistoryIndex sets the "order_history_index" field.
func (m *ProjectMutation) SetOrderHistoryIndex(i int) {
	m.order_history_index = &i
	m.addorder_history_index = nil
}

// OrderHistoryIndex returns the value of the "order_history_index" field in the mutation.
func (m *ProjectMutation) OrderHistoryIndex() (r int, exists bool) {
	v := m.order_history_index
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderHistoryIndex returns the old "order_history_index" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldOrderHistoryIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderHistoryIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderHistoryIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderHistoryIndex: %w", err)
	}
	return oldValue.OrderHistoryIndex, nil
}

// AddOrderHistoryIndex adds i to the "order_history_index" field.
func (m *ProjectMutation) AddOrderHistoryIndex(i int) {
	if m.addorder_history_index != nil {
		*m.addorder_history_index += i
	} else {
		m.addorder_history_index = &i
	}
}

// AddedOrderHistoryIndex returns the value that was added to the "order_history_index" field in this mutation.
func (m *ProjectMutation) AddedOrderHistoryIndex() (r int, exists bool) {
	v := m.addorder_history_index
	if v == nil {
		return
	}
	return *v, true
}

// ClearOrderHistoryIndex clears the value of the "order_history_index" field.
func (m *ProjectMutation) ClearOrderHistoryIndex() {
	m.order_history_index = nil
	m.addorder_history_index = nil
	m.clearedFields[project.FieldOrderHistoryIndex] = struct{}{}
}

// OrderHistoryIndexCleared returns if the "order_history_index" field was cleared in this mutation.
func (m *ProjectMutation) OrderHistoryIndexCleared() bool {
	_, ok := m.clearedFields[project.FieldOrderHistoryIndex]
	return ok
}

// ResetOrderHistoryIndex resets all changes to the "order_history_index" field.
func (m *ProjectMutation) ResetOrderHistoryIndex() {
	m.order_history_index = nil
	m.addorder_history_index = nil
	delete(m.clearedFields, project.FieldOrderHistoryIndex)
}

// SetHiddenHighlights sets the "hidden_highlights" field.
func (m *ProjectMutation) SetHiddenHighlights(s []string) {
	m.hidden_highlights = &s
	m.appendhidden_highlights = nil
}

// HiddenHighlights returns the value of the "hidden_highlights" field in the mutation.
func (m *ProjectMutation) HiddenHighlights() (r []string, exists bool) {
	v := m.hidden_highlights
	if v == nil {
		return
	}
	return *v, true
}

// OldHiddenHighlights returns the old "hidden_highlights" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldHiddenHighlights(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHiddenHighlights is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHiddenHighlights requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHiddenHighlights: %w", err)
	}
	return oldValue.HiddenHighlights, nil
}

// AppendHiddenHighlights adds s to the "hidden_highlights" field.
func (m *ProjectMutation) AppendHiddenHighlights(s []string) {
	m.appendhidden_highlights = append(m.appendhidden_highlights, s...)
}

// AppendedHiddenHighlights returns the list of values that were appended to the "hidden_highlights" field in this mutation.
func (m *ProjectMutation) AppendedHiddenHighlights() ([]string, bool) {
	if len(m.appendhidden_highlights) == 0 {
		return nil, false
	}
	return m.appendhidden_highlights, true
}

// ClearHiddenHighlights clears the value of the "hidden_highlights" field.
func (m *ProjectMutation) ClearHiddenHighlights() {
	m.hidden_highlights = nil
	m.appendhidden_highlights = nil
	m.clearedFields[project.FieldHiddenHighlights] = struct{}{}
}

// HiddenHighlightsCleared returns if the "hidden_highlights" field was cleared in this mutation.
func (m *ProjectMutation) HiddenHighlightsCleared() bool {
	_, ok := m.clearedFields[project.FieldHiddenHighlights]
	return ok
}

// ResetHiddenHighlights resets all changes to the "hidden_highlights" field.
func (m *ProjectMutation) ResetHiddenHighlights() {
	m.hidden_highlights = nil
	m.appendhidden_highlights = nil
	delete(m.clearedFields, project.FieldHiddenHighlights)
}

// AddVideoClipIDs adds the "video_clips" edge to the VideoClip entity by ids.
func (m *ProjectMutation) AddVideoClipIDs(ids ...int) {
	if m.video_clips == nil {
		m.video_clips = make(map[int]struct{})
	}
	for i := range ids {
		m.video_clips[ids[i]] = struct{}{}
	}
}

// ClearVideoClips clears the "video_clips" edge to the VideoClip entity.
func (m *ProjectMutation) ClearVideoClips() {
	m.clearedvideo_clips = true
}

// VideoClipsCleared reports if the "video_clips" edge to the VideoClip entity was cleared.
func (m *ProjectMutation) VideoClipsCleared() bool {
	return m.clearedvideo_clips
}

// RemoveVideoClipIDs removes the "video_clips" edge to the VideoClip entity by IDs.
func (m *ProjectMutation) RemoveVideoClipIDs(ids ...int) {
	if m.removedvideo_clips == nil {
		m.removedvideo_clips = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.video_clips, ids[i])
		m.removedvideo_clips[ids[i]] = struct{}{}
	}
}

// RemovedVideoClips returns the removed IDs of the "video_clips" edge to the VideoClip entity.
func (m *ProjectMutation) RemovedVideoClipsIDs() (ids []int) {
	for id := range m.removedvideo_clips {
		ids = append(ids, id)
	}
	return
}

// VideoClipsIDs returns the "video_clips" edge IDs in the mutation.
func (m *ProjectMutation) VideoClipsIDs() (ids []int) {
	for id := range m.video_clips {
		ids = append(ids, id)
	}
	return
}

// ResetVideoClips resets all changes to the "video_clips" edge.
func (m *ProjectMutation) ResetVideoClips() {
	m.video_clips = nil
	m.clearedvideo_clips = false
	m.removedvideo_clips = nil
}

// AddExportJobIDs adds the "export_jobs" edge to the ExportJob entity by ids.
func (m *ProjectMutation) AddExportJobIDs(ids ...int) {
	if m.export_jobs == nil {
		m.export_jobs = make(map[int]struct{})
	}
	for i := range ids {
		m.export_jobs[ids[i]] = struct{}{}
	}
}

// ClearExportJobs clears the "export_jobs" edge to the ExportJob entity.
func (m *ProjectMutation) ClearExportJobs() {
	m.clearedexport_jobs = true
}

// ExportJobsCleared reports if the "export_jobs" edge to the ExportJob entity was cleared.
func (m *ProjectMutation) ExportJobsCleared() bool {
	return m.clearedexport_jobs
}

// RemoveExportJobIDs removes the "export_jobs" edge to the ExportJob entity by IDs.
func (m *ProjectMutation) RemoveExportJobIDs(ids ...int) {
	if m.removedexport_jobs == nil {
		m.removedexport_jobs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.export_jobs, ids[i])
		m.removedexport_jobs[ids[i]] = struct{}{}
	}
}

// RemovedExportJobs returns the removed IDs of the "export_jobs" edge to the ExportJob entity.
func (m *ProjectMutation) RemovedExportJobsIDs() (ids []int) {
	for id := range m.removedexport_jobs {
		ids = append(ids, id)
	}
	return
}

// ExportJobsIDs returns the "export_jobs" edge IDs in the mutation.
func (m *ProjectMutation) ExportJobsIDs() (ids []int) {
	for id := range m.export_jobs {
		ids = append(ids, id)
	}
	return
}

// ResetExportJobs resets all changes to the "export_jobs" edge.
func (m *ProjectMutation) ResetExportJobs() {
	m.export_jobs = nil
	m.clearedexport_jobs = false
	m.removedexport_jobs = nil
}

// AddChatSessionIDs adds the "chat_sessions" edge to the ChatSession entity by ids.
func (m *ProjectMutation) AddChatSessionIDs(ids ...int) {
	if m.chat_sessions == nil {
		m.chat_sessions = make(map[int]struct{})
	}
	for i := range ids {
		m.chat_sessions[ids[i]] = struct{}{}
	}
}

// ClearChatSessions clears the "chat_sessions" edge to the ChatSession entity.
func (m *ProjectMutation) ClearChatSessions() {
	m.clearedchat_sessions = true
}

// ChatSessionsCleared reports if the "chat_sessions" edge to the ChatSession entity was cleared.
func (m *ProjectMutation) ChatSessionsCleared() bool {
	return m.clearedchat_sessions
}

// RemoveChatSessionIDs removes the "chat_sessions" edge to the ChatSession entity by IDs.
func (m *ProjectMutation) RemoveChatSessionIDs(ids ...int) {
	if m.removedchat_sessions == nil {
		m.removedchat_sessions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.chat_sessions, ids[i])
		m.removedchat_sessions[ids[i]] = struct{}{}
	}
}

// RemovedChatSessions returns the removed IDs of the "chat_sessions" edge to the ChatSession entity.
func (m *ProjectMutation) RemovedChatSessionsIDs() (ids []int) {
	for id := range m.removedchat_sessions {
		ids = append(ids, id)
	}
	return
}

// ChatSessionsIDs returns the "chat_sessions" edge IDs in the mutation.
func (m *ProjectMutation) ChatSessionsIDs() (ids []int) {
	for id := range m.chat_sessions {
		ids = append(ids, id)
	}
	return
}

// ResetChatSessions resets all changes to the "chat_sessions" edge.
func (m *ProjectMutation) ResetChatSessions() {
	m.chat_sessions = nil
	m.clearedchat_sessions = false
	m.removedchat_sessions = nil
}

// Where appends a list predicates to the ProjectMutation builder.
func (m *ProjectMutation) Where(ps ...predicate.Project) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Project, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Project).
func (m *ProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.name != nil {
		fields = append(fields, project.FieldName)
	}
	if m.description != nil {
		fields = append(fields, project.FieldDescription)
	}
	if m._path != nil {
		fields = append(fields, project.FieldPath)
	}
	if m.created_at != nil {
		fields = append(fields, project.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, project.FieldUpdatedAt)
	}
	if m.ai_model != nil {
		fields = append(fields, project.FieldAiModel)
	}
	if m.ai_prompt != nil {
		fields = append(fields, project.FieldAiPrompt)
	}
	if m.ai_suggestion_order != nil {
		fields = append(fields, project.FieldAiSuggestionOrder)
	}
	if m.ai_suggestion_model != nil {
		fields = append(fields, project.FieldAiSuggestionModel)
	}
	if m.ai_suggestion_created_at != nil {
		fields = append(fields, project.FieldAiSuggestionCreatedAt)
	}
	if m.ai_highlight_model != nil {
		fields = append(fields, project.FieldAiHighlightModel)
	}
	if m.ai_highlight_prompt != nil {
		fields = append(fields, project.FieldAiHighlightPrompt)
	}
	if m.active_tab != nil {
		fields = append(fields, project.FieldActiveTab)
	}
	if m.ai_silence_improvements != nil {
		fields = append(fields, project.FieldAiSilenceImprovements)
	}
	if m.ai_silence_model != nil {
		fields = append(fields, project.FieldAiSilenceModel)
	}
	if m.ai_silence_created_at != nil {
		fields = append(fields, project.FieldAiSilenceCreatedAt)
	}
	if m.highlight_order != nil {
		fields = append(fields, project.FieldHighlightOrder)
	}
	if m.order_history != nil {
		fields = append(fields, project.FieldOrderHistory)
	}
	if m.order_history_index != nil {
		fields = append(fields, project.FieldOrderHistoryIndex)
	}
	if m.hidden_highlights != nil {
		fields = append(fields, project.FieldHiddenHighlights)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case project.FieldName:
		return m.Name()
	case project.FieldDescription:
		return m.Description()
	case project.FieldPath:
		return m.Path()
	case project.FieldCreatedAt:
		return m.CreatedAt()
	case project.FieldUpdatedAt:
		return m.UpdatedAt()
	case project.FieldAiModel:
		return m.AiModel()
	case project.FieldAiPrompt:
		return m.AiPrompt()
	case project.FieldAiSuggestionOrder:
		return m.AiSuggestionOrder()
	case project.FieldAiSuggestionModel:
		return m.AiSuggestionModel()
	case project.FieldAiSuggestionCreatedAt:
		return m.AiSuggestionCreatedAt()
	case project.FieldAiHighlightModel:
		return m.AiHighlightModel()
	case project.FieldAiHighlightPrompt:
		return m.AiHighlightPrompt()
	case project.FieldActiveTab:
		return m.ActiveTab()
	case project.FieldAiSilenceImprovements:
		return m.AiSilenceImprovements()
	case project.FieldAiSilenceModel:
		return m.AiSilenceModel()
	case project.FieldAiSilenceCreatedAt:
		return m.AiSilenceCreatedAt()
	case project.FieldHighlightOrder:
		return m.HighlightOrder()
	case project.FieldOrderHistory:
		return m.OrderHistory()
	case project.FieldOrderHistoryIndex:
		return m.OrderHistoryIndex()
	case project.FieldHiddenHighlights:
		return m.HiddenHighlights()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case project.FieldName:
		return m.OldName(ctx)
	case project.FieldDescription:
		return m.OldDescription(ctx)
	case project.FieldPath:
		return m.OldPath(ctx)
	case project.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case project.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case project.FieldAiModel:
		return m.OldAiModel(ctx)
	case project.FieldAiPrompt:
		return m.OldAiPrompt(ctx)
	case project.FieldAiSuggestionOrder:
		return m.OldAiSuggestionOrder(ctx)
	case project.FieldAiSuggestionModel:
		return m.OldAiSuggestionModel(ctx)
	case project.FieldAiSuggestionCreatedAt:
		return m.OldAiSuggestionCreatedAt(ctx)
	case project.FieldAiHighlightModel:
		return m.OldAiHighlightModel(ctx)
	case project.FieldAiHighlightPrompt:
		return m.OldAiHighlightPrompt(ctx)
	case project.FieldActiveTab:
		return m.OldActiveTab(ctx)
	case project.FieldAiSilenceImprovements:
		return m.OldAiSilenceImprovements(ctx)
	case project.FieldAiSilenceModel:
		return m.OldAiSilenceModel(ctx)
	case project.FieldAiSilenceCreatedAt:
		return m.OldAiSilenceCreatedAt(ctx)
	case project.FieldHighlightOrder:
		return m.OldHighlightOrder(ctx)
	case project.FieldOrderHistory:
		return m.OldOrderHistory(ctx)
	case project.FieldOrderHistoryIndex:
		return m.OldOrderHistoryIndex(ctx)
	case project.FieldHiddenHighlights:
		return m.OldHiddenHighlights(ctx)
	}
	return nil, fmt.Errorf("unknown Project field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case project.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case project.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case project.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case project.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case project.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case project.FieldAiModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAiModel(v)
		return nil
	case project.FieldAiPrompt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAiPrompt(v)
		return nil
	case project.FieldAiSuggestionOrder:
		v, ok := value.([]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAiSuggestionOrder(v)
		return nil
	case project.FieldAiSuggestionModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAiSuggestionModel(v)
		return nil
	case project.FieldAiSuggestionCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAiSuggestionCreatedAt(v)
		return nil
	case project.FieldAiHighlightModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAiHighlightModel(v)
		return nil
	case project.FieldAiHighlightPrompt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAiHighlightPrompt(v)
		return nil
	case project.FieldActiveTab:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActiveTab(v)
		return nil
	case project.FieldAiSilenceImprovements:
		v, ok := value.([]map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAiSilenceImprovements(v)
		return nil
	case project.FieldAiSilenceModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAiSilenceModel(v)
		return nil
	case project.FieldAiSilenceCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAiSilenceCreatedAt(v)
		return nil
	case project.FieldHighlightOrder:
		v, ok := value.([]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHighlightOrder(v)
		return nil
	case project.FieldOrderHistory:
		v, ok := value.([][]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderHistory(v)
		return nil
	case project.FieldOrderHistoryIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderHistoryIndex(v)
		return nil
	case project.FieldHiddenHighlights:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHiddenHighlights(v)
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectMutation) AddedFields() []string {
	var fields []string
	if m.addorder_history_index != nil {
		fields = append(fields, project.FieldOrderHistoryIndex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case project.FieldOrderHistoryIndex:
		return m.AddedOrderHistoryIndex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	case project.FieldOrderHistoryIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderHistoryIndex(v)
		return nil
	}
	return fmt.Errorf("unknown Project numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(project.FieldDescription) {
		fields = append(fields, project.FieldDescription)
	}
	if m.FieldCleared(project.FieldAiModel) {
		fields = append(fields, project.FieldAiModel)
	}
	if m.FieldCleared(project.FieldAiPrompt) {
		fields = append(fields, project.FieldAiPrompt)
	}
	if m.FieldCleared(project.FieldAiSuggestionOrder) {
		fields = append(fields, project.FieldAiSuggestionOrder)
	}
	if m.FieldCleared(project.FieldAiSuggestionModel) {
		fields = append(fields, project.FieldAiSuggestionModel)
	}
	if m.FieldCleared(project.FieldAiSuggestionCreatedAt) {
		fields = append(fields, project.FieldAiSuggestionCreatedAt)
	}
	if m.FieldCleared(project.FieldAiHighlightModel) {
		fields = append(fields, project.FieldAiHighlightModel)
	}
	if m.FieldCleared(project.FieldAiHighlightPrompt) {
		fields = append(fields, project.FieldAiHighlightPrompt)
	}
	if m.FieldCleared(project.FieldActiveTab) {
		fields = append(fields, project.FieldActiveTab)
	}
	if m.FieldCleared(project.FieldAiSilenceImprovements) {
		fields = append(fields, project.FieldAiSilenceImprovements)
	}
	if m.FieldCleared(project.FieldAiSilenceModel) {
		fields = append(fields, project.FieldAiSilenceModel)
	}
	if m.FieldCleared(project.FieldAiSilenceCreatedAt) {
		fields = append(fields, project.FieldAiSilenceCreatedAt)
	}
	if m.FieldCleared(project.FieldHighlightOrder) {
		fields = append(fields, project.FieldHighlightOrder)
	}
	if m.FieldCleared(project.FieldOrderHistory) {
		fields = append(fields, project.FieldOrderHistory)
	}
	if m.FieldCleared(project.FieldOrderHistoryIndex) {
		fields = append(fields, project.FieldOrderHistoryIndex)
	}
	if m.FieldCleared(project.FieldHiddenHighlights) {
		fields = append(fields, project.FieldHiddenHighlights)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMutation) ClearField(name string) error {
	switch name {
	case project.FieldDescription:
		m.ClearDescription()
		return nil
	case project.FieldAiModel:
		m.ClearAiModel()
		return nil
	case project.FieldAiPrompt:
		m.ClearAiPrompt()
		return nil
	case project.FieldAiSuggestionOrder:
		m.ClearAiSuggestionOrder()
		return nil
	case project.FieldAiSuggestionModel:
		m.ClearAiSuggestionModel()
		return nil
	case project.FieldAiSuggestionCreatedAt:
		m.ClearAiSuggestionCreatedAt()
		return nil
	case project.FieldAiHighlightModel:
		m.ClearAiHighlightModel()
		return nil
	case project.FieldAiHighlightPrompt:
		m.ClearAiHighlightPrompt()
		return nil
	case project.FieldActiveTab:
		m.ClearActiveTab()
		return nil
	case project.FieldAiSilenceImprovements:
		m.ClearAiSilenceImprovements()
		return nil
	case project.FieldAiSilenceModel:
		m.ClearAiSilenceModel()
		return nil
	case project.FieldAiSilenceCreatedAt:
		m.ClearAiSilenceCreatedAt()
		return nil
	case project.FieldHighlightOrder:
		m.ClearHighlightOrder()
		return nil
	case project.FieldOrderHistory:
		m.ClearOrderHistory()
		return nil
	case project.FieldOrderHistoryIndex:
		m.ClearOrderHistoryIndex()
		return nil
	case project.FieldHiddenHighlights:
		m.ClearHiddenHighlights()
		return nil
	}
	return fmt.Errorf("unknown Project nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectMutation) ResetField(name string) error {
	switch name {
	case project.FieldName:
		m.ResetName()
		return nil
	case project.FieldDescription:
		m.ResetDescription()
		return nil
	case project.FieldPath:
		m.ResetPath()
		return nil
	case project.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case project.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case project.FieldAiModel:
		m.ResetAiModel()
		return nil
	case project.FieldAiPrompt:
		m.ResetAiPrompt()
		return nil
	case project.FieldAiSuggestionOrder:
		m.ResetAiSuggestionOrder()
		return nil
	case project.FieldAiSuggestionModel:
		m.ResetAiSuggestionModel()
		return nil
	case project.FieldAiSuggestionCreatedAt:
		m.ResetAiSuggestionCreatedAt()
		return nil
	case project.FieldAiHighlightModel:
		m.ResetAiHighlightModel()
		return nil
	case project.FieldAiHighlightPrompt:
		m.ResetAiHighlightPrompt()
		return nil
	case project.FieldActiveTab:
		m.ResetActiveTab()
		return nil
	case project.FieldAiSilenceImprovements:
		m.ResetAiSilenceImprovements()
		return nil
	case project.FieldAiSilenceModel:
		m.ResetAiSilenceModel()
		return nil
	case project.FieldAiSilenceCreatedAt:
		m.ResetAiSilenceCreatedAt()
		return nil
	case project.FieldHighlightOrder:
		m.ResetHighlightOrder()
		return nil
	case project.FieldOrderHistory:
		m.ResetOrderHistory()
		return nil
	case project.FieldOrderHistoryIndex:
		m.ResetOrderHistoryIndex()
		return nil
	case project.FieldHiddenHighlights:
		m.ResetHiddenHighlights()
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.video_clips != nil {
		edges = append(edges, project.EdgeVideoClips)
	}
	if m.export_jobs != nil {
		edges = append(edges, project.EdgeExportJobs)
	}
	if m.chat_sessions != nil {
		edges = append(edges, project.EdgeChatSessions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeVideoClips:
		ids := make([]ent.Value, 0, len(m.video_clips))
		for id := range m.video_clips {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeExportJobs:
		ids := make([]ent.Value, 0, len(m.export_jobs))
		for id := range m.export_jobs {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeChatSessions:
		ids := make([]ent.Value, 0, len(m.chat_sessions))
		for id := range m.chat_sessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedvideo_clips != nil {
		edges = append(edges, project.EdgeVideoClips)
	}
	if m.removedexport_jobs != nil {
		edges = append(edges, project.EdgeExportJobs)
	}
	if m.removedchat_sessions != nil {
		edges = append(edges, project.EdgeChatSessions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeVideoClips:
		ids := make([]ent.Value, 0, len(m.removedvideo_clips))
		for id := range m.removedvideo_clips {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeExportJobs:
		ids := make([]ent.Value, 0, len(m.removedexport_jobs))
		for id := range m.removedexport_jobs {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeChatSessions:
		ids := make([]ent.Value, 0, len(m.removedchat_sessions))
		for id := range m.removedchat_sessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedvideo_clips {
		edges = append(edges, project.EdgeVideoClips)
	}
	if m.clearedexport_jobs {
		edges = append(edges, project.EdgeExportJobs)
	}
	if m.clearedchat_sessions {
		edges = append(edges, project.EdgeChatSessions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case project.EdgeVideoClips:
		return m.clearedvideo_clips
	case project.EdgeExportJobs:
		return m.clearedexport_jobs
	case project.EdgeChatSessions:
		return m.clearedchat_sessions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Project unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectMutation) ResetEdge(name string) error {
	switch name {
	case project.EdgeVideoClips:
		m.ResetVideoClips()
		return nil
	case project.EdgeExportJobs:
		m.ResetExportJobs()
		return nil
	case project.EdgeChatSessions:
		m.ResetChatSessions()
		return nil
	}
	return fmt.Errorf("unknown Project edge %s", name)
}

// SettingsMutation represents an operation that mutates the Settings nodes in the graph.
type SettingsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	key           *string
	value         *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Settings, error)
	predicates    []predicate.Settings
}

var _ ent.Mutation = (*SettingsMutation)(nil)

// settingsOption allows management of the mutation configuration using functional options.
type settingsOption func(*SettingsMutation)

// newSettingsMutation creates new mutation for the Settings entity.
func newSettingsMutation(c config, op Op, opts ...settingsOption) *SettingsMutation {
	m := &SettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSettingsID sets the ID field of the mutation.
func withSettingsID(id int) settingsOption {
	return func(m *SettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *Settings
		)
		m.oldValue = func(ctx context.Context) (*Settings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Settings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSettings sets the old Settings of the mutation.
func withSettings(node *Settings) settingsOption {
	return func(m *SettingsMutation) {
		m.oldValue = func(context.Context) (*Settings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SettingsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SettingsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Settings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKey sets the "key" field.
func (m *SettingsMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *SettingsMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *SettingsMutation) ResetKey() {
	m.key = nil
}

// SetValue sets the "value" field.
func (m *SettingsMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *SettingsMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ClearValue clears the value of the "value" field.
func (m *SettingsMutation) ClearValue() {
	m.value = nil
	m.clearedFields[settings.FieldValue] = struct{}{}
}

// ValueCleared returns if the "value" field was cleared in this mutation.
func (m *SettingsMutation) ValueCleared() bool {
	_, ok := m.clearedFields[settings.FieldValue]
	return ok
}

// ResetValue resets all changes to the "value" field.
func (m *SettingsMutation) ResetValue() {
	m.value = nil
	delete(m.clearedFields, settings.FieldValue)
}

// SetCreatedAt sets the "created_at" field.
func (m *SettingsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SettingsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SettingsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SettingsMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SettingsMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SettingsMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the SettingsMutation builder.
func (m *SettingsMutation) Where(ps ...predicate.Settings) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SettingsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SettingsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Settings, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SettingsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SettingsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Settings).
func (m *SettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SettingsMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.key != nil {
		fields = append(fields, settings.FieldKey)
	}
	if m.value != nil {
		fields = append(fields, settings.FieldValue)
	}
	if m.created_at != nil {
		fields = append(fields, settings.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, settings.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case settings.FieldKey:
		return m.Key()
	case settings.FieldValue:
		return m.Value()
	case settings.FieldCreatedAt:
		return m.CreatedAt()
	case settings.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case settings.FieldKey:
		return m.OldKey(ctx)
	case settings.FieldValue:
		return m.OldValue(ctx)
	case settings.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case settings.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Settings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case settings.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case settings.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case settings.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case settings.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Settings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SettingsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SettingsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Settings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SettingsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(settings.FieldValue) {
		fields = append(fields, settings.FieldValue)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SettingsMutation) ClearField(name string) error {
	switch name {
	case settings.FieldValue:
		m.ClearValue()
		return nil
	}
	return fmt.Errorf("unknown Settings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SettingsMutation) ResetField(name string) error {
	switch name {
	case settings.FieldKey:
		m.ResetKey()
		return nil
	case settings.FieldValue:
		m.ResetValue()
		return nil
	case settings.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case settings.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Settings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SettingsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SettingsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SettingsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SettingsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Settings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SettingsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Settings edge %s", name)
}

// VideoClipMutation represents an operation that mutates the VideoClip nodes in the graph.
type VideoClipMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	name                        *string
	description                 *string
	file_path                   *string
	duration                    *float64
	addduration                 *float64
	format                      *string
	width                       *int
	addwidth                    *int
	height                      *int
	addheight                   *int
	file_size                   *int64
	addfile_size                *int64
	transcription               *string
	transcription_words         *[]schema.Word
	appendtranscription_words   []schema.Word
	transcription_language      *string
	transcription_duration      *float64
	addtranscription_duration   *float64
	highlights                  *[]schema.Highlight
	appendhighlights            []schema.Highlight
	suggested_highlights        *[]schema.Highlight
	appendsuggested_highlights  []schema.Highlight
	created_at                  *time.Time
	updated_at                  *time.Time
	highlights_history          *[][]schema.Highlight
	appendhighlights_history    [][]schema.Highlight
	highlights_history_index    *int
	addhighlights_history_index *int
	transcription_state         *string
	transcription_error         *string
	transcription_started_at    *time.Time
	transcription_completed_at  *time.Time
	clearedFields               map[string]struct{}
	project                     *int
	clearedproject              bool
	done                        bool
	oldValue                    func(context.Context) (*VideoClip, error)
	predicates                  []predicate.VideoClip
}

var _ ent.Mutation = (*VideoClipMutation)(nil)

// videoclipOption allows management of the mutation configuration using functional options.
type videoclipOption func(*VideoClipMutation)

// newVideoClipMutation creates new mutation for the VideoClip entity.
func newVideoClipMutation(c config, op Op, opts ...videoclipOption) *VideoClipMutation {
	m := &VideoClipMutation{
		config:        c,
		op:            op,
		typ:           TypeVideoClip,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVideoClipID sets the ID field of the mutation.
func withVideoClipID(id int) videoclipOption {
	return func(m *VideoClipMutation) {
		var (
			err   error
			once  sync.Once
			value *VideoClip
		)
		m.oldValue = func(ctx context.Context) (*VideoClip, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VideoClip.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVideoClip sets the old VideoClip of the mutation.
func withVideoClip(node *VideoClip) videoclipOption {
	return func(m *VideoClipMutation) {
		m.oldValue = func(context.Context) (*VideoClip, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VideoClipMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VideoClipMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VideoClipMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VideoClipMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VideoClip.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *VideoClipMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *VideoClipMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *VideoClipMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *VideoClipMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *VideoClipMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *VideoClipMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[videoclip.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *VideoClipMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *VideoClipMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, videoclip.FieldDescription)
}

// SetFilePath sets the "file_path" field.
func (m *VideoClipMutation) SetFilePath(s string) {
	m.file_path = &s
}

// FilePath returns the value of the "file_path" field in the mutation.
func (m *VideoClipMutation) FilePath() (r string, exists bool) {
	v := m.file_path
	if v == nil {
		return
	}
	return *v, true
}

// OldFilePath returns the old "file_path" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldFilePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilePath: %w", err)
	}
	return oldValue.FilePath, nil
}

// ResetFilePath resets all changes to the "file_path" field.
func (m *VideoClipMutation) ResetFilePath() {
	m.file_path = nil
}

// SetDuration sets the "duration" field.
func (m *VideoClipMutation) SetDuration(f float64) {
	m.duration = &f
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *VideoClipMutation) Duration() (r float64, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldDuration(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds f to the "duration" field.
func (m *VideoClipMutation) AddDuration(f float64) {
	if m.addduration != nil {
		*m.addduration += f
	} else {
		m.addduration = &f
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *VideoClipMutation) AddedDuration() (r float64, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ClearDuration clears the value of the "duration" field.
func (m *VideoClipMutation) ClearDuration() {
	m.duration = nil
	m.addduration = nil
	m.clearedFields[videoclip.FieldDuration] = struct{}{}
}

// DurationCleared returns if the "duration" field was cleared in this mutation.
func (m *VideoClipMutation) DurationCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldDuration]
	return ok
}

// ResetDuration resets all changes to the "duration" field.
func (m *VideoClipMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
	delete(m.clearedFields, videoclip.FieldDuration)
}

// SetFormat sets the "format" field.
func (m *VideoClipMutation) SetFormat(s string) {
	m.format = &s
}

// Format returns the value of the "format" field in the mutation.
func (m *VideoClipMutation) Format() (r string, exists bool) {
	v := m.format
	if v == nil {
		return
	}
	return *v, true
}

// OldFormat returns the old "format" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldFormat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormat: %w", err)
	}
	return oldValue.Format, nil
}

// ClearFormat clears the value of the "format" field.
func (m *VideoClipMutation) ClearFormat() {
	m.format = nil
	m.clearedFields[videoclip.FieldFormat] = struct{}{}
}

// FormatCleared returns if the "format" field was cleared in this mutation.
func (m *VideoClipMutation) FormatCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldFormat]
	return ok
}

// ResetFormat resets all changes to the "format" field.
func (m *VideoClipMutation) ResetFormat() {
	m.format = nil
	delete(m.clearedFields, videoclip.FieldFormat)
}

// SetWidth sets the "width" field.
func (m *VideoClipMutation) SetWidth(i int) {
	m.width = &i
	m.addwidth = nil
}

// Width returns the value of the "width" field in the mutation.
func (m *VideoClipMutation) Width() (r int, exists bool) {
	v := m.width
	if v == nil {
		return
	}
	return *v, true
}

// OldWidth returns the old "width" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldWidth(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWidth: %w", err)
	}
	return oldValue.Width, nil
}

// AddWidth adds i to the "width" field.
func (m *VideoClipMutation) AddWidth(i int) {
	if m.addwidth != nil {
		*m.addwidth += i
	} else {
		m.addwidth = &i
	}
}

// AddedWidth returns the value that was added to the "width" field in this mutation.
func (m *VideoClipMutation) AddedWidth() (r int, exists bool) {
	v := m.addwidth
	if v == nil {
		return
	}
	return *v, true
}

// ClearWidth clears the value of the "width" field.
func (m *VideoClipMutation) ClearWidth() {
	m.width = nil
	m.addwidth = nil
	m.clearedFields[videoclip.FieldWidth] = struct{}{}
}

// WidthCleared returns if the "width" field was cleared in this mutation.
func (m *VideoClipMutation) WidthCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldWidth]
	return ok
}

// ResetWidth resets all changes to the "width" field.
func (m *VideoClipMutation) ResetWidth() {
	m.width = nil
	m.addwidth = nil
	delete(m.clearedFields, videoclip.FieldWidth)
}

// SetHeight sets the "height" field.
func (m *VideoClipMutation) SetHeight(i int) {
	m.height = &i
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *VideoClipMutation) Height() (r int, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldHeight(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds i to the "height" field.
func (m *VideoClipMutation) AddHeight(i int) {
	if m.addheight != nil {
		*m.addheight += i
	} else {
		m.addheight = &i
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *VideoClipMutation) AddedHeight() (r int, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ClearHeight clears the value of the "height" field.
func (m *VideoClipMutation) ClearHeight() {
	m.height = nil
	m.addheight = nil
	m.clearedFields[videoclip.FieldHeight] = struct{}{}
}

// HeightCleared returns if the "height" field was cleared in this mutation.
func (m *VideoClipMutation) HeightCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldHeight]
	return ok
}

// ResetHeight resets all changes to the "height" field.
func (m *VideoClipMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
	delete(m.clearedFields, videoclip.FieldHeight)
}

// SetFileSize sets the "file_size" field.
func (m *VideoClipMutation) SetFileSize(i int64) {
	m.file_size = &i
	m.addfile_size = nil
}

// FileSize returns the value of the "file_size" field in the mutation.
func (m *VideoClipMutation) FileSize() (r int64, exists bool) {
	v := m.file_size
	if v == nil {
		return
	}
	return *v, true
}

// OldFileSize returns the old "file_size" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldFileSize(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileSize: %w", err)
	}
	return oldValue.FileSize, nil
}

// AddFileSize adds i to the "file_size" field.
func (m *VideoClipMutation) AddFileSize(i int64) {
	if m.addfile_size != nil {
		*m.addfile_size += i
	} else {
		m.addfile_size = &i
	}
}

// AddedFileSize returns the value that was added to the "file_size" field in this mutation.
func (m *VideoClipMutation) AddedFileSize() (r int64, exists bool) {
	v := m.addfile_size
	if v == nil {
		return
	}
	return *v, true
}

// ClearFileSize clears the value of the "file_size" field.
func (m *VideoClipMutation) ClearFileSize() {
	m.file_size = nil
	m.addfile_size = nil
	m.clearedFields[videoclip.FieldFileSize] = struct{}{}
}

// FileSizeCleared returns if the "file_size" field was cleared in this mutation.
func (m *VideoClipMutation) FileSizeCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldFileSize]
	return ok
}

// ResetFileSize resets all changes to the "file_size" field.
func (m *VideoClipMutation) ResetFileSize() {
	m.file_size = nil
	m.addfile_size = nil
	delete(m.clearedFields, videoclip.FieldFileSize)
}

// SetTranscription sets the "transcription" field.
func (m *VideoClipMutation) SetTranscription(s string) {
	m.transcription = &s
}

// Transcription returns the value of the "transcription" field in the mutation.
func (m *VideoClipMutation) Transcription() (r string, exists bool) {
	v := m.transcription
	if v == nil {
		return
	}
	return *v, true
}

// OldTranscription returns the old "transcription" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldTranscription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTranscription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTranscription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTranscription: %w", err)
	}
	return oldValue.Transcription, nil
}

// ClearTranscription clears the value of the "transcription" field.
func (m *VideoClipMutation) ClearTranscription() {
	m.transcription = nil
	m.clearedFields[videoclip.FieldTranscription] = struct{}{}
}

// TranscriptionCleared returns if the "transcription" field was cleared in this mutation.
func (m *VideoClipMutation) TranscriptionCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldTranscription]
	return ok
}

// ResetTranscription resets all changes to the "transcription" field.
func (m *VideoClipMutation) ResetTranscription() {
	m.transcription = nil
	delete(m.clearedFields, videoclip.FieldTranscription)
}

// SetTranscriptionWords sets the "transcription_words" field.
func (m *VideoClipMutation) SetTranscriptionWords(s []schema.Word) {
	m.transcription_words = &s
	m.appendtranscription_words = nil
}

// TranscriptionWords returns the value of the "transcription_words" field in the mutation.
func (m *VideoClipMutation) TranscriptionWords() (r []schema.Word, exists bool) {
	v := m.transcription_words
	if v == nil {
		return
	}
	return *v, true
}

// OldTranscriptionWords returns the old "transcription_words" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldTranscriptionWords(ctx context.Context) (v []schema.Word, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTranscriptionWords is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTranscriptionWords requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTranscriptionWords: %w", err)
	}
	return oldValue.TranscriptionWords, nil
}

// AppendTranscriptionWords adds s to the "transcription_words" field.
func (m *VideoClipMutation) AppendTranscriptionWords(s []schema.Word) {
	m.appendtranscription_words = append(m.appendtranscription_words, s...)
}

// AppendedTranscriptionWords returns the list of values that were appended to the "transcription_words" field in this mutation.
func (m *VideoClipMutation) AppendedTranscriptionWords() ([]schema.Word, bool) {
	if len(m.appendtranscription_words) == 0 {
		return nil, false
	}
	return m.appendtranscription_words, true
}

// ClearTranscriptionWords clears the value of the "transcription_words" field.
func (m *VideoClipMutation) ClearTranscriptionWords() {
	m.transcription_words = nil
	m.appendtranscription_words = nil
	m.clearedFields[videoclip.FieldTranscriptionWords] = struct{}{}
}

// TranscriptionWordsCleared returns if the "transcription_words" field was cleared in this mutation.
func (m *VideoClipMutation) TranscriptionWordsCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldTranscriptionWords]
	return ok
}

// ResetTranscriptionWords resets all changes to the "transcription_words" field.
func (m *VideoClipMutation) ResetTranscriptionWords() {
	m.transcription_words = nil
	m.appendtranscription_words = nil
	delete(m.clearedFields, videoclip.FieldTranscriptionWords)
}

// SetTranscriptionLanguage sets the "transcription_language" field.
func (m *VideoClipMutation) SetTranscriptionLanguage(s string) {
	m.transcription_language = &s
}

// TranscriptionLanguage returns the value of the "transcription_language" field in the mutation.
func (m *VideoClipMutation) TranscriptionLanguage() (r string, exists bool) {
	v := m.transcription_language
	if v == nil {
		return
	}
	return *v, true
}

// OldTranscriptionLanguage returns the old "transcription_language" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldTranscriptionLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTranscriptionLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTranscriptionLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTranscriptionLanguage: %w", err)
	}
	return oldValue.TranscriptionLanguage, nil
}

// ClearTranscriptionLanguage clears the value of the "transcription_language" field.
func (m *VideoClipMutation) ClearTranscriptionLanguage() {
	m.transcription_language = nil
	m.clearedFields[videoclip.FieldTranscriptionLanguage] = struct{}{}
}

// TranscriptionLanguageCleared returns if the "transcription_language" field was cleared in this mutation.
func (m *VideoClipMutation) TranscriptionLanguageCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldTranscriptionLanguage]
	return ok
}

// ResetTranscriptionLanguage resets all changes to the "transcription_language" field.
func (m *VideoClipMutation) ResetTranscriptionLanguage() {
	m.transcription_language = nil
	delete(m.clearedFields, videoclip.FieldTranscriptionLanguage)
}

// SetTranscriptionDuration sets the "transcription_duration" field.
func (m *VideoClipMutation) SetTranscriptionDuration(f float64) {
	m.transcription_duration = &f
	m.addtranscription_duration = nil
}

// TranscriptionDuration returns the value of the "transcription_duration" field in the mutation.
func (m *VideoClipMutation) TranscriptionDuration() (r float64, exists bool) {
	v := m.transcription_duration
	if v == nil {
		return
	}
	return *v, true
}

// OldTranscriptionDuration returns the old "transcription_duration" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldTranscriptionDuration(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTranscriptionDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTranscriptionDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTranscriptionDuration: %w", err)
	}
	return oldValue.TranscriptionDuration, nil
}

// AddTranscriptionDuration adds f to the "transcription_duration" field.
func (m *VideoClipMutation) AddTranscriptionDuration(f float64) {
	if m.addtranscription_duration != nil {
		*m.addtranscription_duration += f
	} else {
		m.addtranscription_duration = &f
	}
}

// AddedTranscriptionDuration returns the value that was added to the "transcription_duration" field in this mutation.
func (m *VideoClipMutation) AddedTranscriptionDuration() (r float64, exists bool) {
	v := m.addtranscription_duration
	if v == nil {
		return
	}
	return *v, true
}

// ClearTranscriptionDuration clears the value of the "transcription_duration" field.
func (m *VideoClipMutation) ClearTranscriptionDuration() {
	m.transcription_duration = nil
	m.addtranscription_duration = nil
	m.clearedFields[videoclip.FieldTranscriptionDuration] = struct{}{}
}

// TranscriptionDurationCleared returns if the "transcription_duration" field was cleared in this mutation.
func (m *VideoClipMutation) TranscriptionDurationCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldTranscriptionDuration]
	return ok
}

// ResetTranscriptionDuration resets all changes to the "transcription_duration" field.
func (m *VideoClipMutation) ResetTranscriptionDuration() {
	m.transcription_duration = nil
	m.addtranscription_duration = nil
	delete(m.clearedFields, videoclip.FieldTranscriptionDuration)
}

// SetHighlights sets the "highlights" field.
func (m *VideoClipMutation) SetHighlights(s []schema.Highlight) {
	m.highlights = &s
	m.appendhighlights = nil
}

// Highlights returns the value of the "highlights" field in the mutation.
func (m *VideoClipMutation) Highlights() (r []schema.Highlight, exists bool) {
	v := m.highlights
	if v == nil {
		return
	}
	return *v, true
}

// OldHighlights returns the old "highlights" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldHighlights(ctx context.Context) (v []schema.Highlight, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHighlights is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHighlights requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHighlights: %w", err)
	}
	return oldValue.Highlights, nil
}

// AppendHighlights adds s to the "highlights" field.
func (m *VideoClipMutation) AppendHighlights(s []schema.Highlight) {
	m.appendhighlights = append(m.appendhighlights, s...)
}

// AppendedHighlights returns the list of values that were appended to the "highlights" field in this mutation.
func (m *VideoClipMutation) AppendedHighlights() ([]schema.Highlight, bool) {
	if len(m.appendhighlights) == 0 {
		return nil, false
	}
	return m.appendhighlights, true
}

// ClearHighlights clears the value of the "highlights" field.
func (m *VideoClipMutation) ClearHighlights() {
	m.highlights = nil
	m.appendhighlights = nil
	m.clearedFields[videoclip.FieldHighlights] = struct{}{}
}

// HighlightsCleared returns if the "highlights" field was cleared in this mutation.
func (m *VideoClipMutation) HighlightsCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldHighlights]
	return ok
}

// ResetHighlights resets all changes to the "highlights" field.
func (m *VideoClipMutation) ResetHighlights() {
	m.highlights = nil
	m.appendhighlights = nil
	delete(m.clearedFields, videoclip.FieldHighlights)
}

// SetSuggestedHighlights sets the "suggested_highlights" field.
func (m *VideoClipMutation) SetSuggestedHighlights(s []schema.Highlight) {
	m.suggested_highlights = &s
	m.appendsuggested_highlights = nil
}

// SuggestedHighlights returns the value of the "suggested_highlights" field in the mutation.
func (m *VideoClipMutation) SuggestedHighlights() (r []schema.Highlight, exists bool) {
	v := m.suggested_highlights
	if v == nil {
		return
	}
	return *v, true
}

// OldSuggestedHighlights returns the old "suggested_highlights" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldSuggestedHighlights(ctx context.Context) (v []schema.Highlight, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuggestedHighlights is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuggestedHighlights requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuggestedHighlights: %w", err)
	}
	return oldValue.SuggestedHighlights, nil
}

// AppendSuggestedHighlights adds s to the "suggested_highlights" field.
func (m *VideoClipMutation) AppendSuggestedHighlights(s []schema.Highlight) {
	m.appendsuggested_highlights = append(m.appendsuggested_highlights, s...)
}

// AppendedSuggestedHighlights returns the list of values that were appended to the "suggested_highlights" field in this mutation.
func (m *VideoClipMutation) AppendedSuggestedHighlights() ([]schema.Highlight, bool) {
	if len(m.appendsuggested_highlights) == 0 {
		return nil, false
	}
	return m.appendsuggested_highlights, true
}

// ClearSuggestedHighlights clears the value of the "suggested_highlights" field.
func (m *VideoClipMutation) ClearSuggestedHighlights() {
	m.suggested_highlights = nil
	m.appendsuggested_highlights = nil
	m.clearedFields[videoclip.FieldSuggestedHighlights] = struct{}{}
}

// SuggestedHighlightsCleared returns if the "suggested_highlights" field was cleared in this mutation.
func (m *VideoClipMutation) SuggestedHighlightsCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldSuggestedHighlights]
	return ok
}

// ResetSuggestedHighlights resets all changes to the "suggested_highlights" field.
func (m *VideoClipMutation) ResetSuggestedHighlights() {
	m.suggested_highlights = nil
	m.appendsuggested_highlights = nil
	delete(m.clearedFields, videoclip.FieldSuggestedHighlights)
}

// SetCreatedAt sets the "created_at" field.
func (m *VideoClipMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *VideoClipMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *VideoClipMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *VideoClipMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *VideoClipMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *VideoClipMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetHighlightsHistory sets the "highlights_history" field.
func (m *VideoClipMutation) SetHighlightsHistory(s [][]schema.Highlight) {
	m.highlights_history = &s
	m.appendhighlights_history = nil
}

// HighlightsHistory returns the value of the "highlights_history" field in the mutation.
func (m *VideoClipMutation) HighlightsHistory() (r [][]schema.Highlight, exists bool) {
	v := m.highlights_history
	if v == nil {
		return
	}
	return *v, true
}

// OldHighlightsHistory returns the old "highlights_history" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldHighlightsHistory(ctx context.Context) (v [][]schema.Highlight, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHighlightsHistory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHighlightsHistory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHighlightsHistory: %w", err)
	}
	return oldValue.HighlightsHistory, nil
}

// AppendHighlightsHistory adds s to the "highlights_history" field.
func (m *VideoClipMutation) AppendHighlightsHistory(s [][]schema.Highlight) {
	m.appendhighlights_history = append(m.appendhighlights_history, s...)
}

// AppendedHighlightsHistory returns the list of values that were appended to the "highlights_history" field in this mutation.
func (m *VideoClipMutation) AppendedHighlightsHistory() ([][]schema.Highlight, bool) {
	if len(m.appendhighlights_history) == 0 {
		return nil, false
	}
	return m.appendhighlights_history, true
}

// ClearHighlightsHistory clears the value of the "highlights_history" field.
func (m *VideoClipMutation) ClearHighlightsHistory() {
	m.highlights_history = nil
	m.appendhighlights_history = nil
	m.clearedFields[videoclip.FieldHighlightsHistory] = struct{}{}
}

// HighlightsHistoryCleared returns if the "highlights_history" field was cleared in this mutation.
func (m *VideoClipMutation) HighlightsHistoryCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldHighlightsHistory]
	return ok
}

// ResetHighlightsHistory resets all changes to the "highlights_history" field.
func (m *VideoClipMutation) ResetHighlightsHistory() {
	m.highlights_history = nil
	m.appendhighlights_history = nil
	delete(m.clearedFields, videoclip.FieldHighlightsHistory)
}

// SetHighlightsHistoryIndex sets the "highlights_history_index" field.
func (m *VideoClipMutation) SetHighlightsHistoryIndex(i int) {
	m.highlights_history_index = &i
	m.addhighlights_history_index = nil
}

// HighlightsHistoryIndex returns the value of the "highlights_history_index" field in the mutation.
func (m *VideoClipMutation) HighlightsHistoryIndex() (r int, exists bool) {
	v := m.highlights_history_index
	if v == nil {
		return
	}
	return *v, true
}

// OldHighlightsHistoryIndex returns the old "highlights_history_index" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldHighlightsHistoryIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHighlightsHistoryIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHighlightsHistoryIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHighlightsHistoryIndex: %w", err)
	}
	return oldValue.HighlightsHistoryIndex, nil
}

// AddHighlightsHistoryIndex adds i to the "highlights_history_index" field.
func (m *VideoClipMutation) AddHighlightsHistoryIndex(i int) {
	if m.addhighlights_history_index != nil {
		*m.addhighlights_history_index += i
	} else {
		m.addhighlights_history_index = &i
	}
}

// AddedHighlightsHistoryIndex returns the value that was added to the "highlights_history_index" field in this mutation.
func (m *VideoClipMutation) AddedHighlightsHistoryIndex() (r int, exists bool) {
	v := m.addhighlights_history_index
	if v == nil {
		return
	}
	return *v, true
}

// ClearHighlightsHistoryIndex clears the value of the "highlights_history_index" field.
func (m *VideoClipMutation) ClearHighlightsHistoryIndex() {
	m.highlights_history_index = nil
	m.addhighlights_history_index = nil
	m.clearedFields[videoclip.FieldHighlightsHistoryIndex] = struct{}{}
}

// HighlightsHistoryIndexCleared returns if the "highlights_history_index" field was cleared in this mutation.
func (m *VideoClipMutation) HighlightsHistoryIndexCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldHighlightsHistoryIndex]
	return ok
}

// ResetHighlightsHistoryIndex resets all changes to the "highlights_history_index" field.
func (m *VideoClipMutation) ResetHighlightsHistoryIndex() {
	m.highlights_history_index = nil
	m.addhighlights_history_index = nil
	delete(m.clearedFields, videoclip.FieldHighlightsHistoryIndex)
}

// SetTranscriptionState sets the "transcription_state" field.
func (m *VideoClipMutation) SetTranscriptionState(s string) {
	m.transcription_state = &s
}

// TranscriptionState returns the value of the "transcription_state" field in the mutation.
func (m *VideoClipMutation) TranscriptionState() (r string, exists bool) {
	v := m.transcription_state
	if v == nil {
		return
	}
	return *v, true
}

// OldTranscriptionState returns the old "transcription_state" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldTranscriptionState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTranscriptionState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTranscriptionState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTranscriptionState: %w", err)
	}
	return oldValue.TranscriptionState, nil
}

// ClearTranscriptionState clears the value of the "transcription_state" field.
func (m *VideoClipMutation) ClearTranscriptionState() {
	m.transcription_state = nil
	m.clearedFields[videoclip.FieldTranscriptionState] = struct{}{}
}

// TranscriptionStateCleared returns if the "transcription_state" field was cleared in this mutation.
func (m *VideoClipMutation) TranscriptionStateCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldTranscriptionState]
	return ok
}

// ResetTranscriptionState resets all changes to the "transcription_state" field.
func (m *VideoClipMutation) ResetTranscriptionState() {
	m.transcription_state = nil
	delete(m.clearedFields, videoclip.FieldTranscriptionState)
}

// SetTranscriptionError sets the "transcription_error" field.
func (m *VideoClipMutation) SetTranscriptionError(s string) {
	m.transcription_error = &s
}

// TranscriptionError returns the value of the "transcription_error" field in the mutation.
func (m *VideoClipMutation) TranscriptionError() (r string, exists bool) {
	v := m.transcription_error
	if v == nil {
		return
	}
	return *v, true
}

// OldTranscriptionError returns the old "transcription_error" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldTranscriptionError(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTranscriptionError is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTranscriptionError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTranscriptionError: %w", err)
	}
	return oldValue.TranscriptionError, nil
}

// ClearTranscriptionError clears the value of the "transcription_error" field.
func (m *VideoClipMutation) ClearTranscriptionError() {
	m.transcription_error = nil
	m.clearedFields[videoclip.FieldTranscriptionError] = struct{}{}
}

// TranscriptionErrorCleared returns if the "transcription_error" field was cleared in this mutation.
func (m *VideoClipMutation) TranscriptionErrorCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldTranscriptionError]
	return ok
}

// ResetTranscriptionError resets all changes to the "transcription_error" field.
func (m *VideoClipMutation) ResetTranscriptionError() {
	m.transcription_error = nil
	delete(m.clearedFields, videoclip.FieldTranscriptionError)
}

// SetTranscriptionStartedAt sets the "transcription_started_at" field.
func (m *VideoClipMutation) SetTranscriptionStartedAt(t time.Time) {
	m.transcription_started_at = &t
}

// TranscriptionStartedAt returns the value of the "transcription_started_at" field in the mutation.
func (m *VideoClipMutation) TranscriptionStartedAt() (r time.Time, exists bool) {
	v := m.transcription_started_at
	if v == nil {
		return
	}
	return *v, true
}

// OldTranscriptionStartedAt returns the old "transcription_started_at" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldTranscriptionStartedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTranscriptionStartedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTranscriptionStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTranscriptionStartedAt: %w", err)
	}
	return oldValue.TranscriptionStartedAt, nil
}

// ClearTranscriptionStartedAt clears the value of the "transcription_started_at" field.
func (m *VideoClipMutation) ClearTranscriptionStartedAt() {
	m.transcription_started_at = nil
	m.clearedFields[videoclip.FieldTranscriptionStartedAt] = struct{}{}
}

// TranscriptionStartedAtCleared returns if the "transcription_started_at" field was cleared in this mutation.
func (m *VideoClipMutation) TranscriptionStartedAtCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldTranscriptionStartedAt]
	return ok
}

// ResetTranscriptionStartedAt resets all changes to the "transcription_started_at" field.
func (m *VideoClipMutation) ResetTranscriptionStartedAt() {
	m.transcription_started_at = nil
	delete(m.clearedFields, videoclip.FieldTranscriptionStartedAt)
}

// SetTranscriptionCompletedAt sets the "transcription_completed_at" field.
func (m *VideoClipMutation) SetTranscriptionCompletedAt(t time.Time) {
	m.transcription_completed_at = &t
}

// TranscriptionCompletedAt returns the value of the "transcription_completed_at" field in the mutation.
func (m *VideoClipMutation) TranscriptionCompletedAt() (r time.Time, exists bool) {
	v := m.transcription_completed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldTranscriptionCompletedAt returns the old "transcription_completed_at" field's value of the VideoClip entity.
// If the VideoClip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoClipMutation) OldTranscriptionCompletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTranscriptionCompletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTranscriptionCompletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTranscriptionCompletedAt: %w", err)
	}
	return oldValue.TranscriptionCompletedAt, nil
}

// ClearTranscriptionCompletedAt clears the value of the "transcription_completed_at" field.
func (m *VideoClipMutation) ClearTranscriptionCompletedAt() {
	m.transcription_completed_at = nil
	m.clearedFields[videoclip.FieldTranscriptionCompletedAt] = struct{}{}
}

// TranscriptionCompletedAtCleared returns if the "transcription_completed_at" field was cleared in this mutation.
func (m *VideoClipMutation) TranscriptionCompletedAtCleared() bool {
	_, ok := m.clearedFields[videoclip.FieldTranscriptionCompletedAt]
	return ok
}

// ResetTranscriptionCompletedAt resets all changes to the "transcription_completed_at" field.
func (m *VideoClipMutation) ResetTranscriptionCompletedAt() {
	m.transcription_completed_at = nil
	delete(m.clearedFields, videoclip.FieldTranscriptionCompletedAt)
}

// SetProjectID sets the "project" edge to the Project entity by id.
func (m *VideoClipMutation) SetProjectID(id int) {
	m.project = &id
}

// ClearProject clears the "project" edge to the Project entity.
func (m *VideoClipMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *VideoClipMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectID returns the "project" edge ID in the mutation.
func (m *VideoClipMutation) ProjectID() (id int, exists bool) {
	if m.project != nil {
		return *m.project, true
	}
	return
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *VideoClipMutation) ProjectIDs() (ids []int) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *VideoClipMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// Where appends a list predicates to the VideoClipMutation builder.
func (m *VideoClipMutation) Where(ps ...predicate.VideoClip) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VideoClipMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VideoClipMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VideoClip, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VideoClipMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VideoClipMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VideoClip).
func (m *VideoClipMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VideoClipMutation) Fields() []string {
	fields := make([]string, 0, 22)
	if m.name != nil {
		fields = append(fields, videoclip.FieldName)
	}
	if m.description != nil {
		fields = append(fields, videoclip.FieldDescription)
	}
	if m.file_path != nil {
		fields = append(fields, videoclip.FieldFilePath)
	}
	if m.duration != nil {
		fields = append(fields, videoclip.FieldDuration)
	}
	if m.format != nil {
		fields = append(fields, videoclip.FieldFormat)
	}
	if m.width != nil {
		fields = append(fields, videoclip.FieldWidth)
	}
	if m.height != nil {
		fields = append(fields, videoclip.FieldHeight)
	}
	if m.file_size != nil {
		fields = append(fields, videoclip.FieldFileSize)
	}
	if m.transcription != nil {
		fields = append(fields, videoclip.FieldTranscription)
	}
	if m.transcription_words != nil {
		fields = append(fields, videoclip.FieldTranscriptionWords)
	}
	if m.transcription_language != nil {
		fields = append(fields, videoclip.FieldTranscriptionLanguage)
	}
	if m.transcription_duration != nil {
		fields = append(fields, videoclip.FieldTranscriptionDuration)
	}
	if m.highlights != nil {
		fields = append(fields, videoclip.FieldHighlights)
	}
	if m.suggested_highlights != nil {
		fields = append(fields, videoclip.FieldSuggestedHighlights)
	}
	if m.created_at != nil {
		fields = append(fields, videoclip.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, videoclip.FieldUpdatedAt)
	}
	if m.highlights_history != nil {
		fields = append(fields, videoclip.FieldHighlightsHistory)
	}
	if m.highlights_history_index != nil {
		fields = append(fields, videoclip.FieldHighlightsHistoryIndex)
	}
	if m.transcription_state != nil {
		fields = append(fields, videoclip.FieldTranscriptionState)
	}
	if m.transcription_error != nil {
		fields = append(fields, videoclip.FieldTranscriptionError)
	}
	if m.transcription_started_at != nil {
		fields = append(fields, videoclip.FieldTranscriptionStartedAt)
	}
	if m.transcription_completed_at != nil {
		fields = append(fields, videoclip.FieldTranscriptionCompletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VideoClipMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case videoclip.FieldName:
		return m.Name()
	case videoclip.FieldDescription:
		return m.Description()
	case videoclip.FieldFilePath:
		return m.FilePath()
	case videoclip.FieldDuration:
		return m.Duration()
	case videoclip.FieldFormat:
		return m.Format()
	case videoclip.FieldWidth:
		return m.Width()
	case videoclip.FieldHeight:
		return m.Height()
	case videoclip.FieldFileSize:
		return m.FileSize()
	case videoclip.FieldTranscription:
		return m.Transcription()
	case videoclip.FieldTranscriptionWords:
		return m.TranscriptionWords()
	case videoclip.FieldTranscriptionLanguage:
		return m.TranscriptionLanguage()
	case videoclip.FieldTranscriptionDuration:
		return m.TranscriptionDuration()
	case videoclip.FieldHighlights:
		return m.Highlights()
	case videoclip.FieldSuggestedHighlights:
		return m.SuggestedHighlights()
	case videoclip.FieldCreatedAt:
		return m.CreatedAt()
	case videoclip.FieldUpdatedAt:
		return m.UpdatedAt()
	case videoclip.FieldHighlightsHistory:
		return m.HighlightsHistory()
	case videoclip.FieldHighlightsHistoryIndex:
		return m.HighlightsHistoryIndex()
	case videoclip.FieldTranscriptionState:
		return m.TranscriptionState()
	case videoclip.FieldTranscriptionError:
		return m.TranscriptionError()
	case videoclip.FieldTranscriptionStartedAt:
		return m.TranscriptionStartedAt()
	case videoclip.FieldTranscriptionCompletedAt:
		return m.TranscriptionCompletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VideoClipMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case videoclip.FieldName:
		return m.OldName(ctx)
	case videoclip.FieldDescription:
		return m.OldDescription(ctx)
	case videoclip.FieldFilePath:
		return m.OldFilePath(ctx)
	case videoclip.FieldDuration:
		return m.OldDuration(ctx)
	case videoclip.FieldFormat:
		return m.OldFormat(ctx)
	case videoclip.FieldWidth:
		return m.OldWidth(ctx)
	case videoclip.FieldHeight:
		return m.OldHeight(ctx)
	case videoclip.FieldFileSize:
		return m.OldFileSize(ctx)
	case videoclip.FieldTranscription:
		return m.OldTranscription(ctx)
	case videoclip.FieldTranscriptionWords:
		return m.OldTranscriptionWords(ctx)
	case videoclip.FieldTranscriptionLanguage:
		return m.OldTranscriptionLanguage(ctx)
	case videoclip.FieldTranscriptionDuration:
		return m.OldTranscriptionDuration(ctx)
	case videoclip.FieldHighlights:
		return m.OldHighlights(ctx)
	case videoclip.FieldSuggestedHighlights:
		return m.OldSuggestedHighlights(ctx)
	case videoclip.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case videoclip.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case videoclip.FieldHighlightsHistory:
		return m.OldHighlightsHistory(ctx)
	case videoclip.FieldHighlightsHistoryIndex:
		return m.OldHighlightsHistoryIndex(ctx)
	case videoclip.FieldTranscriptionState:
		return m.OldTranscriptionState(ctx)
	case videoclip.FieldTranscriptionError:
		return m.OldTranscriptionError(ctx)
	case videoclip.FieldTranscriptionStartedAt:
		return m.OldTranscriptionStartedAt(ctx)
	case videoclip.FieldTranscriptionCompletedAt:
		return m.OldTranscriptionCompletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown VideoClip field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoClipMutation) SetField(name string, value ent.Value) error {
	switch name {
	case videoclip.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case videoclip.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case videoclip.FieldFilePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilePath(v)
		return nil
	case videoclip.FieldDuration:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case videoclip.FieldFormat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormat(v)
		return nil
	case videoclip.FieldWidth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWidth(v)
		return nil
	case videoclip.FieldHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case videoclip.FieldFileSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileSize(v)
		return nil
	case videoclip.FieldTranscription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTranscription(v)
		return nil
	case videoclip.FieldTranscriptionWords:
		v, ok := value.([]schema.Word)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTranscriptionWords(v)
		return nil
	case videoclip.FieldTranscriptionLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTranscriptionLanguage(v)
		return nil
	case videoclip.FieldTranscriptionDuration:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTranscriptionDuration(v)
		return nil
	case videoclip.FieldHighlights:
		v, ok := value.([]schema.Highlight)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHighlights(v)
		return nil
	case videoclip.FieldSuggestedHighlights:
		v, ok := value.([]schema.Highlight)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuggestedHighlights(v)
		return nil
	case videoclip.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case videoclip.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case videoclip.FieldHighlightsHistory:
		v, ok := value.([][]schema.Highlight)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHighlightsHistory(v)
		return nil
	case videoclip.FieldHighlightsHistoryIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHighlightsHistoryIndex(v)
		return nil
	case videoclip.FieldTranscriptionState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTranscriptionState(v)
		return nil
	case videoclip.FieldTranscriptionError:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTranscriptionError(v)
		return nil
	case videoclip.FieldTranscriptionStartedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTranscriptionStartedAt(v)
		return nil
	case videoclip.FieldTranscriptionCompletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTranscriptionCompletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown VideoClip field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VideoClipMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, videoclip.FieldDuration)
	}
	if m.addwidth != nil {
		fields = append(fields, videoclip.FieldWidth)
	}
	if m.addheight != nil {
		fields = append(fields, videoclip.FieldHeight)
	}
	if m.addfile_size != nil {
		fields = append(fields, videoclip.FieldFileSize)
	}
	if m.addtranscription_duration != nil {
		fields = append(fields, videoclip.FieldTranscriptionDuration)
	}
	if m.addhighlights_history_index != nil {
		fields = append(fields, videoclip.FieldHighlightsHistoryIndex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VideoClipMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case videoclip.FieldDuration:
		return m.AddedDuration()
	case videoclip.FieldWidth:
		return m.AddedWidth()
	case videoclip.FieldHeight:
		return m.AddedHeight()
	case videoclip.FieldFileSize:
		return m.AddedFileSize()
	case videoclip.FieldTranscriptionDuration:
		return m.AddedTranscriptionDuration()
	case videoclip.FieldHighlightsHistoryIndex:
		return m.AddedHighlightsHistoryIndex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoClipMutation) AddField(name string, value ent.Value) error {
	switch name {
	case videoclip.FieldDuration:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case videoclip.FieldWidth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWidth(v)
		return nil
	case videoclip.FieldHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	case videoclip.FieldFileSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFileSize(v)
		return nil
	case videoclip.FieldTranscriptionDuration:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTranscriptionDuration(v)
		return nil
	case videoclip.FieldHighlightsHistoryIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHighlightsHistoryIndex(v)
		return nil
	}
	return fmt.Errorf("unknown VideoClip numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VideoClipMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(videoclip.FieldDescription) {
		fields = append(fields, videoclip.FieldDescription)
	}
	if m.FieldCleared(videoclip.FieldDuration) {
		fields = append(fields, videoclip.FieldDuration)
	}
	if m.FieldCleared(videoclip.FieldFormat) {
		fields = append(fields, videoclip.FieldFormat)
	}
	if m.FieldCleared(videoclip.FieldWidth) {
		fields = append(fields, videoclip.FieldWidth)
	}
	if m.FieldCleared(videoclip.FieldHeight) {
		fields = append(fields, videoclip.FieldHeight)
	}
	if m.FieldCleared(videoclip.FieldFileSize) {
		fields = append(fields, videoclip.FieldFileSize)
	}
	if m.FieldCleared(videoclip.FieldTranscription) {
		fields = append(fields, videoclip.FieldTranscription)
	}
	if m.FieldCleared(videoclip.FieldTranscriptionWords) {
		fields = append(fields, videoclip.FieldTranscriptionWords)
	}
	if m.FieldCleared(videoclip.FieldTranscriptionLanguage) {
		fields = append(fields, videoclip.FieldTranscriptionLanguage)
	}
	if m.FieldCleared(videoclip.FieldTranscriptionDuration) {
		fields = append(fields, videoclip.FieldTranscriptionDuration)
	}
	if m.FieldCleared(videoclip.FieldHighlights) {
		fields = append(fields, videoclip.FieldHighlights)
	}
	if m.FieldCleared(videoclip.FieldSuggestedHighlights) {
		fields = append(fields, videoclip.FieldSuggestedHighlights)
	}
	if m.FieldCleared(videoclip.FieldHighlightsHistory) {
		fields = append(fields, videoclip.FieldHighlightsHistory)
	}
	if m.FieldCleared(videoclip.FieldHighlightsHistoryIndex) {
		fields = append(fields, videoclip.FieldHighlightsHistoryIndex)
	}
	if m.FieldCleared(videoclip.FieldTranscriptionState) {
		fields = append(fields, videoclip.FieldTranscriptionState)
	}
	if m.FieldCleared(videoclip.FieldTranscriptionError) {
		fields = append(fields, videoclip.FieldTranscriptionError)
	}
	if m.FieldCleared(videoclip.FieldTranscriptionStartedAt) {
		fields = append(fields, videoclip.FieldTranscriptionStartedAt)
	}
	if m.FieldCleared(videoclip.FieldTranscriptionCompletedAt) {
		fields = append(fields, videoclip.FieldTranscriptionCompletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VideoClipMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VideoClipMutation) ClearField(name string) error {
	switch name {
	case videoclip.FieldDescription:
		m.ClearDescription()
		return nil
	case videoclip.FieldDuration:
		m.ClearDuration()
		return nil
	case videoclip.FieldFormat:
		m.ClearFormat()
		return nil
	case videoclip.FieldWidth:
		m.ClearWidth()
		return nil
	case videoclip.FieldHeight:
		m.ClearHeight()
		return nil
	case videoclip.FieldFileSize:
		m.ClearFileSize()
		return nil
	case videoclip.FieldTranscription:
		m.ClearTranscription()
		return nil
	case videoclip.FieldTranscriptionWords:
		m.ClearTranscriptionWords()
		return nil
	case videoclip.FieldTranscriptionLanguage:
		m.ClearTranscriptionLanguage()
		return nil
	case videoclip.FieldTranscriptionDuration:
		m.ClearTranscriptionDuration()
		return nil
	case videoclip.FieldHighlights:
		m.ClearHighlights()
		return nil
	case videoclip.FieldSuggestedHighlights:
		m.ClearSuggestedHighlights()
		return nil
	case videoclip.FieldHighlightsHistory:
		m.ClearHighlightsHistory()
		return nil
	case videoclip.FieldHighlightsHistoryIndex:
		m.ClearHighlightsHistoryIndex()
		return nil
	case videoclip.FieldTranscriptionState:
		m.ClearTranscriptionState()
		return nil
	case videoclip.FieldTranscriptionError:
		m.ClearTranscriptionError()
		return nil
	case videoclip.FieldTranscriptionStartedAt:
		m.ClearTranscriptionStartedAt()
		return nil
	case videoclip.FieldTranscriptionCompletedAt:
		m.ClearTranscriptionCompletedAt()
		return nil
	}
	return fmt.Errorf("unknown VideoClip nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VideoClipMutation) ResetField(name string) error {
	switch name {
	case videoclip.FieldName:
		m.ResetName()
		return nil
	case videoclip.FieldDescription:
		m.ResetDescription()
		return nil
	case videoclip.FieldFilePath:
		m.ResetFilePath()
		return nil
	case videoclip.FieldDuration:
		m.ResetDuration()
		return nil
	case videoclip.FieldFormat:
		m.ResetFormat()
		return nil
	case videoclip.FieldWidth:
		m.ResetWidth()
		return nil
	case videoclip.FieldHeight:
		m.ResetHeight()
		return nil
	case videoclip.FieldFileSize:
		m.ResetFileSize()
		return nil
	case videoclip.FieldTranscription:
		m.ResetTranscription()
		return nil
	case videoclip.FieldTranscriptionWords:
		m.ResetTranscriptionWords()
		return nil
	case videoclip.FieldTranscriptionLanguage:
		m.ResetTranscriptionLanguage()
		return nil
	case videoclip.FieldTranscriptionDuration:
		m.ResetTranscriptionDuration()
		return nil
	case videoclip.FieldHighlights:
		m.ResetHighlights()
		return nil
	case videoclip.FieldSuggestedHighlights:
		m.ResetSuggestedHighlights()
		return nil
	case videoclip.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case videoclip.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case videoclip.FieldHighlightsHistory:
		m.ResetHighlightsHistory()
		return nil
	case videoclip.FieldHighlightsHistoryIndex:
		m.ResetHighlightsHistoryIndex()
		return nil
	case videoclip.FieldTranscriptionState:
		m.ResetTranscriptionState()
		return nil
	case videoclip.FieldTranscriptionError:
		m.ResetTranscriptionError()
		return nil
	case videoclip.FieldTranscriptionStartedAt:
		m.ResetTranscriptionStartedAt()
		return nil
	case videoclip.FieldTranscriptionCompletedAt:
		m.ResetTranscriptionCompletedAt()
		return nil
	}
	return fmt.Errorf("unknown VideoClip field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VideoClipMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.project != nil {
		edges = append(edges, videoclip.EdgeProject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VideoClipMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case videoclip.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VideoClipMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VideoClipMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VideoClipMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproject {
		edges = append(edges, videoclip.EdgeProject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VideoClipMutation) EdgeCleared(name string) bool {
	switch name {
	case videoclip.EdgeProject:
		return m.clearedproject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VideoClipMutation) ClearEdge(name string) error {
	switch name {
	case videoclip.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown VideoClip unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VideoClipMutation) ResetEdge(name string) error {
	switch name {
	case videoclip.EdgeProject:
		m.ResetProject()
		return nil
	}
	return fmt.Errorf("unknown VideoClip edge %s", name)
}
