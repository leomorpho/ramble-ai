// Code generated by ent, DO NOT EDIT.

package chatsession

import (
	"MYAPP/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldLTE(FieldID, id))
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEQ(FieldSessionID, v))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v int) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEQ(FieldProjectID, v))
}

// EndpointID applies equality check predicate on the "endpoint_id" field. It's identical to EndpointIDEQ.
func EndpointID(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEQ(FieldEndpointID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// SelectedModel applies equality check predicate on the "selected_model" field. It's identical to SelectedModelEQ.
func SelectedModel(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEQ(FieldSelectedModel, v))
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEQ(FieldSessionID, v))
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNEQ(FieldSessionID, v))
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldIn(FieldSessionID, vs...))
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNotIn(FieldSessionID, vs...))
}

// SessionIDGT applies the GT predicate on the "session_id" field.
func SessionIDGT(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldGT(FieldSessionID, v))
}

// SessionIDGTE applies the GTE predicate on the "session_id" field.
func SessionIDGTE(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldGTE(FieldSessionID, v))
}

// SessionIDLT applies the LT predicate on the "session_id" field.
func SessionIDLT(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldLT(FieldSessionID, v))
}

// SessionIDLTE applies the LTE predicate on the "session_id" field.
func SessionIDLTE(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldLTE(FieldSessionID, v))
}

// SessionIDContains applies the Contains predicate on the "session_id" field.
func SessionIDContains(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldContains(FieldSessionID, v))
}

// SessionIDHasPrefix applies the HasPrefix predicate on the "session_id" field.
func SessionIDHasPrefix(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldHasPrefix(FieldSessionID, v))
}

// SessionIDHasSuffix applies the HasSuffix predicate on the "session_id" field.
func SessionIDHasSuffix(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldHasSuffix(FieldSessionID, v))
}

// SessionIDEqualFold applies the EqualFold predicate on the "session_id" field.
func SessionIDEqualFold(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEqualFold(FieldSessionID, v))
}

// SessionIDContainsFold applies the ContainsFold predicate on the "session_id" field.
func SessionIDContainsFold(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldContainsFold(FieldSessionID, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v int) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v int) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...int) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...int) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNotIn(FieldProjectID, vs...))
}

// EndpointIDEQ applies the EQ predicate on the "endpoint_id" field.
func EndpointIDEQ(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEQ(FieldEndpointID, v))
}

// EndpointIDNEQ applies the NEQ predicate on the "endpoint_id" field.
func EndpointIDNEQ(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNEQ(FieldEndpointID, v))
}

// EndpointIDIn applies the In predicate on the "endpoint_id" field.
func EndpointIDIn(vs ...string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldIn(FieldEndpointID, vs...))
}

// EndpointIDNotIn applies the NotIn predicate on the "endpoint_id" field.
func EndpointIDNotIn(vs ...string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNotIn(FieldEndpointID, vs...))
}

// EndpointIDGT applies the GT predicate on the "endpoint_id" field.
func EndpointIDGT(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldGT(FieldEndpointID, v))
}

// EndpointIDGTE applies the GTE predicate on the "endpoint_id" field.
func EndpointIDGTE(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldGTE(FieldEndpointID, v))
}

// EndpointIDLT applies the LT predicate on the "endpoint_id" field.
func EndpointIDLT(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldLT(FieldEndpointID, v))
}

// EndpointIDLTE applies the LTE predicate on the "endpoint_id" field.
func EndpointIDLTE(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldLTE(FieldEndpointID, v))
}

// EndpointIDContains applies the Contains predicate on the "endpoint_id" field.
func EndpointIDContains(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldContains(FieldEndpointID, v))
}

// EndpointIDHasPrefix applies the HasPrefix predicate on the "endpoint_id" field.
func EndpointIDHasPrefix(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldHasPrefix(FieldEndpointID, v))
}

// EndpointIDHasSuffix applies the HasSuffix predicate on the "endpoint_id" field.
func EndpointIDHasSuffix(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldHasSuffix(FieldEndpointID, v))
}

// EndpointIDEqualFold applies the EqualFold predicate on the "endpoint_id" field.
func EndpointIDEqualFold(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEqualFold(FieldEndpointID, v))
}

// EndpointIDContainsFold applies the ContainsFold predicate on the "endpoint_id" field.
func EndpointIDContainsFold(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldContainsFold(FieldEndpointID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldLTE(FieldUpdatedAt, v))
}

// SelectedModelEQ applies the EQ predicate on the "selected_model" field.
func SelectedModelEQ(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEQ(FieldSelectedModel, v))
}

// SelectedModelNEQ applies the NEQ predicate on the "selected_model" field.
func SelectedModelNEQ(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNEQ(FieldSelectedModel, v))
}

// SelectedModelIn applies the In predicate on the "selected_model" field.
func SelectedModelIn(vs ...string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldIn(FieldSelectedModel, vs...))
}

// SelectedModelNotIn applies the NotIn predicate on the "selected_model" field.
func SelectedModelNotIn(vs ...string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNotIn(FieldSelectedModel, vs...))
}

// SelectedModelGT applies the GT predicate on the "selected_model" field.
func SelectedModelGT(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldGT(FieldSelectedModel, v))
}

// SelectedModelGTE applies the GTE predicate on the "selected_model" field.
func SelectedModelGTE(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldGTE(FieldSelectedModel, v))
}

// SelectedModelLT applies the LT predicate on the "selected_model" field.
func SelectedModelLT(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldLT(FieldSelectedModel, v))
}

// SelectedModelLTE applies the LTE predicate on the "selected_model" field.
func SelectedModelLTE(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldLTE(FieldSelectedModel, v))
}

// SelectedModelContains applies the Contains predicate on the "selected_model" field.
func SelectedModelContains(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldContains(FieldSelectedModel, v))
}

// SelectedModelHasPrefix applies the HasPrefix predicate on the "selected_model" field.
func SelectedModelHasPrefix(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldHasPrefix(FieldSelectedModel, v))
}

// SelectedModelHasSuffix applies the HasSuffix predicate on the "selected_model" field.
func SelectedModelHasSuffix(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldHasSuffix(FieldSelectedModel, v))
}

// SelectedModelIsNil applies the IsNil predicate on the "selected_model" field.
func SelectedModelIsNil() predicate.ChatSession {
	return predicate.ChatSession(sql.FieldIsNull(FieldSelectedModel))
}

// SelectedModelNotNil applies the NotNil predicate on the "selected_model" field.
func SelectedModelNotNil() predicate.ChatSession {
	return predicate.ChatSession(sql.FieldNotNull(FieldSelectedModel))
}

// SelectedModelEqualFold applies the EqualFold predicate on the "selected_model" field.
func SelectedModelEqualFold(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldEqualFold(FieldSelectedModel, v))
}

// SelectedModelContainsFold applies the ContainsFold predicate on the "selected_model" field.
func SelectedModelContainsFold(v string) predicate.ChatSession {
	return predicate.ChatSession(sql.FieldContainsFold(FieldSelectedModel, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ChatSession {
	return predicate.ChatSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ChatSession {
	return predicate.ChatSession(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessages applies the HasEdge predicate on the "messages" edge.
func HasMessages() predicate.ChatSession {
	return predicate.ChatSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessagesTable, MessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessagesWith applies the HasEdge predicate on the "messages" edge with a given conditions (other predicates).
func HasMessagesWith(preds ...predicate.ChatMessage) predicate.ChatSession {
	return predicate.ChatSession(func(s *sql.Selector) {
		step := newMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChatSession) predicate.ChatSession {
	return predicate.ChatSession(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChatSession) predicate.ChatSession {
	return predicate.ChatSession(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChatSession) predicate.ChatSession {
	return predicate.ChatSession(sql.NotPredicates(p))
}
