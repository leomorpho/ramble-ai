// Code generated by ent, DO NOT EDIT.

package project

import (
	"MYAPP/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDescription, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldPath, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// AiModel applies equality check predicate on the "ai_model" field. It's identical to AiModelEQ.
func AiModel(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldAiModel, v))
}

// AiPrompt applies equality check predicate on the "ai_prompt" field. It's identical to AiPromptEQ.
func AiPrompt(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldAiPrompt, v))
}

// AiSuggestionCreatedAt applies equality check predicate on the "ai_suggestion_created_at" field. It's identical to AiSuggestionCreatedAtEQ.
func AiSuggestionCreatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldAiSuggestionCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldDescription, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldPath, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUpdatedAt, v))
}

// AiModelEQ applies the EQ predicate on the "ai_model" field.
func AiModelEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldAiModel, v))
}

// AiModelNEQ applies the NEQ predicate on the "ai_model" field.
func AiModelNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldAiModel, v))
}

// AiModelIn applies the In predicate on the "ai_model" field.
func AiModelIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldAiModel, vs...))
}

// AiModelNotIn applies the NotIn predicate on the "ai_model" field.
func AiModelNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldAiModel, vs...))
}

// AiModelGT applies the GT predicate on the "ai_model" field.
func AiModelGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldAiModel, v))
}

// AiModelGTE applies the GTE predicate on the "ai_model" field.
func AiModelGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldAiModel, v))
}

// AiModelLT applies the LT predicate on the "ai_model" field.
func AiModelLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldAiModel, v))
}

// AiModelLTE applies the LTE predicate on the "ai_model" field.
func AiModelLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldAiModel, v))
}

// AiModelContains applies the Contains predicate on the "ai_model" field.
func AiModelContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldAiModel, v))
}

// AiModelHasPrefix applies the HasPrefix predicate on the "ai_model" field.
func AiModelHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldAiModel, v))
}

// AiModelHasSuffix applies the HasSuffix predicate on the "ai_model" field.
func AiModelHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldAiModel, v))
}

// AiModelIsNil applies the IsNil predicate on the "ai_model" field.
func AiModelIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldAiModel))
}

// AiModelNotNil applies the NotNil predicate on the "ai_model" field.
func AiModelNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldAiModel))
}

// AiModelEqualFold applies the EqualFold predicate on the "ai_model" field.
func AiModelEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldAiModel, v))
}

// AiModelContainsFold applies the ContainsFold predicate on the "ai_model" field.
func AiModelContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldAiModel, v))
}

// AiPromptEQ applies the EQ predicate on the "ai_prompt" field.
func AiPromptEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldAiPrompt, v))
}

// AiPromptNEQ applies the NEQ predicate on the "ai_prompt" field.
func AiPromptNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldAiPrompt, v))
}

// AiPromptIn applies the In predicate on the "ai_prompt" field.
func AiPromptIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldAiPrompt, vs...))
}

// AiPromptNotIn applies the NotIn predicate on the "ai_prompt" field.
func AiPromptNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldAiPrompt, vs...))
}

// AiPromptGT applies the GT predicate on the "ai_prompt" field.
func AiPromptGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldAiPrompt, v))
}

// AiPromptGTE applies the GTE predicate on the "ai_prompt" field.
func AiPromptGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldAiPrompt, v))
}

// AiPromptLT applies the LT predicate on the "ai_prompt" field.
func AiPromptLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldAiPrompt, v))
}

// AiPromptLTE applies the LTE predicate on the "ai_prompt" field.
func AiPromptLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldAiPrompt, v))
}

// AiPromptContains applies the Contains predicate on the "ai_prompt" field.
func AiPromptContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldAiPrompt, v))
}

// AiPromptHasPrefix applies the HasPrefix predicate on the "ai_prompt" field.
func AiPromptHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldAiPrompt, v))
}

// AiPromptHasSuffix applies the HasSuffix predicate on the "ai_prompt" field.
func AiPromptHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldAiPrompt, v))
}

// AiPromptIsNil applies the IsNil predicate on the "ai_prompt" field.
func AiPromptIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldAiPrompt))
}

// AiPromptNotNil applies the NotNil predicate on the "ai_prompt" field.
func AiPromptNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldAiPrompt))
}

// AiPromptEqualFold applies the EqualFold predicate on the "ai_prompt" field.
func AiPromptEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldAiPrompt, v))
}

// AiPromptContainsFold applies the ContainsFold predicate on the "ai_prompt" field.
func AiPromptContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldAiPrompt, v))
}

// AiSuggestionOrderIsNil applies the IsNil predicate on the "ai_suggestion_order" field.
func AiSuggestionOrderIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldAiSuggestionOrder))
}

// AiSuggestionOrderNotNil applies the NotNil predicate on the "ai_suggestion_order" field.
func AiSuggestionOrderNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldAiSuggestionOrder))
}

// AiSuggestionCreatedAtEQ applies the EQ predicate on the "ai_suggestion_created_at" field.
func AiSuggestionCreatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldAiSuggestionCreatedAt, v))
}

// AiSuggestionCreatedAtNEQ applies the NEQ predicate on the "ai_suggestion_created_at" field.
func AiSuggestionCreatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldAiSuggestionCreatedAt, v))
}

// AiSuggestionCreatedAtIn applies the In predicate on the "ai_suggestion_created_at" field.
func AiSuggestionCreatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldAiSuggestionCreatedAt, vs...))
}

// AiSuggestionCreatedAtNotIn applies the NotIn predicate on the "ai_suggestion_created_at" field.
func AiSuggestionCreatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldAiSuggestionCreatedAt, vs...))
}

// AiSuggestionCreatedAtGT applies the GT predicate on the "ai_suggestion_created_at" field.
func AiSuggestionCreatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldAiSuggestionCreatedAt, v))
}

// AiSuggestionCreatedAtGTE applies the GTE predicate on the "ai_suggestion_created_at" field.
func AiSuggestionCreatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldAiSuggestionCreatedAt, v))
}

// AiSuggestionCreatedAtLT applies the LT predicate on the "ai_suggestion_created_at" field.
func AiSuggestionCreatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldAiSuggestionCreatedAt, v))
}

// AiSuggestionCreatedAtLTE applies the LTE predicate on the "ai_suggestion_created_at" field.
func AiSuggestionCreatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldAiSuggestionCreatedAt, v))
}

// AiSuggestionCreatedAtIsNil applies the IsNil predicate on the "ai_suggestion_created_at" field.
func AiSuggestionCreatedAtIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldAiSuggestionCreatedAt))
}

// AiSuggestionCreatedAtNotNil applies the NotNil predicate on the "ai_suggestion_created_at" field.
func AiSuggestionCreatedAtNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldAiSuggestionCreatedAt))
}

// HasVideoClips applies the HasEdge predicate on the "video_clips" edge.
func HasVideoClips() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VideoClipsTable, VideoClipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVideoClipsWith applies the HasEdge predicate on the "video_clips" edge with a given conditions (other predicates).
func HasVideoClipsWith(preds ...predicate.VideoClip) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newVideoClipsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExportJobs applies the HasEdge predicate on the "export_jobs" edge.
func HasExportJobs() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExportJobsTable, ExportJobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExportJobsWith applies the HasEdge predicate on the "export_jobs" edge with a given conditions (other predicates).
func HasExportJobsWith(preds ...predicate.ExportJob) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newExportJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(sql.NotPredicates(p))
}
