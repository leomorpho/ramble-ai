// Code generated by ent, DO NOT EDIT.

package project

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeVideoClips holds the string denoting the video_clips edge name in mutations.
	EdgeVideoClips = "video_clips"
	// EdgeExportJobs holds the string denoting the export_jobs edge name in mutations.
	EdgeExportJobs = "export_jobs"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// VideoClipsTable is the table that holds the video_clips relation/edge.
	VideoClipsTable = "video_clips"
	// VideoClipsInverseTable is the table name for the VideoClip entity.
	// It exists in this package in order to avoid circular dependency with the "videoclip" package.
	VideoClipsInverseTable = "video_clips"
	// VideoClipsColumn is the table column denoting the video_clips relation/edge.
	VideoClipsColumn = "project_video_clips"
	// ExportJobsTable is the table that holds the export_jobs relation/edge.
	ExportJobsTable = "export_jobs"
	// ExportJobsInverseTable is the table name for the ExportJob entity.
	// It exists in this package in order to avoid circular dependency with the "exportjob" package.
	ExportJobsInverseTable = "export_jobs"
	// ExportJobsColumn is the table column denoting the export_jobs relation/edge.
	ExportJobsColumn = "project_export_jobs"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldPath,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PathValidator is a validator for the "path" field. It is called by the builders before save.
	PathValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVideoClipsCount orders the results by video_clips count.
func ByVideoClipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVideoClipsStep(), opts...)
	}
}

// ByVideoClips orders the results by video_clips terms.
func ByVideoClips(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVideoClipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExportJobsCount orders the results by export_jobs count.
func ByExportJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExportJobsStep(), opts...)
	}
}

// ByExportJobs orders the results by export_jobs terms.
func ByExportJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExportJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVideoClipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VideoClipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VideoClipsTable, VideoClipsColumn),
	)
}
func newExportJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExportJobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExportJobsTable, ExportJobsColumn),
	)
}
