// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ramble-ai/ent/chatsession"
	"ramble-ai/ent/exportjob"
	"ramble-ai/ent/project"
	"ramble-ai/ent/videoclip"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectCreate is the builder for creating a Project entity.
type ProjectCreate struct {
	config
	mutation *ProjectMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *ProjectCreate) SetName(s string) *ProjectCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProjectCreate) SetDescription(s string) *ProjectCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDescription(s *string) *ProjectCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetPath sets the "path" field.
func (pc *ProjectCreate) SetPath(s string) *ProjectCreate {
	pc.mutation.SetPath(s)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProjectCreate) SetCreatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableCreatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProjectCreate) SetUpdatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableUpdatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetAiModel sets the "ai_model" field.
func (pc *ProjectCreate) SetAiModel(s string) *ProjectCreate {
	pc.mutation.SetAiModel(s)
	return pc
}

// SetNillableAiModel sets the "ai_model" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableAiModel(s *string) *ProjectCreate {
	if s != nil {
		pc.SetAiModel(*s)
	}
	return pc
}

// SetAiPrompt sets the "ai_prompt" field.
func (pc *ProjectCreate) SetAiPrompt(s string) *ProjectCreate {
	pc.mutation.SetAiPrompt(s)
	return pc
}

// SetNillableAiPrompt sets the "ai_prompt" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableAiPrompt(s *string) *ProjectCreate {
	if s != nil {
		pc.SetAiPrompt(*s)
	}
	return pc
}

// SetAiSuggestionOrder sets the "ai_suggestion_order" field.
func (pc *ProjectCreate) SetAiSuggestionOrder(i []interface{}) *ProjectCreate {
	pc.mutation.SetAiSuggestionOrder(i)
	return pc
}

// SetAiSuggestionModel sets the "ai_suggestion_model" field.
func (pc *ProjectCreate) SetAiSuggestionModel(s string) *ProjectCreate {
	pc.mutation.SetAiSuggestionModel(s)
	return pc
}

// SetNillableAiSuggestionModel sets the "ai_suggestion_model" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableAiSuggestionModel(s *string) *ProjectCreate {
	if s != nil {
		pc.SetAiSuggestionModel(*s)
	}
	return pc
}

// SetAiSuggestionCreatedAt sets the "ai_suggestion_created_at" field.
func (pc *ProjectCreate) SetAiSuggestionCreatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetAiSuggestionCreatedAt(t)
	return pc
}

// SetNillableAiSuggestionCreatedAt sets the "ai_suggestion_created_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableAiSuggestionCreatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetAiSuggestionCreatedAt(*t)
	}
	return pc
}

// SetAiHighlightModel sets the "ai_highlight_model" field.
func (pc *ProjectCreate) SetAiHighlightModel(s string) *ProjectCreate {
	pc.mutation.SetAiHighlightModel(s)
	return pc
}

// SetNillableAiHighlightModel sets the "ai_highlight_model" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableAiHighlightModel(s *string) *ProjectCreate {
	if s != nil {
		pc.SetAiHighlightModel(*s)
	}
	return pc
}

// SetAiHighlightPrompt sets the "ai_highlight_prompt" field.
func (pc *ProjectCreate) SetAiHighlightPrompt(s string) *ProjectCreate {
	pc.mutation.SetAiHighlightPrompt(s)
	return pc
}

// SetNillableAiHighlightPrompt sets the "ai_highlight_prompt" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableAiHighlightPrompt(s *string) *ProjectCreate {
	if s != nil {
		pc.SetAiHighlightPrompt(*s)
	}
	return pc
}

// SetActiveTab sets the "active_tab" field.
func (pc *ProjectCreate) SetActiveTab(s string) *ProjectCreate {
	pc.mutation.SetActiveTab(s)
	return pc
}

// SetNillableActiveTab sets the "active_tab" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableActiveTab(s *string) *ProjectCreate {
	if s != nil {
		pc.SetActiveTab(*s)
	}
	return pc
}

// SetAiSilenceImprovements sets the "ai_silence_improvements" field.
func (pc *ProjectCreate) SetAiSilenceImprovements(m []map[string]interface{}) *ProjectCreate {
	pc.mutation.SetAiSilenceImprovements(m)
	return pc
}

// SetAiSilenceModel sets the "ai_silence_model" field.
func (pc *ProjectCreate) SetAiSilenceModel(s string) *ProjectCreate {
	pc.mutation.SetAiSilenceModel(s)
	return pc
}

// SetNillableAiSilenceModel sets the "ai_silence_model" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableAiSilenceModel(s *string) *ProjectCreate {
	if s != nil {
		pc.SetAiSilenceModel(*s)
	}
	return pc
}

// SetAiSilenceCreatedAt sets the "ai_silence_created_at" field.
func (pc *ProjectCreate) SetAiSilenceCreatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetAiSilenceCreatedAt(t)
	return pc
}

// SetNillableAiSilenceCreatedAt sets the "ai_silence_created_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableAiSilenceCreatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetAiSilenceCreatedAt(*t)
	}
	return pc
}

// SetHighlightOrder sets the "highlight_order" field.
func (pc *ProjectCreate) SetHighlightOrder(i []interface{}) *ProjectCreate {
	pc.mutation.SetHighlightOrder(i)
	return pc
}

// SetOrderHistory sets the "order_history" field.
func (pc *ProjectCreate) SetOrderHistory(i [][]interface{}) *ProjectCreate {
	pc.mutation.SetOrderHistory(i)
	return pc
}

// SetOrderHistoryIndex sets the "order_history_index" field.
func (pc *ProjectCreate) SetOrderHistoryIndex(i int) *ProjectCreate {
	pc.mutation.SetOrderHistoryIndex(i)
	return pc
}

// SetNillableOrderHistoryIndex sets the "order_history_index" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableOrderHistoryIndex(i *int) *ProjectCreate {
	if i != nil {
		pc.SetOrderHistoryIndex(*i)
	}
	return pc
}

// SetHiddenHighlights sets the "hidden_highlights" field.
func (pc *ProjectCreate) SetHiddenHighlights(s []string) *ProjectCreate {
	pc.mutation.SetHiddenHighlights(s)
	return pc
}

// AddVideoClipIDs adds the "video_clips" edge to the VideoClip entity by IDs.
func (pc *ProjectCreate) AddVideoClipIDs(ids ...int) *ProjectCreate {
	pc.mutation.AddVideoClipIDs(ids...)
	return pc
}

// AddVideoClips adds the "video_clips" edges to the VideoClip entity.
func (pc *ProjectCreate) AddVideoClips(v ...*VideoClip) *ProjectCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pc.AddVideoClipIDs(ids...)
}

// AddExportJobIDs adds the "export_jobs" edge to the ExportJob entity by IDs.
func (pc *ProjectCreate) AddExportJobIDs(ids ...int) *ProjectCreate {
	pc.mutation.AddExportJobIDs(ids...)
	return pc
}

// AddExportJobs adds the "export_jobs" edges to the ExportJob entity.
func (pc *ProjectCreate) AddExportJobs(e ...*ExportJob) *ProjectCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pc.AddExportJobIDs(ids...)
}

// AddChatSessionIDs adds the "chat_sessions" edge to the ChatSession entity by IDs.
func (pc *ProjectCreate) AddChatSessionIDs(ids ...int) *ProjectCreate {
	pc.mutation.AddChatSessionIDs(ids...)
	return pc
}

// AddChatSessions adds the "chat_sessions" edges to the ChatSession entity.
func (pc *ProjectCreate) AddChatSessions(c ...*ChatSession) *ProjectCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddChatSessionIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pc *ProjectCreate) Mutation() *ProjectMutation {
	return pc.mutation
}

// Save creates the Project in the database.
func (pc *ProjectCreate) Save(ctx context.Context) (*Project, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProjectCreate) SaveX(ctx context.Context) *Project {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProjectCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProjectCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProjectCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := project.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := project.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.AiModel(); !ok {
		v := project.DefaultAiModel
		pc.mutation.SetAiModel(v)
	}
	if _, ok := pc.mutation.AiHighlightModel(); !ok {
		v := project.DefaultAiHighlightModel
		pc.mutation.SetAiHighlightModel(v)
	}
	if _, ok := pc.mutation.ActiveTab(); !ok {
		v := project.DefaultActiveTab
		pc.mutation.SetActiveTab(v)
	}
	if _, ok := pc.mutation.OrderHistoryIndex(); !ok {
		v := project.DefaultOrderHistoryIndex
		pc.mutation.SetOrderHistoryIndex(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProjectCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Project.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Project.path"`)}
	}
	if v, ok := pc.mutation.Path(); ok {
		if err := project.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Project.path": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Project.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Project.updated_at"`)}
	}
	return nil
}

func (pc *ProjectCreate) sqlSave(ctx context.Context) (*Project, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProjectCreate) createSpec() (*Project, *sqlgraph.CreateSpec) {
	var (
		_node = &Project{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(project.Table, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Path(); ok {
		_spec.SetField(project.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.AiModel(); ok {
		_spec.SetField(project.FieldAiModel, field.TypeString, value)
		_node.AiModel = value
	}
	if value, ok := pc.mutation.AiPrompt(); ok {
		_spec.SetField(project.FieldAiPrompt, field.TypeString, value)
		_node.AiPrompt = value
	}
	if value, ok := pc.mutation.AiSuggestionOrder(); ok {
		_spec.SetField(project.FieldAiSuggestionOrder, field.TypeJSON, value)
		_node.AiSuggestionOrder = value
	}
	if value, ok := pc.mutation.AiSuggestionModel(); ok {
		_spec.SetField(project.FieldAiSuggestionModel, field.TypeString, value)
		_node.AiSuggestionModel = value
	}
	if value, ok := pc.mutation.AiSuggestionCreatedAt(); ok {
		_spec.SetField(project.FieldAiSuggestionCreatedAt, field.TypeTime, value)
		_node.AiSuggestionCreatedAt = value
	}
	if value, ok := pc.mutation.AiHighlightModel(); ok {
		_spec.SetField(project.FieldAiHighlightModel, field.TypeString, value)
		_node.AiHighlightModel = value
	}
	if value, ok := pc.mutation.AiHighlightPrompt(); ok {
		_spec.SetField(project.FieldAiHighlightPrompt, field.TypeString, value)
		_node.AiHighlightPrompt = value
	}
	if value, ok := pc.mutation.ActiveTab(); ok {
		_spec.SetField(project.FieldActiveTab, field.TypeString, value)
		_node.ActiveTab = value
	}
	if value, ok := pc.mutation.AiSilenceImprovements(); ok {
		_spec.SetField(project.FieldAiSilenceImprovements, field.TypeJSON, value)
		_node.AiSilenceImprovements = value
	}
	if value, ok := pc.mutation.AiSilenceModel(); ok {
		_spec.SetField(project.FieldAiSilenceModel, field.TypeString, value)
		_node.AiSilenceModel = value
	}
	if value, ok := pc.mutation.AiSilenceCreatedAt(); ok {
		_spec.SetField(project.FieldAiSilenceCreatedAt, field.TypeTime, value)
		_node.AiSilenceCreatedAt = value
	}
	if value, ok := pc.mutation.HighlightOrder(); ok {
		_spec.SetField(project.FieldHighlightOrder, field.TypeJSON, value)
		_node.HighlightOrder = value
	}
	if value, ok := pc.mutation.OrderHistory(); ok {
		_spec.SetField(project.FieldOrderHistory, field.TypeJSON, value)
		_node.OrderHistory = value
	}
	if value, ok := pc.mutation.OrderHistoryIndex(); ok {
		_spec.SetField(project.FieldOrderHistoryIndex, field.TypeInt, value)
		_node.OrderHistoryIndex = value
	}
	if value, ok := pc.mutation.HiddenHighlights(); ok {
		_spec.SetField(project.FieldHiddenHighlights, field.TypeJSON, value)
		_node.HiddenHighlights = value
	}
	if nodes := pc.mutation.VideoClipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VideoClipsTable,
			Columns: []string{project.VideoClipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoclip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ExportJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ExportJobsTable,
			Columns: []string{project.ExportJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ChatSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChatSessionsTable,
			Columns: []string{project.ChatSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectCreateBulk is the builder for creating many Project entities in bulk.
type ProjectCreateBulk struct {
	config
	err      error
	builders []*ProjectCreate
}

// Save creates the Project entities in the database.
func (pcb *ProjectCreateBulk) Save(ctx context.Context) ([]*Project, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Project, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProjectCreateBulk) SaveX(ctx context.Context) []*Project {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProjectCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
