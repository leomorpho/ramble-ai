// Code generated by ent, DO NOT EDIT.

package exportjob

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the exportjob type in the database.
	Label = "export_job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldJobID holds the string denoting the job_id field in the database.
	FieldJobID = "job_id"
	// FieldExportType holds the string denoting the export_type field in the database.
	FieldExportType = "export_type"
	// FieldOutputPath holds the string denoting the output_path field in the database.
	FieldOutputPath = "output_path"
	// FieldStage holds the string denoting the stage field in the database.
	FieldStage = "stage"
	// FieldProgress holds the string denoting the progress field in the database.
	FieldProgress = "progress"
	// FieldCurrentFile holds the string denoting the current_file field in the database.
	FieldCurrentFile = "current_file"
	// FieldTotalFiles holds the string denoting the total_files field in the database.
	FieldTotalFiles = "total_files"
	// FieldProcessedFiles holds the string denoting the processed_files field in the database.
	FieldProcessedFiles = "processed_files"
	// FieldIsComplete holds the string denoting the is_complete field in the database.
	FieldIsComplete = "is_complete"
	// FieldHasError holds the string denoting the has_error field in the database.
	FieldHasError = "has_error"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldIsCancelled holds the string denoting the is_cancelled field in the database.
	FieldIsCancelled = "is_cancelled"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// Table holds the table name of the exportjob in the database.
	Table = "export_jobs"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "export_jobs"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_export_jobs"
)

// Columns holds all SQL columns for exportjob fields.
var Columns = []string{
	FieldID,
	FieldJobID,
	FieldExportType,
	FieldOutputPath,
	FieldStage,
	FieldProgress,
	FieldCurrentFile,
	FieldTotalFiles,
	FieldProcessedFiles,
	FieldIsComplete,
	FieldHasError,
	FieldErrorMessage,
	FieldIsCancelled,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCompletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "export_jobs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_export_jobs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// JobIDValidator is a validator for the "job_id" field. It is called by the builders before save.
	JobIDValidator func(string) error
	// ExportTypeValidator is a validator for the "export_type" field. It is called by the builders before save.
	ExportTypeValidator func(string) error
	// OutputPathValidator is a validator for the "output_path" field. It is called by the builders before save.
	OutputPathValidator func(string) error
	// DefaultStage holds the default value on creation for the "stage" field.
	DefaultStage string
	// DefaultProgress holds the default value on creation for the "progress" field.
	DefaultProgress float64
	// DefaultTotalFiles holds the default value on creation for the "total_files" field.
	DefaultTotalFiles int
	// DefaultProcessedFiles holds the default value on creation for the "processed_files" field.
	DefaultProcessedFiles int
	// DefaultIsComplete holds the default value on creation for the "is_complete" field.
	DefaultIsComplete bool
	// DefaultHasError holds the default value on creation for the "has_error" field.
	DefaultHasError bool
	// DefaultIsCancelled holds the default value on creation for the "is_cancelled" field.
	DefaultIsCancelled bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ExportJob queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByJobID orders the results by the job_id field.
func ByJobID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobID, opts...).ToFunc()
}

// ByExportType orders the results by the export_type field.
func ByExportType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExportType, opts...).ToFunc()
}

// ByOutputPath orders the results by the output_path field.
func ByOutputPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputPath, opts...).ToFunc()
}

// ByStage orders the results by the stage field.
func ByStage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStage, opts...).ToFunc()
}

// ByProgress orders the results by the progress field.
func ByProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgress, opts...).ToFunc()
}

// ByCurrentFile orders the results by the current_file field.
func ByCurrentFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentFile, opts...).ToFunc()
}

// ByTotalFiles orders the results by the total_files field.
func ByTotalFiles(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalFiles, opts...).ToFunc()
}

// ByProcessedFiles orders the results by the processed_files field.
func ByProcessedFiles(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessedFiles, opts...).ToFunc()
}

// ByIsComplete orders the results by the is_complete field.
func ByIsComplete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsComplete, opts...).ToFunc()
}

// ByHasError orders the results by the has_error field.
func ByHasError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasError, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByIsCancelled orders the results by the is_cancelled field.
func ByIsCancelled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCancelled, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
	)
}
