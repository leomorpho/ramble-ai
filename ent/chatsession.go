// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ramble-ai/ent/chatsession"
	"ramble-ai/ent/project"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChatSession is the model entity for the ChatSession schema.
type ChatSession struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Unique session identifier
	SessionID string `json:"session_id,omitempty"`
	// ID of the project this session belongs to
	ProjectID int `json:"project_id,omitempty"`
	// Chatbot endpoint identifier (e.g., 'highlight_ordering')
	EndpointID string `json:"endpoint_id,omitempty"`
	// When the session was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// When the session was last updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The AI model selected for this chat session
	SelectedModel string `json:"selected_model,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatSessionQuery when eager-loading is set.
	Edges        ChatSessionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ChatSessionEdges holds the relations/edges for other nodes in the graph.
type ChatSessionEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*ChatMessage `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatSessionEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e ChatSessionEdges) MessagesOrErr() ([]*ChatMessage, error) {
	if e.loadedTypes[1] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatsession.FieldID, chatsession.FieldProjectID:
			values[i] = new(sql.NullInt64)
		case chatsession.FieldSessionID, chatsession.FieldEndpointID, chatsession.FieldSelectedModel:
			values[i] = new(sql.NullString)
		case chatsession.FieldCreatedAt, chatsession.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatSession fields.
func (cs *ChatSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatsession.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int(value.Int64)
		case chatsession.FieldSessionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value.Valid {
				cs.SessionID = value.String
			}
		case chatsession.FieldProjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				cs.ProjectID = int(value.Int64)
			}
		case chatsession.FieldEndpointID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endpoint_id", values[i])
			} else if value.Valid {
				cs.EndpointID = value.String
			}
		case chatsession.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cs.CreatedAt = value.Time
			}
		case chatsession.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cs.UpdatedAt = value.Time
			}
		case chatsession.FieldSelectedModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field selected_model", values[i])
			} else if value.Valid {
				cs.SelectedModel = value.String
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatSession.
// This includes values selected through modifiers, order, etc.
func (cs *ChatSession) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ChatSession entity.
func (cs *ChatSession) QueryProject() *ProjectQuery {
	return NewChatSessionClient(cs.config).QueryProject(cs)
}

// QueryMessages queries the "messages" edge of the ChatSession entity.
func (cs *ChatSession) QueryMessages() *ChatMessageQuery {
	return NewChatSessionClient(cs.config).QueryMessages(cs)
}

// Update returns a builder for updating this ChatSession.
// Note that you need to call ChatSession.Unwrap() before calling this method if this ChatSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *ChatSession) Update() *ChatSessionUpdateOne {
	return NewChatSessionClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the ChatSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *ChatSession) Unwrap() *ChatSession {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatSession is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *ChatSession) String() string {
	var builder strings.Builder
	builder.WriteString("ChatSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("session_id=")
	builder.WriteString(cs.SessionID)
	builder.WriteString(", ")
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", cs.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("endpoint_id=")
	builder.WriteString(cs.EndpointID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("selected_model=")
	builder.WriteString(cs.SelectedModel)
	builder.WriteByte(')')
	return builder.String()
}

// ChatSessions is a parsable slice of ChatSession.
type ChatSessions []*ChatSession
