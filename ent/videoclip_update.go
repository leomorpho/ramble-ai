// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ramble-ai/ent/predicate"
	"ramble-ai/ent/project"
	"ramble-ai/ent/schema"
	"ramble-ai/ent/videoclip"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// VideoClipUpdate is the builder for updating VideoClip entities.
type VideoClipUpdate struct {
	config
	hooks    []Hook
	mutation *VideoClipMutation
}

// Where appends a list predicates to the VideoClipUpdate builder.
func (vcu *VideoClipUpdate) Where(ps ...predicate.VideoClip) *VideoClipUpdate {
	vcu.mutation.Where(ps...)
	return vcu
}

// SetName sets the "name" field.
func (vcu *VideoClipUpdate) SetName(s string) *VideoClipUpdate {
	vcu.mutation.SetName(s)
	return vcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableName(s *string) *VideoClipUpdate {
	if s != nil {
		vcu.SetName(*s)
	}
	return vcu
}

// SetDescription sets the "description" field.
func (vcu *VideoClipUpdate) SetDescription(s string) *VideoClipUpdate {
	vcu.mutation.SetDescription(s)
	return vcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableDescription(s *string) *VideoClipUpdate {
	if s != nil {
		vcu.SetDescription(*s)
	}
	return vcu
}

// ClearDescription clears the value of the "description" field.
func (vcu *VideoClipUpdate) ClearDescription() *VideoClipUpdate {
	vcu.mutation.ClearDescription()
	return vcu
}

// SetFilePath sets the "file_path" field.
func (vcu *VideoClipUpdate) SetFilePath(s string) *VideoClipUpdate {
	vcu.mutation.SetFilePath(s)
	return vcu
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableFilePath(s *string) *VideoClipUpdate {
	if s != nil {
		vcu.SetFilePath(*s)
	}
	return vcu
}

// SetDuration sets the "duration" field.
func (vcu *VideoClipUpdate) SetDuration(f float64) *VideoClipUpdate {
	vcu.mutation.ResetDuration()
	vcu.mutation.SetDuration(f)
	return vcu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableDuration(f *float64) *VideoClipUpdate {
	if f != nil {
		vcu.SetDuration(*f)
	}
	return vcu
}

// AddDuration adds f to the "duration" field.
func (vcu *VideoClipUpdate) AddDuration(f float64) *VideoClipUpdate {
	vcu.mutation.AddDuration(f)
	return vcu
}

// ClearDuration clears the value of the "duration" field.
func (vcu *VideoClipUpdate) ClearDuration() *VideoClipUpdate {
	vcu.mutation.ClearDuration()
	return vcu
}

// SetFormat sets the "format" field.
func (vcu *VideoClipUpdate) SetFormat(s string) *VideoClipUpdate {
	vcu.mutation.SetFormat(s)
	return vcu
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableFormat(s *string) *VideoClipUpdate {
	if s != nil {
		vcu.SetFormat(*s)
	}
	return vcu
}

// ClearFormat clears the value of the "format" field.
func (vcu *VideoClipUpdate) ClearFormat() *VideoClipUpdate {
	vcu.mutation.ClearFormat()
	return vcu
}

// SetWidth sets the "width" field.
func (vcu *VideoClipUpdate) SetWidth(i int) *VideoClipUpdate {
	vcu.mutation.ResetWidth()
	vcu.mutation.SetWidth(i)
	return vcu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableWidth(i *int) *VideoClipUpdate {
	if i != nil {
		vcu.SetWidth(*i)
	}
	return vcu
}

// AddWidth adds i to the "width" field.
func (vcu *VideoClipUpdate) AddWidth(i int) *VideoClipUpdate {
	vcu.mutation.AddWidth(i)
	return vcu
}

// ClearWidth clears the value of the "width" field.
func (vcu *VideoClipUpdate) ClearWidth() *VideoClipUpdate {
	vcu.mutation.ClearWidth()
	return vcu
}

// SetHeight sets the "height" field.
func (vcu *VideoClipUpdate) SetHeight(i int) *VideoClipUpdate {
	vcu.mutation.ResetHeight()
	vcu.mutation.SetHeight(i)
	return vcu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableHeight(i *int) *VideoClipUpdate {
	if i != nil {
		vcu.SetHeight(*i)
	}
	return vcu
}

// AddHeight adds i to the "height" field.
func (vcu *VideoClipUpdate) AddHeight(i int) *VideoClipUpdate {
	vcu.mutation.AddHeight(i)
	return vcu
}

// ClearHeight clears the value of the "height" field.
func (vcu *VideoClipUpdate) ClearHeight() *VideoClipUpdate {
	vcu.mutation.ClearHeight()
	return vcu
}

// SetFileSize sets the "file_size" field.
func (vcu *VideoClipUpdate) SetFileSize(i int64) *VideoClipUpdate {
	vcu.mutation.ResetFileSize()
	vcu.mutation.SetFileSize(i)
	return vcu
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableFileSize(i *int64) *VideoClipUpdate {
	if i != nil {
		vcu.SetFileSize(*i)
	}
	return vcu
}

// AddFileSize adds i to the "file_size" field.
func (vcu *VideoClipUpdate) AddFileSize(i int64) *VideoClipUpdate {
	vcu.mutation.AddFileSize(i)
	return vcu
}

// ClearFileSize clears the value of the "file_size" field.
func (vcu *VideoClipUpdate) ClearFileSize() *VideoClipUpdate {
	vcu.mutation.ClearFileSize()
	return vcu
}

// SetTranscription sets the "transcription" field.
func (vcu *VideoClipUpdate) SetTranscription(s string) *VideoClipUpdate {
	vcu.mutation.SetTranscription(s)
	return vcu
}

// SetNillableTranscription sets the "transcription" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableTranscription(s *string) *VideoClipUpdate {
	if s != nil {
		vcu.SetTranscription(*s)
	}
	return vcu
}

// ClearTranscription clears the value of the "transcription" field.
func (vcu *VideoClipUpdate) ClearTranscription() *VideoClipUpdate {
	vcu.mutation.ClearTranscription()
	return vcu
}

// SetTranscriptionWords sets the "transcription_words" field.
func (vcu *VideoClipUpdate) SetTranscriptionWords(s []schema.Word) *VideoClipUpdate {
	vcu.mutation.SetTranscriptionWords(s)
	return vcu
}

// AppendTranscriptionWords appends s to the "transcription_words" field.
func (vcu *VideoClipUpdate) AppendTranscriptionWords(s []schema.Word) *VideoClipUpdate {
	vcu.mutation.AppendTranscriptionWords(s)
	return vcu
}

// ClearTranscriptionWords clears the value of the "transcription_words" field.
func (vcu *VideoClipUpdate) ClearTranscriptionWords() *VideoClipUpdate {
	vcu.mutation.ClearTranscriptionWords()
	return vcu
}

// SetTranscriptionLanguage sets the "transcription_language" field.
func (vcu *VideoClipUpdate) SetTranscriptionLanguage(s string) *VideoClipUpdate {
	vcu.mutation.SetTranscriptionLanguage(s)
	return vcu
}

// SetNillableTranscriptionLanguage sets the "transcription_language" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableTranscriptionLanguage(s *string) *VideoClipUpdate {
	if s != nil {
		vcu.SetTranscriptionLanguage(*s)
	}
	return vcu
}

// ClearTranscriptionLanguage clears the value of the "transcription_language" field.
func (vcu *VideoClipUpdate) ClearTranscriptionLanguage() *VideoClipUpdate {
	vcu.mutation.ClearTranscriptionLanguage()
	return vcu
}

// SetTranscriptionDuration sets the "transcription_duration" field.
func (vcu *VideoClipUpdate) SetTranscriptionDuration(f float64) *VideoClipUpdate {
	vcu.mutation.ResetTranscriptionDuration()
	vcu.mutation.SetTranscriptionDuration(f)
	return vcu
}

// SetNillableTranscriptionDuration sets the "transcription_duration" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableTranscriptionDuration(f *float64) *VideoClipUpdate {
	if f != nil {
		vcu.SetTranscriptionDuration(*f)
	}
	return vcu
}

// AddTranscriptionDuration adds f to the "transcription_duration" field.
func (vcu *VideoClipUpdate) AddTranscriptionDuration(f float64) *VideoClipUpdate {
	vcu.mutation.AddTranscriptionDuration(f)
	return vcu
}

// ClearTranscriptionDuration clears the value of the "transcription_duration" field.
func (vcu *VideoClipUpdate) ClearTranscriptionDuration() *VideoClipUpdate {
	vcu.mutation.ClearTranscriptionDuration()
	return vcu
}

// SetHighlights sets the "highlights" field.
func (vcu *VideoClipUpdate) SetHighlights(s []schema.Highlight) *VideoClipUpdate {
	vcu.mutation.SetHighlights(s)
	return vcu
}

// AppendHighlights appends s to the "highlights" field.
func (vcu *VideoClipUpdate) AppendHighlights(s []schema.Highlight) *VideoClipUpdate {
	vcu.mutation.AppendHighlights(s)
	return vcu
}

// ClearHighlights clears the value of the "highlights" field.
func (vcu *VideoClipUpdate) ClearHighlights() *VideoClipUpdate {
	vcu.mutation.ClearHighlights()
	return vcu
}

// SetSuggestedHighlights sets the "suggested_highlights" field.
func (vcu *VideoClipUpdate) SetSuggestedHighlights(s []schema.Highlight) *VideoClipUpdate {
	vcu.mutation.SetSuggestedHighlights(s)
	return vcu
}

// AppendSuggestedHighlights appends s to the "suggested_highlights" field.
func (vcu *VideoClipUpdate) AppendSuggestedHighlights(s []schema.Highlight) *VideoClipUpdate {
	vcu.mutation.AppendSuggestedHighlights(s)
	return vcu
}

// ClearSuggestedHighlights clears the value of the "suggested_highlights" field.
func (vcu *VideoClipUpdate) ClearSuggestedHighlights() *VideoClipUpdate {
	vcu.mutation.ClearSuggestedHighlights()
	return vcu
}

// SetCreatedAt sets the "created_at" field.
func (vcu *VideoClipUpdate) SetCreatedAt(t time.Time) *VideoClipUpdate {
	vcu.mutation.SetCreatedAt(t)
	return vcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableCreatedAt(t *time.Time) *VideoClipUpdate {
	if t != nil {
		vcu.SetCreatedAt(*t)
	}
	return vcu
}

// SetUpdatedAt sets the "updated_at" field.
func (vcu *VideoClipUpdate) SetUpdatedAt(t time.Time) *VideoClipUpdate {
	vcu.mutation.SetUpdatedAt(t)
	return vcu
}

// SetHighlightsHistory sets the "highlights_history" field.
func (vcu *VideoClipUpdate) SetHighlightsHistory(s [][]schema.Highlight) *VideoClipUpdate {
	vcu.mutation.SetHighlightsHistory(s)
	return vcu
}

// AppendHighlightsHistory appends s to the "highlights_history" field.
func (vcu *VideoClipUpdate) AppendHighlightsHistory(s [][]schema.Highlight) *VideoClipUpdate {
	vcu.mutation.AppendHighlightsHistory(s)
	return vcu
}

// ClearHighlightsHistory clears the value of the "highlights_history" field.
func (vcu *VideoClipUpdate) ClearHighlightsHistory() *VideoClipUpdate {
	vcu.mutation.ClearHighlightsHistory()
	return vcu
}

// SetHighlightsHistoryIndex sets the "highlights_history_index" field.
func (vcu *VideoClipUpdate) SetHighlightsHistoryIndex(i int) *VideoClipUpdate {
	vcu.mutation.ResetHighlightsHistoryIndex()
	vcu.mutation.SetHighlightsHistoryIndex(i)
	return vcu
}

// SetNillableHighlightsHistoryIndex sets the "highlights_history_index" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableHighlightsHistoryIndex(i *int) *VideoClipUpdate {
	if i != nil {
		vcu.SetHighlightsHistoryIndex(*i)
	}
	return vcu
}

// AddHighlightsHistoryIndex adds i to the "highlights_history_index" field.
func (vcu *VideoClipUpdate) AddHighlightsHistoryIndex(i int) *VideoClipUpdate {
	vcu.mutation.AddHighlightsHistoryIndex(i)
	return vcu
}

// ClearHighlightsHistoryIndex clears the value of the "highlights_history_index" field.
func (vcu *VideoClipUpdate) ClearHighlightsHistoryIndex() *VideoClipUpdate {
	vcu.mutation.ClearHighlightsHistoryIndex()
	return vcu
}

// SetTranscriptionState sets the "transcription_state" field.
func (vcu *VideoClipUpdate) SetTranscriptionState(s string) *VideoClipUpdate {
	vcu.mutation.SetTranscriptionState(s)
	return vcu
}

// SetNillableTranscriptionState sets the "transcription_state" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableTranscriptionState(s *string) *VideoClipUpdate {
	if s != nil {
		vcu.SetTranscriptionState(*s)
	}
	return vcu
}

// ClearTranscriptionState clears the value of the "transcription_state" field.
func (vcu *VideoClipUpdate) ClearTranscriptionState() *VideoClipUpdate {
	vcu.mutation.ClearTranscriptionState()
	return vcu
}

// SetTranscriptionError sets the "transcription_error" field.
func (vcu *VideoClipUpdate) SetTranscriptionError(s string) *VideoClipUpdate {
	vcu.mutation.SetTranscriptionError(s)
	return vcu
}

// SetNillableTranscriptionError sets the "transcription_error" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableTranscriptionError(s *string) *VideoClipUpdate {
	if s != nil {
		vcu.SetTranscriptionError(*s)
	}
	return vcu
}

// ClearTranscriptionError clears the value of the "transcription_error" field.
func (vcu *VideoClipUpdate) ClearTranscriptionError() *VideoClipUpdate {
	vcu.mutation.ClearTranscriptionError()
	return vcu
}

// SetTranscriptionStartedAt sets the "transcription_started_at" field.
func (vcu *VideoClipUpdate) SetTranscriptionStartedAt(t time.Time) *VideoClipUpdate {
	vcu.mutation.SetTranscriptionStartedAt(t)
	return vcu
}

// SetNillableTranscriptionStartedAt sets the "transcription_started_at" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableTranscriptionStartedAt(t *time.Time) *VideoClipUpdate {
	if t != nil {
		vcu.SetTranscriptionStartedAt(*t)
	}
	return vcu
}

// ClearTranscriptionStartedAt clears the value of the "transcription_started_at" field.
func (vcu *VideoClipUpdate) ClearTranscriptionStartedAt() *VideoClipUpdate {
	vcu.mutation.ClearTranscriptionStartedAt()
	return vcu
}

// SetTranscriptionCompletedAt sets the "transcription_completed_at" field.
func (vcu *VideoClipUpdate) SetTranscriptionCompletedAt(t time.Time) *VideoClipUpdate {
	vcu.mutation.SetTranscriptionCompletedAt(t)
	return vcu
}

// SetNillableTranscriptionCompletedAt sets the "transcription_completed_at" field if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableTranscriptionCompletedAt(t *time.Time) *VideoClipUpdate {
	if t != nil {
		vcu.SetTranscriptionCompletedAt(*t)
	}
	return vcu
}

// ClearTranscriptionCompletedAt clears the value of the "transcription_completed_at" field.
func (vcu *VideoClipUpdate) ClearTranscriptionCompletedAt() *VideoClipUpdate {
	vcu.mutation.ClearTranscriptionCompletedAt()
	return vcu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (vcu *VideoClipUpdate) SetProjectID(id int) *VideoClipUpdate {
	vcu.mutation.SetProjectID(id)
	return vcu
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (vcu *VideoClipUpdate) SetNillableProjectID(id *int) *VideoClipUpdate {
	if id != nil {
		vcu = vcu.SetProjectID(*id)
	}
	return vcu
}

// SetProject sets the "project" edge to the Project entity.
func (vcu *VideoClipUpdate) SetProject(p *Project) *VideoClipUpdate {
	return vcu.SetProjectID(p.ID)
}

// Mutation returns the VideoClipMutation object of the builder.
func (vcu *VideoClipUpdate) Mutation() *VideoClipMutation {
	return vcu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (vcu *VideoClipUpdate) ClearProject() *VideoClipUpdate {
	vcu.mutation.ClearProject()
	return vcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vcu *VideoClipUpdate) Save(ctx context.Context) (int, error) {
	vcu.defaults()
	return withHooks(ctx, vcu.sqlSave, vcu.mutation, vcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vcu *VideoClipUpdate) SaveX(ctx context.Context) int {
	affected, err := vcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vcu *VideoClipUpdate) Exec(ctx context.Context) error {
	_, err := vcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcu *VideoClipUpdate) ExecX(ctx context.Context) {
	if err := vcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vcu *VideoClipUpdate) defaults() {
	if _, ok := vcu.mutation.UpdatedAt(); !ok {
		v := videoclip.UpdateDefaultUpdatedAt()
		vcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vcu *VideoClipUpdate) check() error {
	if v, ok := vcu.mutation.Name(); ok {
		if err := videoclip.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "VideoClip.name": %w`, err)}
		}
	}
	if v, ok := vcu.mutation.FilePath(); ok {
		if err := videoclip.FilePathValidator(v); err != nil {
			return &ValidationError{Name: "file_path", err: fmt.Errorf(`ent: validator failed for field "VideoClip.file_path": %w`, err)}
		}
	}
	return nil
}

func (vcu *VideoClipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(videoclip.Table, videoclip.Columns, sqlgraph.NewFieldSpec(videoclip.FieldID, field.TypeInt))
	if ps := vcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vcu.mutation.Name(); ok {
		_spec.SetField(videoclip.FieldName, field.TypeString, value)
	}
	if value, ok := vcu.mutation.Description(); ok {
		_spec.SetField(videoclip.FieldDescription, field.TypeString, value)
	}
	if vcu.mutation.DescriptionCleared() {
		_spec.ClearField(videoclip.FieldDescription, field.TypeString)
	}
	if value, ok := vcu.mutation.FilePath(); ok {
		_spec.SetField(videoclip.FieldFilePath, field.TypeString, value)
	}
	if value, ok := vcu.mutation.Duration(); ok {
		_spec.SetField(videoclip.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := vcu.mutation.AddedDuration(); ok {
		_spec.AddField(videoclip.FieldDuration, field.TypeFloat64, value)
	}
	if vcu.mutation.DurationCleared() {
		_spec.ClearField(videoclip.FieldDuration, field.TypeFloat64)
	}
	if value, ok := vcu.mutation.Format(); ok {
		_spec.SetField(videoclip.FieldFormat, field.TypeString, value)
	}
	if vcu.mutation.FormatCleared() {
		_spec.ClearField(videoclip.FieldFormat, field.TypeString)
	}
	if value, ok := vcu.mutation.Width(); ok {
		_spec.SetField(videoclip.FieldWidth, field.TypeInt, value)
	}
	if value, ok := vcu.mutation.AddedWidth(); ok {
		_spec.AddField(videoclip.FieldWidth, field.TypeInt, value)
	}
	if vcu.mutation.WidthCleared() {
		_spec.ClearField(videoclip.FieldWidth, field.TypeInt)
	}
	if value, ok := vcu.mutation.Height(); ok {
		_spec.SetField(videoclip.FieldHeight, field.TypeInt, value)
	}
	if value, ok := vcu.mutation.AddedHeight(); ok {
		_spec.AddField(videoclip.FieldHeight, field.TypeInt, value)
	}
	if vcu.mutation.HeightCleared() {
		_spec.ClearField(videoclip.FieldHeight, field.TypeInt)
	}
	if value, ok := vcu.mutation.FileSize(); ok {
		_spec.SetField(videoclip.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := vcu.mutation.AddedFileSize(); ok {
		_spec.AddField(videoclip.FieldFileSize, field.TypeInt64, value)
	}
	if vcu.mutation.FileSizeCleared() {
		_spec.ClearField(videoclip.FieldFileSize, field.TypeInt64)
	}
	if value, ok := vcu.mutation.Transcription(); ok {
		_spec.SetField(videoclip.FieldTranscription, field.TypeString, value)
	}
	if vcu.mutation.TranscriptionCleared() {
		_spec.ClearField(videoclip.FieldTranscription, field.TypeString)
	}
	if value, ok := vcu.mutation.TranscriptionWords(); ok {
		_spec.SetField(videoclip.FieldTranscriptionWords, field.TypeJSON, value)
	}
	if value, ok := vcu.mutation.AppendedTranscriptionWords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, videoclip.FieldTranscriptionWords, value)
		})
	}
	if vcu.mutation.TranscriptionWordsCleared() {
		_spec.ClearField(videoclip.FieldTranscriptionWords, field.TypeJSON)
	}
	if value, ok := vcu.mutation.TranscriptionLanguage(); ok {
		_spec.SetField(videoclip.FieldTranscriptionLanguage, field.TypeString, value)
	}
	if vcu.mutation.TranscriptionLanguageCleared() {
		_spec.ClearField(videoclip.FieldTranscriptionLanguage, field.TypeString)
	}
	if value, ok := vcu.mutation.TranscriptionDuration(); ok {
		_spec.SetField(videoclip.FieldTranscriptionDuration, field.TypeFloat64, value)
	}
	if value, ok := vcu.mutation.AddedTranscriptionDuration(); ok {
		_spec.AddField(videoclip.FieldTranscriptionDuration, field.TypeFloat64, value)
	}
	if vcu.mutation.TranscriptionDurationCleared() {
		_spec.ClearField(videoclip.FieldTranscriptionDuration, field.TypeFloat64)
	}
	if value, ok := vcu.mutation.Highlights(); ok {
		_spec.SetField(videoclip.FieldHighlights, field.TypeJSON, value)
	}
	if value, ok := vcu.mutation.AppendedHighlights(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, videoclip.FieldHighlights, value)
		})
	}
	if vcu.mutation.HighlightsCleared() {
		_spec.ClearField(videoclip.FieldHighlights, field.TypeJSON)
	}
	if value, ok := vcu.mutation.SuggestedHighlights(); ok {
		_spec.SetField(videoclip.FieldSuggestedHighlights, field.TypeJSON, value)
	}
	if value, ok := vcu.mutation.AppendedSuggestedHighlights(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, videoclip.FieldSuggestedHighlights, value)
		})
	}
	if vcu.mutation.SuggestedHighlightsCleared() {
		_spec.ClearField(videoclip.FieldSuggestedHighlights, field.TypeJSON)
	}
	if value, ok := vcu.mutation.CreatedAt(); ok {
		_spec.SetField(videoclip.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vcu.mutation.UpdatedAt(); ok {
		_spec.SetField(videoclip.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vcu.mutation.HighlightsHistory(); ok {
		_spec.SetField(videoclip.FieldHighlightsHistory, field.TypeJSON, value)
	}
	if value, ok := vcu.mutation.AppendedHighlightsHistory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, videoclip.FieldHighlightsHistory, value)
		})
	}
	if vcu.mutation.HighlightsHistoryCleared() {
		_spec.ClearField(videoclip.FieldHighlightsHistory, field.TypeJSON)
	}
	if value, ok := vcu.mutation.HighlightsHistoryIndex(); ok {
		_spec.SetField(videoclip.FieldHighlightsHistoryIndex, field.TypeInt, value)
	}
	if value, ok := vcu.mutation.AddedHighlightsHistoryIndex(); ok {
		_spec.AddField(videoclip.FieldHighlightsHistoryIndex, field.TypeInt, value)
	}
	if vcu.mutation.HighlightsHistoryIndexCleared() {
		_spec.ClearField(videoclip.FieldHighlightsHistoryIndex, field.TypeInt)
	}
	if value, ok := vcu.mutation.TranscriptionState(); ok {
		_spec.SetField(videoclip.FieldTranscriptionState, field.TypeString, value)
	}
	if vcu.mutation.TranscriptionStateCleared() {
		_spec.ClearField(videoclip.FieldTranscriptionState, field.TypeString)
	}
	if value, ok := vcu.mutation.TranscriptionError(); ok {
		_spec.SetField(videoclip.FieldTranscriptionError, field.TypeString, value)
	}
	if vcu.mutation.TranscriptionErrorCleared() {
		_spec.ClearField(videoclip.FieldTranscriptionError, field.TypeString)
	}
	if value, ok := vcu.mutation.TranscriptionStartedAt(); ok {
		_spec.SetField(videoclip.FieldTranscriptionStartedAt, field.TypeTime, value)
	}
	if vcu.mutation.TranscriptionStartedAtCleared() {
		_spec.ClearField(videoclip.FieldTranscriptionStartedAt, field.TypeTime)
	}
	if value, ok := vcu.mutation.TranscriptionCompletedAt(); ok {
		_spec.SetField(videoclip.FieldTranscriptionCompletedAt, field.TypeTime, value)
	}
	if vcu.mutation.TranscriptionCompletedAtCleared() {
		_spec.ClearField(videoclip.FieldTranscriptionCompletedAt, field.TypeTime)
	}
	if vcu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoclip.ProjectTable,
			Columns: []string{videoclip.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoclip.ProjectTable,
			Columns: []string{videoclip.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videoclip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vcu.mutation.done = true
	return n, nil
}

// VideoClipUpdateOne is the builder for updating a single VideoClip entity.
type VideoClipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoClipMutation
}

// SetName sets the "name" field.
func (vcuo *VideoClipUpdateOne) SetName(s string) *VideoClipUpdateOne {
	vcuo.mutation.SetName(s)
	return vcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableName(s *string) *VideoClipUpdateOne {
	if s != nil {
		vcuo.SetName(*s)
	}
	return vcuo
}

// SetDescription sets the "description" field.
func (vcuo *VideoClipUpdateOne) SetDescription(s string) *VideoClipUpdateOne {
	vcuo.mutation.SetDescription(s)
	return vcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableDescription(s *string) *VideoClipUpdateOne {
	if s != nil {
		vcuo.SetDescription(*s)
	}
	return vcuo
}

// ClearDescription clears the value of the "description" field.
func (vcuo *VideoClipUpdateOne) ClearDescription() *VideoClipUpdateOne {
	vcuo.mutation.ClearDescription()
	return vcuo
}

// SetFilePath sets the "file_path" field.
func (vcuo *VideoClipUpdateOne) SetFilePath(s string) *VideoClipUpdateOne {
	vcuo.mutation.SetFilePath(s)
	return vcuo
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableFilePath(s *string) *VideoClipUpdateOne {
	if s != nil {
		vcuo.SetFilePath(*s)
	}
	return vcuo
}

// SetDuration sets the "duration" field.
func (vcuo *VideoClipUpdateOne) SetDuration(f float64) *VideoClipUpdateOne {
	vcuo.mutation.ResetDuration()
	vcuo.mutation.SetDuration(f)
	return vcuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableDuration(f *float64) *VideoClipUpdateOne {
	if f != nil {
		vcuo.SetDuration(*f)
	}
	return vcuo
}

// AddDuration adds f to the "duration" field.
func (vcuo *VideoClipUpdateOne) AddDuration(f float64) *VideoClipUpdateOne {
	vcuo.mutation.AddDuration(f)
	return vcuo
}

// ClearDuration clears the value of the "duration" field.
func (vcuo *VideoClipUpdateOne) ClearDuration() *VideoClipUpdateOne {
	vcuo.mutation.ClearDuration()
	return vcuo
}

// SetFormat sets the "format" field.
func (vcuo *VideoClipUpdateOne) SetFormat(s string) *VideoClipUpdateOne {
	vcuo.mutation.SetFormat(s)
	return vcuo
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableFormat(s *string) *VideoClipUpdateOne {
	if s != nil {
		vcuo.SetFormat(*s)
	}
	return vcuo
}

// ClearFormat clears the value of the "format" field.
func (vcuo *VideoClipUpdateOne) ClearFormat() *VideoClipUpdateOne {
	vcuo.mutation.ClearFormat()
	return vcuo
}

// SetWidth sets the "width" field.
func (vcuo *VideoClipUpdateOne) SetWidth(i int) *VideoClipUpdateOne {
	vcuo.mutation.ResetWidth()
	vcuo.mutation.SetWidth(i)
	return vcuo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableWidth(i *int) *VideoClipUpdateOne {
	if i != nil {
		vcuo.SetWidth(*i)
	}
	return vcuo
}

// AddWidth adds i to the "width" field.
func (vcuo *VideoClipUpdateOne) AddWidth(i int) *VideoClipUpdateOne {
	vcuo.mutation.AddWidth(i)
	return vcuo
}

// ClearWidth clears the value of the "width" field.
func (vcuo *VideoClipUpdateOne) ClearWidth() *VideoClipUpdateOne {
	vcuo.mutation.ClearWidth()
	return vcuo
}

// SetHeight sets the "height" field.
func (vcuo *VideoClipUpdateOne) SetHeight(i int) *VideoClipUpdateOne {
	vcuo.mutation.ResetHeight()
	vcuo.mutation.SetHeight(i)
	return vcuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableHeight(i *int) *VideoClipUpdateOne {
	if i != nil {
		vcuo.SetHeight(*i)
	}
	return vcuo
}

// AddHeight adds i to the "height" field.
func (vcuo *VideoClipUpdateOne) AddHeight(i int) *VideoClipUpdateOne {
	vcuo.mutation.AddHeight(i)
	return vcuo
}

// ClearHeight clears the value of the "height" field.
func (vcuo *VideoClipUpdateOne) ClearHeight() *VideoClipUpdateOne {
	vcuo.mutation.ClearHeight()
	return vcuo
}

// SetFileSize sets the "file_size" field.
func (vcuo *VideoClipUpdateOne) SetFileSize(i int64) *VideoClipUpdateOne {
	vcuo.mutation.ResetFileSize()
	vcuo.mutation.SetFileSize(i)
	return vcuo
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableFileSize(i *int64) *VideoClipUpdateOne {
	if i != nil {
		vcuo.SetFileSize(*i)
	}
	return vcuo
}

// AddFileSize adds i to the "file_size" field.
func (vcuo *VideoClipUpdateOne) AddFileSize(i int64) *VideoClipUpdateOne {
	vcuo.mutation.AddFileSize(i)
	return vcuo
}

// ClearFileSize clears the value of the "file_size" field.
func (vcuo *VideoClipUpdateOne) ClearFileSize() *VideoClipUpdateOne {
	vcuo.mutation.ClearFileSize()
	return vcuo
}

// SetTranscription sets the "transcription" field.
func (vcuo *VideoClipUpdateOne) SetTranscription(s string) *VideoClipUpdateOne {
	vcuo.mutation.SetTranscription(s)
	return vcuo
}

// SetNillableTranscription sets the "transcription" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableTranscription(s *string) *VideoClipUpdateOne {
	if s != nil {
		vcuo.SetTranscription(*s)
	}
	return vcuo
}

// ClearTranscription clears the value of the "transcription" field.
func (vcuo *VideoClipUpdateOne) ClearTranscription() *VideoClipUpdateOne {
	vcuo.mutation.ClearTranscription()
	return vcuo
}

// SetTranscriptionWords sets the "transcription_words" field.
func (vcuo *VideoClipUpdateOne) SetTranscriptionWords(s []schema.Word) *VideoClipUpdateOne {
	vcuo.mutation.SetTranscriptionWords(s)
	return vcuo
}

// AppendTranscriptionWords appends s to the "transcription_words" field.
func (vcuo *VideoClipUpdateOne) AppendTranscriptionWords(s []schema.Word) *VideoClipUpdateOne {
	vcuo.mutation.AppendTranscriptionWords(s)
	return vcuo
}

// ClearTranscriptionWords clears the value of the "transcription_words" field.
func (vcuo *VideoClipUpdateOne) ClearTranscriptionWords() *VideoClipUpdateOne {
	vcuo.mutation.ClearTranscriptionWords()
	return vcuo
}

// SetTranscriptionLanguage sets the "transcription_language" field.
func (vcuo *VideoClipUpdateOne) SetTranscriptionLanguage(s string) *VideoClipUpdateOne {
	vcuo.mutation.SetTranscriptionLanguage(s)
	return vcuo
}

// SetNillableTranscriptionLanguage sets the "transcription_language" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableTranscriptionLanguage(s *string) *VideoClipUpdateOne {
	if s != nil {
		vcuo.SetTranscriptionLanguage(*s)
	}
	return vcuo
}

// ClearTranscriptionLanguage clears the value of the "transcription_language" field.
func (vcuo *VideoClipUpdateOne) ClearTranscriptionLanguage() *VideoClipUpdateOne {
	vcuo.mutation.ClearTranscriptionLanguage()
	return vcuo
}

// SetTranscriptionDuration sets the "transcription_duration" field.
func (vcuo *VideoClipUpdateOne) SetTranscriptionDuration(f float64) *VideoClipUpdateOne {
	vcuo.mutation.ResetTranscriptionDuration()
	vcuo.mutation.SetTranscriptionDuration(f)
	return vcuo
}

// SetNillableTranscriptionDuration sets the "transcription_duration" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableTranscriptionDuration(f *float64) *VideoClipUpdateOne {
	if f != nil {
		vcuo.SetTranscriptionDuration(*f)
	}
	return vcuo
}

// AddTranscriptionDuration adds f to the "transcription_duration" field.
func (vcuo *VideoClipUpdateOne) AddTranscriptionDuration(f float64) *VideoClipUpdateOne {
	vcuo.mutation.AddTranscriptionDuration(f)
	return vcuo
}

// ClearTranscriptionDuration clears the value of the "transcription_duration" field.
func (vcuo *VideoClipUpdateOne) ClearTranscriptionDuration() *VideoClipUpdateOne {
	vcuo.mutation.ClearTranscriptionDuration()
	return vcuo
}

// SetHighlights sets the "highlights" field.
func (vcuo *VideoClipUpdateOne) SetHighlights(s []schema.Highlight) *VideoClipUpdateOne {
	vcuo.mutation.SetHighlights(s)
	return vcuo
}

// AppendHighlights appends s to the "highlights" field.
func (vcuo *VideoClipUpdateOne) AppendHighlights(s []schema.Highlight) *VideoClipUpdateOne {
	vcuo.mutation.AppendHighlights(s)
	return vcuo
}

// ClearHighlights clears the value of the "highlights" field.
func (vcuo *VideoClipUpdateOne) ClearHighlights() *VideoClipUpdateOne {
	vcuo.mutation.ClearHighlights()
	return vcuo
}

// SetSuggestedHighlights sets the "suggested_highlights" field.
func (vcuo *VideoClipUpdateOne) SetSuggestedHighlights(s []schema.Highlight) *VideoClipUpdateOne {
	vcuo.mutation.SetSuggestedHighlights(s)
	return vcuo
}

// AppendSuggestedHighlights appends s to the "suggested_highlights" field.
func (vcuo *VideoClipUpdateOne) AppendSuggestedHighlights(s []schema.Highlight) *VideoClipUpdateOne {
	vcuo.mutation.AppendSuggestedHighlights(s)
	return vcuo
}

// ClearSuggestedHighlights clears the value of the "suggested_highlights" field.
func (vcuo *VideoClipUpdateOne) ClearSuggestedHighlights() *VideoClipUpdateOne {
	vcuo.mutation.ClearSuggestedHighlights()
	return vcuo
}

// SetCreatedAt sets the "created_at" field.
func (vcuo *VideoClipUpdateOne) SetCreatedAt(t time.Time) *VideoClipUpdateOne {
	vcuo.mutation.SetCreatedAt(t)
	return vcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableCreatedAt(t *time.Time) *VideoClipUpdateOne {
	if t != nil {
		vcuo.SetCreatedAt(*t)
	}
	return vcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vcuo *VideoClipUpdateOne) SetUpdatedAt(t time.Time) *VideoClipUpdateOne {
	vcuo.mutation.SetUpdatedAt(t)
	return vcuo
}

// SetHighlightsHistory sets the "highlights_history" field.
func (vcuo *VideoClipUpdateOne) SetHighlightsHistory(s [][]schema.Highlight) *VideoClipUpdateOne {
	vcuo.mutation.SetHighlightsHistory(s)
	return vcuo
}

// AppendHighlightsHistory appends s to the "highlights_history" field.
func (vcuo *VideoClipUpdateOne) AppendHighlightsHistory(s [][]schema.Highlight) *VideoClipUpdateOne {
	vcuo.mutation.AppendHighlightsHistory(s)
	return vcuo
}

// ClearHighlightsHistory clears the value of the "highlights_history" field.
func (vcuo *VideoClipUpdateOne) ClearHighlightsHistory() *VideoClipUpdateOne {
	vcuo.mutation.ClearHighlightsHistory()
	return vcuo
}

// SetHighlightsHistoryIndex sets the "highlights_history_index" field.
func (vcuo *VideoClipUpdateOne) SetHighlightsHistoryIndex(i int) *VideoClipUpdateOne {
	vcuo.mutation.ResetHighlightsHistoryIndex()
	vcuo.mutation.SetHighlightsHistoryIndex(i)
	return vcuo
}

// SetNillableHighlightsHistoryIndex sets the "highlights_history_index" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableHighlightsHistoryIndex(i *int) *VideoClipUpdateOne {
	if i != nil {
		vcuo.SetHighlightsHistoryIndex(*i)
	}
	return vcuo
}

// AddHighlightsHistoryIndex adds i to the "highlights_history_index" field.
func (vcuo *VideoClipUpdateOne) AddHighlightsHistoryIndex(i int) *VideoClipUpdateOne {
	vcuo.mutation.AddHighlightsHistoryIndex(i)
	return vcuo
}

// ClearHighlightsHistoryIndex clears the value of the "highlights_history_index" field.
func (vcuo *VideoClipUpdateOne) ClearHighlightsHistoryIndex() *VideoClipUpdateOne {
	vcuo.mutation.ClearHighlightsHistoryIndex()
	return vcuo
}

// SetTranscriptionState sets the "transcription_state" field.
func (vcuo *VideoClipUpdateOne) SetTranscriptionState(s string) *VideoClipUpdateOne {
	vcuo.mutation.SetTranscriptionState(s)
	return vcuo
}

// SetNillableTranscriptionState sets the "transcription_state" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableTranscriptionState(s *string) *VideoClipUpdateOne {
	if s != nil {
		vcuo.SetTranscriptionState(*s)
	}
	return vcuo
}

// ClearTranscriptionState clears the value of the "transcription_state" field.
func (vcuo *VideoClipUpdateOne) ClearTranscriptionState() *VideoClipUpdateOne {
	vcuo.mutation.ClearTranscriptionState()
	return vcuo
}

// SetTranscriptionError sets the "transcription_error" field.
func (vcuo *VideoClipUpdateOne) SetTranscriptionError(s string) *VideoClipUpdateOne {
	vcuo.mutation.SetTranscriptionError(s)
	return vcuo
}

// SetNillableTranscriptionError sets the "transcription_error" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableTranscriptionError(s *string) *VideoClipUpdateOne {
	if s != nil {
		vcuo.SetTranscriptionError(*s)
	}
	return vcuo
}

// ClearTranscriptionError clears the value of the "transcription_error" field.
func (vcuo *VideoClipUpdateOne) ClearTranscriptionError() *VideoClipUpdateOne {
	vcuo.mutation.ClearTranscriptionError()
	return vcuo
}

// SetTranscriptionStartedAt sets the "transcription_started_at" field.
func (vcuo *VideoClipUpdateOne) SetTranscriptionStartedAt(t time.Time) *VideoClipUpdateOne {
	vcuo.mutation.SetTranscriptionStartedAt(t)
	return vcuo
}

// SetNillableTranscriptionStartedAt sets the "transcription_started_at" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableTranscriptionStartedAt(t *time.Time) *VideoClipUpdateOne {
	if t != nil {
		vcuo.SetTranscriptionStartedAt(*t)
	}
	return vcuo
}

// ClearTranscriptionStartedAt clears the value of the "transcription_started_at" field.
func (vcuo *VideoClipUpdateOne) ClearTranscriptionStartedAt() *VideoClipUpdateOne {
	vcuo.mutation.ClearTranscriptionStartedAt()
	return vcuo
}

// SetTranscriptionCompletedAt sets the "transcription_completed_at" field.
func (vcuo *VideoClipUpdateOne) SetTranscriptionCompletedAt(t time.Time) *VideoClipUpdateOne {
	vcuo.mutation.SetTranscriptionCompletedAt(t)
	return vcuo
}

// SetNillableTranscriptionCompletedAt sets the "transcription_completed_at" field if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableTranscriptionCompletedAt(t *time.Time) *VideoClipUpdateOne {
	if t != nil {
		vcuo.SetTranscriptionCompletedAt(*t)
	}
	return vcuo
}

// ClearTranscriptionCompletedAt clears the value of the "transcription_completed_at" field.
func (vcuo *VideoClipUpdateOne) ClearTranscriptionCompletedAt() *VideoClipUpdateOne {
	vcuo.mutation.ClearTranscriptionCompletedAt()
	return vcuo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (vcuo *VideoClipUpdateOne) SetProjectID(id int) *VideoClipUpdateOne {
	vcuo.mutation.SetProjectID(id)
	return vcuo
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (vcuo *VideoClipUpdateOne) SetNillableProjectID(id *int) *VideoClipUpdateOne {
	if id != nil {
		vcuo = vcuo.SetProjectID(*id)
	}
	return vcuo
}

// SetProject sets the "project" edge to the Project entity.
func (vcuo *VideoClipUpdateOne) SetProject(p *Project) *VideoClipUpdateOne {
	return vcuo.SetProjectID(p.ID)
}

// Mutation returns the VideoClipMutation object of the builder.
func (vcuo *VideoClipUpdateOne) Mutation() *VideoClipMutation {
	return vcuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (vcuo *VideoClipUpdateOne) ClearProject() *VideoClipUpdateOne {
	vcuo.mutation.ClearProject()
	return vcuo
}

// Where appends a list predicates to the VideoClipUpdate builder.
func (vcuo *VideoClipUpdateOne) Where(ps ...predicate.VideoClip) *VideoClipUpdateOne {
	vcuo.mutation.Where(ps...)
	return vcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vcuo *VideoClipUpdateOne) Select(field string, fields ...string) *VideoClipUpdateOne {
	vcuo.fields = append([]string{field}, fields...)
	return vcuo
}

// Save executes the query and returns the updated VideoClip entity.
func (vcuo *VideoClipUpdateOne) Save(ctx context.Context) (*VideoClip, error) {
	vcuo.defaults()
	return withHooks(ctx, vcuo.sqlSave, vcuo.mutation, vcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vcuo *VideoClipUpdateOne) SaveX(ctx context.Context) *VideoClip {
	node, err := vcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vcuo *VideoClipUpdateOne) Exec(ctx context.Context) error {
	_, err := vcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcuo *VideoClipUpdateOne) ExecX(ctx context.Context) {
	if err := vcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vcuo *VideoClipUpdateOne) defaults() {
	if _, ok := vcuo.mutation.UpdatedAt(); !ok {
		v := videoclip.UpdateDefaultUpdatedAt()
		vcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vcuo *VideoClipUpdateOne) check() error {
	if v, ok := vcuo.mutation.Name(); ok {
		if err := videoclip.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "VideoClip.name": %w`, err)}
		}
	}
	if v, ok := vcuo.mutation.FilePath(); ok {
		if err := videoclip.FilePathValidator(v); err != nil {
			return &ValidationError{Name: "file_path", err: fmt.Errorf(`ent: validator failed for field "VideoClip.file_path": %w`, err)}
		}
	}
	return nil
}

func (vcuo *VideoClipUpdateOne) sqlSave(ctx context.Context) (_node *VideoClip, err error) {
	if err := vcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(videoclip.Table, videoclip.Columns, sqlgraph.NewFieldSpec(videoclip.FieldID, field.TypeInt))
	id, ok := vcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VideoClip.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videoclip.FieldID)
		for _, f := range fields {
			if !videoclip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != videoclip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vcuo.mutation.Name(); ok {
		_spec.SetField(videoclip.FieldName, field.TypeString, value)
	}
	if value, ok := vcuo.mutation.Description(); ok {
		_spec.SetField(videoclip.FieldDescription, field.TypeString, value)
	}
	if vcuo.mutation.DescriptionCleared() {
		_spec.ClearField(videoclip.FieldDescription, field.TypeString)
	}
	if value, ok := vcuo.mutation.FilePath(); ok {
		_spec.SetField(videoclip.FieldFilePath, field.TypeString, value)
	}
	if value, ok := vcuo.mutation.Duration(); ok {
		_spec.SetField(videoclip.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := vcuo.mutation.AddedDuration(); ok {
		_spec.AddField(videoclip.FieldDuration, field.TypeFloat64, value)
	}
	if vcuo.mutation.DurationCleared() {
		_spec.ClearField(videoclip.FieldDuration, field.TypeFloat64)
	}
	if value, ok := vcuo.mutation.Format(); ok {
		_spec.SetField(videoclip.FieldFormat, field.TypeString, value)
	}
	if vcuo.mutation.FormatCleared() {
		_spec.ClearField(videoclip.FieldFormat, field.TypeString)
	}
	if value, ok := vcuo.mutation.Width(); ok {
		_spec.SetField(videoclip.FieldWidth, field.TypeInt, value)
	}
	if value, ok := vcuo.mutation.AddedWidth(); ok {
		_spec.AddField(videoclip.FieldWidth, field.TypeInt, value)
	}
	if vcuo.mutation.WidthCleared() {
		_spec.ClearField(videoclip.FieldWidth, field.TypeInt)
	}
	if value, ok := vcuo.mutation.Height(); ok {
		_spec.SetField(videoclip.FieldHeight, field.TypeInt, value)
	}
	if value, ok := vcuo.mutation.AddedHeight(); ok {
		_spec.AddField(videoclip.FieldHeight, field.TypeInt, value)
	}
	if vcuo.mutation.HeightCleared() {
		_spec.ClearField(videoclip.FieldHeight, field.TypeInt)
	}
	if value, ok := vcuo.mutation.FileSize(); ok {
		_spec.SetField(videoclip.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := vcuo.mutation.AddedFileSize(); ok {
		_spec.AddField(videoclip.FieldFileSize, field.TypeInt64, value)
	}
	if vcuo.mutation.FileSizeCleared() {
		_spec.ClearField(videoclip.FieldFileSize, field.TypeInt64)
	}
	if value, ok := vcuo.mutation.Transcription(); ok {
		_spec.SetField(videoclip.FieldTranscription, field.TypeString, value)
	}
	if vcuo.mutation.TranscriptionCleared() {
		_spec.ClearField(videoclip.FieldTranscription, field.TypeString)
	}
	if value, ok := vcuo.mutation.TranscriptionWords(); ok {
		_spec.SetField(videoclip.FieldTranscriptionWords, field.TypeJSON, value)
	}
	if value, ok := vcuo.mutation.AppendedTranscriptionWords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, videoclip.FieldTranscriptionWords, value)
		})
	}
	if vcuo.mutation.TranscriptionWordsCleared() {
		_spec.ClearField(videoclip.FieldTranscriptionWords, field.TypeJSON)
	}
	if value, ok := vcuo.mutation.TranscriptionLanguage(); ok {
		_spec.SetField(videoclip.FieldTranscriptionLanguage, field.TypeString, value)
	}
	if vcuo.mutation.TranscriptionLanguageCleared() {
		_spec.ClearField(videoclip.FieldTranscriptionLanguage, field.TypeString)
	}
	if value, ok := vcuo.mutation.TranscriptionDuration(); ok {
		_spec.SetField(videoclip.FieldTranscriptionDuration, field.TypeFloat64, value)
	}
	if value, ok := vcuo.mutation.AddedTranscriptionDuration(); ok {
		_spec.AddField(videoclip.FieldTranscriptionDuration, field.TypeFloat64, value)
	}
	if vcuo.mutation.TranscriptionDurationCleared() {
		_spec.ClearField(videoclip.FieldTranscriptionDuration, field.TypeFloat64)
	}
	if value, ok := vcuo.mutation.Highlights(); ok {
		_spec.SetField(videoclip.FieldHighlights, field.TypeJSON, value)
	}
	if value, ok := vcuo.mutation.AppendedHighlights(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, videoclip.FieldHighlights, value)
		})
	}
	if vcuo.mutation.HighlightsCleared() {
		_spec.ClearField(videoclip.FieldHighlights, field.TypeJSON)
	}
	if value, ok := vcuo.mutation.SuggestedHighlights(); ok {
		_spec.SetField(videoclip.FieldSuggestedHighlights, field.TypeJSON, value)
	}
	if value, ok := vcuo.mutation.AppendedSuggestedHighlights(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, videoclip.FieldSuggestedHighlights, value)
		})
	}
	if vcuo.mutation.SuggestedHighlightsCleared() {
		_spec.ClearField(videoclip.FieldSuggestedHighlights, field.TypeJSON)
	}
	if value, ok := vcuo.mutation.CreatedAt(); ok {
		_spec.SetField(videoclip.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(videoclip.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vcuo.mutation.HighlightsHistory(); ok {
		_spec.SetField(videoclip.FieldHighlightsHistory, field.TypeJSON, value)
	}
	if value, ok := vcuo.mutation.AppendedHighlightsHistory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, videoclip.FieldHighlightsHistory, value)
		})
	}
	if vcuo.mutation.HighlightsHistoryCleared() {
		_spec.ClearField(videoclip.FieldHighlightsHistory, field.TypeJSON)
	}
	if value, ok := vcuo.mutation.HighlightsHistoryIndex(); ok {
		_spec.SetField(videoclip.FieldHighlightsHistoryIndex, field.TypeInt, value)
	}
	if value, ok := vcuo.mutation.AddedHighlightsHistoryIndex(); ok {
		_spec.AddField(videoclip.FieldHighlightsHistoryIndex, field.TypeInt, value)
	}
	if vcuo.mutation.HighlightsHistoryIndexCleared() {
		_spec.ClearField(videoclip.FieldHighlightsHistoryIndex, field.TypeInt)
	}
	if value, ok := vcuo.mutation.TranscriptionState(); ok {
		_spec.SetField(videoclip.FieldTranscriptionState, field.TypeString, value)
	}
	if vcuo.mutation.TranscriptionStateCleared() {
		_spec.ClearField(videoclip.FieldTranscriptionState, field.TypeString)
	}
	if value, ok := vcuo.mutation.TranscriptionError(); ok {
		_spec.SetField(videoclip.FieldTranscriptionError, field.TypeString, value)
	}
	if vcuo.mutation.TranscriptionErrorCleared() {
		_spec.ClearField(videoclip.FieldTranscriptionError, field.TypeString)
	}
	if value, ok := vcuo.mutation.TranscriptionStartedAt(); ok {
		_spec.SetField(videoclip.FieldTranscriptionStartedAt, field.TypeTime, value)
	}
	if vcuo.mutation.TranscriptionStartedAtCleared() {
		_spec.ClearField(videoclip.FieldTranscriptionStartedAt, field.TypeTime)
	}
	if value, ok := vcuo.mutation.TranscriptionCompletedAt(); ok {
		_spec.SetField(videoclip.FieldTranscriptionCompletedAt, field.TypeTime, value)
	}
	if vcuo.mutation.TranscriptionCompletedAtCleared() {
		_spec.ClearField(videoclip.FieldTranscriptionCompletedAt, field.TypeTime)
	}
	if vcuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoclip.ProjectTable,
			Columns: []string{videoclip.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoclip.ProjectTable,
			Columns: []string{videoclip.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VideoClip{config: vcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videoclip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vcuo.mutation.done = true
	return _node, nil
}
