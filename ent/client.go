// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"ramble-ai/ent/migrate"

	"ramble-ai/ent/chatmessage"
	"ramble-ai/ent/chatsession"
	"ramble-ai/ent/exportjob"
	"ramble-ai/ent/project"
	"ramble-ai/ent/settings"
	"ramble-ai/ent/videoclip"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ChatMessage is the client for interacting with the ChatMessage builders.
	ChatMessage *ChatMessageClient
	// ChatSession is the client for interacting with the ChatSession builders.
	ChatSession *ChatSessionClient
	// ExportJob is the client for interacting with the ExportJob builders.
	ExportJob *ExportJobClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// Settings is the client for interacting with the Settings builders.
	Settings *SettingsClient
	// VideoClip is the client for interacting with the VideoClip builders.
	VideoClip *VideoClipClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ChatMessage = NewChatMessageClient(c.config)
	c.ChatSession = NewChatSessionClient(c.config)
	c.ExportJob = NewExportJobClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.Settings = NewSettingsClient(c.config)
	c.VideoClip = NewVideoClipClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		ChatMessage: NewChatMessageClient(cfg),
		ChatSession: NewChatSessionClient(cfg),
		ExportJob:   NewExportJobClient(cfg),
		Project:     NewProjectClient(cfg),
		Settings:    NewSettingsClient(cfg),
		VideoClip:   NewVideoClipClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		ChatMessage: NewChatMessageClient(cfg),
		ChatSession: NewChatSessionClient(cfg),
		ExportJob:   NewExportJobClient(cfg),
		Project:     NewProjectClient(cfg),
		Settings:    NewSettingsClient(cfg),
		VideoClip:   NewVideoClipClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ChatMessage.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.ChatMessage, c.ChatSession, c.ExportJob, c.Project, c.Settings, c.VideoClip,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.ChatMessage, c.ChatSession, c.ExportJob, c.Project, c.Settings, c.VideoClip,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ChatMessageMutation:
		return c.ChatMessage.mutate(ctx, m)
	case *ChatSessionMutation:
		return c.ChatSession.mutate(ctx, m)
	case *ExportJobMutation:
		return c.ExportJob.mutate(ctx, m)
	case *ProjectMutation:
		return c.Project.mutate(ctx, m)
	case *SettingsMutation:
		return c.Settings.mutate(ctx, m)
	case *VideoClipMutation:
		return c.VideoClip.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ChatMessageClient is a client for the ChatMessage schema.
type ChatMessageClient struct {
	config
}

// NewChatMessageClient returns a client for the ChatMessage from the given config.
func NewChatMessageClient(c config) *ChatMessageClient {
	return &ChatMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chatmessage.Hooks(f(g(h())))`.
func (c *ChatMessageClient) Use(hooks ...Hook) {
	c.hooks.ChatMessage = append(c.hooks.ChatMessage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chatmessage.Intercept(f(g(h())))`.
func (c *ChatMessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChatMessage = append(c.inters.ChatMessage, interceptors...)
}

// Create returns a builder for creating a ChatMessage entity.
func (c *ChatMessageClient) Create() *ChatMessageCreate {
	mutation := newChatMessageMutation(c.config, OpCreate)
	return &ChatMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChatMessage entities.
func (c *ChatMessageClient) CreateBulk(builders ...*ChatMessageCreate) *ChatMessageCreateBulk {
	return &ChatMessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChatMessageClient) MapCreateBulk(slice any, setFunc func(*ChatMessageCreate, int)) *ChatMessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChatMessageCreateBulk{err: fmt.Errorf("calling to ChatMessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChatMessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChatMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChatMessage.
func (c *ChatMessageClient) Update() *ChatMessageUpdate {
	mutation := newChatMessageMutation(c.config, OpUpdate)
	return &ChatMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChatMessageClient) UpdateOne(cm *ChatMessage) *ChatMessageUpdateOne {
	mutation := newChatMessageMutation(c.config, OpUpdateOne, withChatMessage(cm))
	return &ChatMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChatMessageClient) UpdateOneID(id int) *ChatMessageUpdateOne {
	mutation := newChatMessageMutation(c.config, OpUpdateOne, withChatMessageID(id))
	return &ChatMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChatMessage.
func (c *ChatMessageClient) Delete() *ChatMessageDelete {
	mutation := newChatMessageMutation(c.config, OpDelete)
	return &ChatMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChatMessageClient) DeleteOne(cm *ChatMessage) *ChatMessageDeleteOne {
	return c.DeleteOneID(cm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChatMessageClient) DeleteOneID(id int) *ChatMessageDeleteOne {
	builder := c.Delete().Where(chatmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChatMessageDeleteOne{builder}
}

// Query returns a query builder for ChatMessage.
func (c *ChatMessageClient) Query() *ChatMessageQuery {
	return &ChatMessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChatMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a ChatMessage entity by its id.
func (c *ChatMessageClient) Get(ctx context.Context, id int) (*ChatMessage, error) {
	return c.Query().Where(chatmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChatMessageClient) GetX(ctx context.Context, id int) *ChatMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a ChatMessage.
func (c *ChatMessageClient) QuerySession(cm *ChatMessage) *ChatSessionQuery {
	query := (&ChatSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chatmessage.Table, chatmessage.FieldID, id),
			sqlgraph.To(chatsession.Table, chatsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, chatmessage.SessionTable, chatmessage.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChatMessageClient) Hooks() []Hook {
	return c.hooks.ChatMessage
}

// Interceptors returns the client interceptors.
func (c *ChatMessageClient) Interceptors() []Interceptor {
	return c.inters.ChatMessage
}

func (c *ChatMessageClient) mutate(ctx context.Context, m *ChatMessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChatMessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChatMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChatMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChatMessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChatMessage mutation op: %q", m.Op())
	}
}

// ChatSessionClient is a client for the ChatSession schema.
type ChatSessionClient struct {
	config
}

// NewChatSessionClient returns a client for the ChatSession from the given config.
func NewChatSessionClient(c config) *ChatSessionClient {
	return &ChatSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chatsession.Hooks(f(g(h())))`.
func (c *ChatSessionClient) Use(hooks ...Hook) {
	c.hooks.ChatSession = append(c.hooks.ChatSession, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chatsession.Intercept(f(g(h())))`.
func (c *ChatSessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChatSession = append(c.inters.ChatSession, interceptors...)
}

// Create returns a builder for creating a ChatSession entity.
func (c *ChatSessionClient) Create() *ChatSessionCreate {
	mutation := newChatSessionMutation(c.config, OpCreate)
	return &ChatSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChatSession entities.
func (c *ChatSessionClient) CreateBulk(builders ...*ChatSessionCreate) *ChatSessionCreateBulk {
	return &ChatSessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChatSessionClient) MapCreateBulk(slice any, setFunc func(*ChatSessionCreate, int)) *ChatSessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChatSessionCreateBulk{err: fmt.Errorf("calling to ChatSessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChatSessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChatSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChatSession.
func (c *ChatSessionClient) Update() *ChatSessionUpdate {
	mutation := newChatSessionMutation(c.config, OpUpdate)
	return &ChatSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChatSessionClient) UpdateOne(cs *ChatSession) *ChatSessionUpdateOne {
	mutation := newChatSessionMutation(c.config, OpUpdateOne, withChatSession(cs))
	return &ChatSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChatSessionClient) UpdateOneID(id int) *ChatSessionUpdateOne {
	mutation := newChatSessionMutation(c.config, OpUpdateOne, withChatSessionID(id))
	return &ChatSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChatSession.
func (c *ChatSessionClient) Delete() *ChatSessionDelete {
	mutation := newChatSessionMutation(c.config, OpDelete)
	return &ChatSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChatSessionClient) DeleteOne(cs *ChatSession) *ChatSessionDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChatSessionClient) DeleteOneID(id int) *ChatSessionDeleteOne {
	builder := c.Delete().Where(chatsession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChatSessionDeleteOne{builder}
}

// Query returns a query builder for ChatSession.
func (c *ChatSessionClient) Query() *ChatSessionQuery {
	return &ChatSessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChatSession},
		inters: c.Interceptors(),
	}
}

// Get returns a ChatSession entity by its id.
func (c *ChatSessionClient) Get(ctx context.Context, id int) (*ChatSession, error) {
	return c.Query().Where(chatsession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChatSessionClient) GetX(ctx context.Context, id int) *ChatSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ChatSession.
func (c *ChatSessionClient) QueryProject(cs *ChatSession) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chatsession.Table, chatsession.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, chatsession.ProjectTable, chatsession.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessages queries the messages edge of a ChatSession.
func (c *ChatSessionClient) QueryMessages(cs *ChatSession) *ChatMessageQuery {
	query := (&ChatMessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chatsession.Table, chatsession.FieldID, id),
			sqlgraph.To(chatmessage.Table, chatmessage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, chatsession.MessagesTable, chatsession.MessagesColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChatSessionClient) Hooks() []Hook {
	return c.hooks.ChatSession
}

// Interceptors returns the client interceptors.
func (c *ChatSessionClient) Interceptors() []Interceptor {
	return c.inters.ChatSession
}

func (c *ChatSessionClient) mutate(ctx context.Context, m *ChatSessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChatSessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChatSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChatSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChatSessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChatSession mutation op: %q", m.Op())
	}
}

// ExportJobClient is a client for the ExportJob schema.
type ExportJobClient struct {
	config
}

// NewExportJobClient returns a client for the ExportJob from the given config.
func NewExportJobClient(c config) *ExportJobClient {
	return &ExportJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exportjob.Hooks(f(g(h())))`.
func (c *ExportJobClient) Use(hooks ...Hook) {
	c.hooks.ExportJob = append(c.hooks.ExportJob, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exportjob.Intercept(f(g(h())))`.
func (c *ExportJobClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExportJob = append(c.inters.ExportJob, interceptors...)
}

// Create returns a builder for creating a ExportJob entity.
func (c *ExportJobClient) Create() *ExportJobCreate {
	mutation := newExportJobMutation(c.config, OpCreate)
	return &ExportJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExportJob entities.
func (c *ExportJobClient) CreateBulk(builders ...*ExportJobCreate) *ExportJobCreateBulk {
	return &ExportJobCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExportJobClient) MapCreateBulk(slice any, setFunc func(*ExportJobCreate, int)) *ExportJobCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExportJobCreateBulk{err: fmt.Errorf("calling to ExportJobClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExportJobCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExportJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExportJob.
func (c *ExportJobClient) Update() *ExportJobUpdate {
	mutation := newExportJobMutation(c.config, OpUpdate)
	return &ExportJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExportJobClient) UpdateOne(ej *ExportJob) *ExportJobUpdateOne {
	mutation := newExportJobMutation(c.config, OpUpdateOne, withExportJob(ej))
	return &ExportJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExportJobClient) UpdateOneID(id int) *ExportJobUpdateOne {
	mutation := newExportJobMutation(c.config, OpUpdateOne, withExportJobID(id))
	return &ExportJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExportJob.
func (c *ExportJobClient) Delete() *ExportJobDelete {
	mutation := newExportJobMutation(c.config, OpDelete)
	return &ExportJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExportJobClient) DeleteOne(ej *ExportJob) *ExportJobDeleteOne {
	return c.DeleteOneID(ej.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExportJobClient) DeleteOneID(id int) *ExportJobDeleteOne {
	builder := c.Delete().Where(exportjob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExportJobDeleteOne{builder}
}

// Query returns a query builder for ExportJob.
func (c *ExportJobClient) Query() *ExportJobQuery {
	return &ExportJobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExportJob},
		inters: c.Interceptors(),
	}
}

// Get returns a ExportJob entity by its id.
func (c *ExportJobClient) Get(ctx context.Context, id int) (*ExportJob, error) {
	return c.Query().Where(exportjob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExportJobClient) GetX(ctx context.Context, id int) *ExportJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ExportJob.
func (c *ExportJobClient) QueryProject(ej *ExportJob) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ej.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exportjob.Table, exportjob.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exportjob.ProjectTable, exportjob.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(ej.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExportJobClient) Hooks() []Hook {
	return c.hooks.ExportJob
}

// Interceptors returns the client interceptors.
func (c *ExportJobClient) Interceptors() []Interceptor {
	return c.inters.ExportJob
}

func (c *ExportJobClient) mutate(ctx context.Context, m *ExportJobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExportJobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExportJobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExportJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExportJobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExportJob mutation op: %q", m.Op())
	}
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `project.Intercept(f(g(h())))`.
func (c *ProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Project = append(c.inters.Project, interceptors...)
}

// Create returns a builder for creating a Project entity.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectClient) MapCreateBulk(slice any, setFunc func(*ProjectCreate, int)) *ProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectCreateBulk{err: fmt.Errorf("calling to ProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id int) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectClient) DeleteOneID(id int) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProject},
		inters: c.Interceptors(),
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id int) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id int) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVideoClips queries the video_clips edge of a Project.
func (c *ProjectClient) QueryVideoClips(pr *Project) *VideoClipQuery {
	query := (&VideoClipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(videoclip.Table, videoclip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.VideoClipsTable, project.VideoClipsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExportJobs queries the export_jobs edge of a Project.
func (c *ProjectClient) QueryExportJobs(pr *Project) *ExportJobQuery {
	query := (&ExportJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(exportjob.Table, exportjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ExportJobsTable, project.ExportJobsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChatSessions queries the chat_sessions edge of a Project.
func (c *ProjectClient) QueryChatSessions(pr *Project) *ChatSessionQuery {
	query := (&ChatSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(chatsession.Table, chatsession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ChatSessionsTable, project.ChatSessionsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// Interceptors returns the client interceptors.
func (c *ProjectClient) Interceptors() []Interceptor {
	return c.inters.Project
}

func (c *ProjectClient) mutate(ctx context.Context, m *ProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Project mutation op: %q", m.Op())
	}
}

// SettingsClient is a client for the Settings schema.
type SettingsClient struct {
	config
}

// NewSettingsClient returns a client for the Settings from the given config.
func NewSettingsClient(c config) *SettingsClient {
	return &SettingsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `settings.Hooks(f(g(h())))`.
func (c *SettingsClient) Use(hooks ...Hook) {
	c.hooks.Settings = append(c.hooks.Settings, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `settings.Intercept(f(g(h())))`.
func (c *SettingsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Settings = append(c.inters.Settings, interceptors...)
}

// Create returns a builder for creating a Settings entity.
func (c *SettingsClient) Create() *SettingsCreate {
	mutation := newSettingsMutation(c.config, OpCreate)
	return &SettingsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Settings entities.
func (c *SettingsClient) CreateBulk(builders ...*SettingsCreate) *SettingsCreateBulk {
	return &SettingsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SettingsClient) MapCreateBulk(slice any, setFunc func(*SettingsCreate, int)) *SettingsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SettingsCreateBulk{err: fmt.Errorf("calling to SettingsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SettingsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SettingsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Settings.
func (c *SettingsClient) Update() *SettingsUpdate {
	mutation := newSettingsMutation(c.config, OpUpdate)
	return &SettingsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettingsClient) UpdateOne(s *Settings) *SettingsUpdateOne {
	mutation := newSettingsMutation(c.config, OpUpdateOne, withSettings(s))
	return &SettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettingsClient) UpdateOneID(id int) *SettingsUpdateOne {
	mutation := newSettingsMutation(c.config, OpUpdateOne, withSettingsID(id))
	return &SettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Settings.
func (c *SettingsClient) Delete() *SettingsDelete {
	mutation := newSettingsMutation(c.config, OpDelete)
	return &SettingsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SettingsClient) DeleteOne(s *Settings) *SettingsDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SettingsClient) DeleteOneID(id int) *SettingsDeleteOne {
	builder := c.Delete().Where(settings.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettingsDeleteOne{builder}
}

// Query returns a query builder for Settings.
func (c *SettingsClient) Query() *SettingsQuery {
	return &SettingsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSettings},
		inters: c.Interceptors(),
	}
}

// Get returns a Settings entity by its id.
func (c *SettingsClient) Get(ctx context.Context, id int) (*Settings, error) {
	return c.Query().Where(settings.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettingsClient) GetX(ctx context.Context, id int) *Settings {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SettingsClient) Hooks() []Hook {
	return c.hooks.Settings
}

// Interceptors returns the client interceptors.
func (c *SettingsClient) Interceptors() []Interceptor {
	return c.inters.Settings
}

func (c *SettingsClient) mutate(ctx context.Context, m *SettingsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SettingsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SettingsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SettingsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Settings mutation op: %q", m.Op())
	}
}

// VideoClipClient is a client for the VideoClip schema.
type VideoClipClient struct {
	config
}

// NewVideoClipClient returns a client for the VideoClip from the given config.
func NewVideoClipClient(c config) *VideoClipClient {
	return &VideoClipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `videoclip.Hooks(f(g(h())))`.
func (c *VideoClipClient) Use(hooks ...Hook) {
	c.hooks.VideoClip = append(c.hooks.VideoClip, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `videoclip.Intercept(f(g(h())))`.
func (c *VideoClipClient) Intercept(interceptors ...Interceptor) {
	c.inters.VideoClip = append(c.inters.VideoClip, interceptors...)
}

// Create returns a builder for creating a VideoClip entity.
func (c *VideoClipClient) Create() *VideoClipCreate {
	mutation := newVideoClipMutation(c.config, OpCreate)
	return &VideoClipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VideoClip entities.
func (c *VideoClipClient) CreateBulk(builders ...*VideoClipCreate) *VideoClipCreateBulk {
	return &VideoClipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VideoClipClient) MapCreateBulk(slice any, setFunc func(*VideoClipCreate, int)) *VideoClipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VideoClipCreateBulk{err: fmt.Errorf("calling to VideoClipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VideoClipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VideoClipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VideoClip.
func (c *VideoClipClient) Update() *VideoClipUpdate {
	mutation := newVideoClipMutation(c.config, OpUpdate)
	return &VideoClipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VideoClipClient) UpdateOne(vc *VideoClip) *VideoClipUpdateOne {
	mutation := newVideoClipMutation(c.config, OpUpdateOne, withVideoClip(vc))
	return &VideoClipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VideoClipClient) UpdateOneID(id int) *VideoClipUpdateOne {
	mutation := newVideoClipMutation(c.config, OpUpdateOne, withVideoClipID(id))
	return &VideoClipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VideoClip.
func (c *VideoClipClient) Delete() *VideoClipDelete {
	mutation := newVideoClipMutation(c.config, OpDelete)
	return &VideoClipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VideoClipClient) DeleteOne(vc *VideoClip) *VideoClipDeleteOne {
	return c.DeleteOneID(vc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VideoClipClient) DeleteOneID(id int) *VideoClipDeleteOne {
	builder := c.Delete().Where(videoclip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VideoClipDeleteOne{builder}
}

// Query returns a query builder for VideoClip.
func (c *VideoClipClient) Query() *VideoClipQuery {
	return &VideoClipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVideoClip},
		inters: c.Interceptors(),
	}
}

// Get returns a VideoClip entity by its id.
func (c *VideoClipClient) Get(ctx context.Context, id int) (*VideoClip, error) {
	return c.Query().Where(videoclip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VideoClipClient) GetX(ctx context.Context, id int) *VideoClip {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a VideoClip.
func (c *VideoClipClient) QueryProject(vc *VideoClip) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(videoclip.Table, videoclip.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, videoclip.ProjectTable, videoclip.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(vc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VideoClipClient) Hooks() []Hook {
	return c.hooks.VideoClip
}

// Interceptors returns the client interceptors.
func (c *VideoClipClient) Interceptors() []Interceptor {
	return c.inters.VideoClip
}

func (c *VideoClipClient) mutate(ctx context.Context, m *VideoClipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VideoClipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VideoClipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VideoClipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VideoClipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VideoClip mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ChatMessage, ChatSession, ExportJob, Project, Settings, VideoClip []ent.Hook
	}
	inters struct {
		ChatMessage, ChatSession, ExportJob, Project, Settings,
		VideoClip []ent.Interceptor
	}
)
