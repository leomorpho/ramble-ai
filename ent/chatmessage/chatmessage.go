// Code generated by ent, DO NOT EDIT.

package chatmessage

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the chatmessage type in the database.
	Label = "chat_message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMessageID holds the string denoting the message_id field in the database.
	FieldMessageID = "message_id"
	// FieldSessionID holds the string denoting the session_id field in the database.
	FieldSessionID = "session_id"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldHiddenContext holds the string denoting the hidden_context field in the database.
	FieldHiddenContext = "hidden_context"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// EdgeSession holds the string denoting the session edge name in mutations.
	EdgeSession = "session"
	// Table holds the table name of the chatmessage in the database.
	Table = "chat_messages"
	// SessionTable is the table that holds the session relation/edge.
	SessionTable = "chat_messages"
	// SessionInverseTable is the table name for the ChatSession entity.
	// It exists in this package in order to avoid circular dependency with the "chatsession" package.
	SessionInverseTable = "chat_sessions"
	// SessionColumn is the table column denoting the session relation/edge.
	SessionColumn = "session_id"
)

// Columns holds all SQL columns for chatmessage fields.
var Columns = []string{
	FieldID,
	FieldMessageID,
	FieldSessionID,
	FieldRole,
	FieldContent,
	FieldHiddenContext,
	FieldTimestamp,
	FieldModel,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// MessageIDValidator is a validator for the "message_id" field. It is called by the builders before save.
	MessageIDValidator func(string) error
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp func() time.Time
)

// Role defines the type for the "role" enum field.
type Role string

// Role values.
const (
	RoleUser      Role = "user"
	RoleAssistant Role = "assistant"
	RoleSystem    Role = "system"
	RoleError     Role = "error"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleUser, RoleAssistant, RoleSystem, RoleError:
		return nil
	default:
		return fmt.Errorf("chatmessage: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the ChatMessage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMessageID orders the results by the message_id field.
func ByMessageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessageID, opts...).ToFunc()
}

// BySessionID orders the results by the session_id field.
func BySessionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionID, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByHiddenContext orders the results by the hidden_context field.
func ByHiddenContext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHiddenContext, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// BySessionField orders the results by session field.
func BySessionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionStep(), sql.OrderByField(field, opts...))
	}
}
func newSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SessionTable, SessionColumn),
	)
}
