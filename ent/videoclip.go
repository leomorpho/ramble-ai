// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MYAPP/ent/project"
	"MYAPP/ent/schema"
	"MYAPP/ent/videoclip"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VideoClip is the model entity for the VideoClip schema.
type VideoClip struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Video clip name
	Name string `json:"name,omitempty"`
	// Video clip description
	Description string `json:"description,omitempty"`
	// Video clip file path
	FilePath string `json:"file_path,omitempty"`
	// Video duration in seconds
	Duration float64 `json:"duration,omitempty"`
	// Video format (mp4, mov, etc.)
	Format string `json:"format,omitempty"`
	// Video width in pixels
	Width int `json:"width,omitempty"`
	// Video height in pixels
	Height int `json:"height,omitempty"`
	// File size in bytes
	FileSize int64 `json:"file_size,omitempty"`
	// Video transcription text
	Transcription string `json:"transcription,omitempty"`
	// Word-level transcription with timestamps
	TranscriptionWords []schema.Word `json:"transcription_words,omitempty"`
	// Detected language of transcription
	TranscriptionLanguage string `json:"transcription_language,omitempty"`
	// Duration of transcribed audio in seconds
	TranscriptionDuration float64 `json:"transcription_duration,omitempty"`
	// Highlighted text regions with timestamps
	Highlights []schema.Highlight `json:"highlights,omitempty"`
	// AI-suggested highlights pending user confirmation
	SuggestedHighlights []schema.Highlight `json:"suggested_highlights,omitempty"`
	// Creation timestamp
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// FIFO history of highlight states (last 20 states)
	HighlightsHistory [][]schema.Highlight `json:"highlights_history,omitempty"`
	// Current position in highlights history (-1 = no history)
	HighlightsHistoryIndex int `json:"highlights_history_index,omitempty"`
	// Current state of transcription: idle, checking, transcribing, completed, error
	TranscriptionState string `json:"transcription_state,omitempty"`
	// Error message if transcription failed
	TranscriptionError string `json:"transcription_error,omitempty"`
	// When transcription was started
	TranscriptionStartedAt time.Time `json:"transcription_started_at,omitempty"`
	// When transcription was completed
	TranscriptionCompletedAt time.Time `json:"transcription_completed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VideoClipQuery when eager-loading is set.
	Edges               VideoClipEdges `json:"edges"`
	project_video_clips *int
	selectValues        sql.SelectValues
}

// VideoClipEdges holds the relations/edges for other nodes in the graph.
type VideoClipEdges struct {
	// Project this video clip belongs to
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideoClipEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VideoClip) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case videoclip.FieldTranscriptionWords, videoclip.FieldHighlights, videoclip.FieldSuggestedHighlights, videoclip.FieldHighlightsHistory:
			values[i] = new([]byte)
		case videoclip.FieldDuration, videoclip.FieldTranscriptionDuration:
			values[i] = new(sql.NullFloat64)
		case videoclip.FieldID, videoclip.FieldWidth, videoclip.FieldHeight, videoclip.FieldFileSize, videoclip.FieldHighlightsHistoryIndex:
			values[i] = new(sql.NullInt64)
		case videoclip.FieldName, videoclip.FieldDescription, videoclip.FieldFilePath, videoclip.FieldFormat, videoclip.FieldTranscription, videoclip.FieldTranscriptionLanguage, videoclip.FieldTranscriptionState, videoclip.FieldTranscriptionError:
			values[i] = new(sql.NullString)
		case videoclip.FieldCreatedAt, videoclip.FieldUpdatedAt, videoclip.FieldTranscriptionStartedAt, videoclip.FieldTranscriptionCompletedAt:
			values[i] = new(sql.NullTime)
		case videoclip.ForeignKeys[0]: // project_video_clips
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VideoClip fields.
func (vc *VideoClip) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case videoclip.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vc.ID = int(value.Int64)
		case videoclip.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				vc.Name = value.String
			}
		case videoclip.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				vc.Description = value.String
			}
		case videoclip.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path", values[i])
			} else if value.Valid {
				vc.FilePath = value.String
			}
		case videoclip.FieldDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				vc.Duration = value.Float64
			}
		case videoclip.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				vc.Format = value.String
			}
		case videoclip.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				vc.Width = int(value.Int64)
			}
		case videoclip.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				vc.Height = int(value.Int64)
			}
		case videoclip.FieldFileSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_size", values[i])
			} else if value.Valid {
				vc.FileSize = value.Int64
			}
		case videoclip.FieldTranscription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transcription", values[i])
			} else if value.Valid {
				vc.Transcription = value.String
			}
		case videoclip.FieldTranscriptionWords:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field transcription_words", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &vc.TranscriptionWords); err != nil {
					return fmt.Errorf("unmarshal field transcription_words: %w", err)
				}
			}
		case videoclip.FieldTranscriptionLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transcription_language", values[i])
			} else if value.Valid {
				vc.TranscriptionLanguage = value.String
			}
		case videoclip.FieldTranscriptionDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field transcription_duration", values[i])
			} else if value.Valid {
				vc.TranscriptionDuration = value.Float64
			}
		case videoclip.FieldHighlights:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field highlights", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &vc.Highlights); err != nil {
					return fmt.Errorf("unmarshal field highlights: %w", err)
				}
			}
		case videoclip.FieldSuggestedHighlights:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field suggested_highlights", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &vc.SuggestedHighlights); err != nil {
					return fmt.Errorf("unmarshal field suggested_highlights: %w", err)
				}
			}
		case videoclip.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vc.CreatedAt = value.Time
			}
		case videoclip.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vc.UpdatedAt = value.Time
			}
		case videoclip.FieldHighlightsHistory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field highlights_history", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &vc.HighlightsHistory); err != nil {
					return fmt.Errorf("unmarshal field highlights_history: %w", err)
				}
			}
		case videoclip.FieldHighlightsHistoryIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field highlights_history_index", values[i])
			} else if value.Valid {
				vc.HighlightsHistoryIndex = int(value.Int64)
			}
		case videoclip.FieldTranscriptionState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transcription_state", values[i])
			} else if value.Valid {
				vc.TranscriptionState = value.String
			}
		case videoclip.FieldTranscriptionError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transcription_error", values[i])
			} else if value.Valid {
				vc.TranscriptionError = value.String
			}
		case videoclip.FieldTranscriptionStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field transcription_started_at", values[i])
			} else if value.Valid {
				vc.TranscriptionStartedAt = value.Time
			}
		case videoclip.FieldTranscriptionCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field transcription_completed_at", values[i])
			} else if value.Valid {
				vc.TranscriptionCompletedAt = value.Time
			}
		case videoclip.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_video_clips", value)
			} else if value.Valid {
				vc.project_video_clips = new(int)
				*vc.project_video_clips = int(value.Int64)
			}
		default:
			vc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VideoClip.
// This includes values selected through modifiers, order, etc.
func (vc *VideoClip) Value(name string) (ent.Value, error) {
	return vc.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the VideoClip entity.
func (vc *VideoClip) QueryProject() *ProjectQuery {
	return NewVideoClipClient(vc.config).QueryProject(vc)
}

// Update returns a builder for updating this VideoClip.
// Note that you need to call VideoClip.Unwrap() before calling this method if this VideoClip
// was returned from a transaction, and the transaction was committed or rolled back.
func (vc *VideoClip) Update() *VideoClipUpdateOne {
	return NewVideoClipClient(vc.config).UpdateOne(vc)
}

// Unwrap unwraps the VideoClip entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vc *VideoClip) Unwrap() *VideoClip {
	_tx, ok := vc.config.driver.(*txDriver)
	if !ok {
		panic("ent: VideoClip is not a transactional entity")
	}
	vc.config.driver = _tx.drv
	return vc
}

// String implements the fmt.Stringer.
func (vc *VideoClip) String() string {
	var builder strings.Builder
	builder.WriteString("VideoClip(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vc.ID))
	builder.WriteString("name=")
	builder.WriteString(vc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(vc.Description)
	builder.WriteString(", ")
	builder.WriteString("file_path=")
	builder.WriteString(vc.FilePath)
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", vc.Duration))
	builder.WriteString(", ")
	builder.WriteString("format=")
	builder.WriteString(vc.Format)
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", vc.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", vc.Height))
	builder.WriteString(", ")
	builder.WriteString("file_size=")
	builder.WriteString(fmt.Sprintf("%v", vc.FileSize))
	builder.WriteString(", ")
	builder.WriteString("transcription=")
	builder.WriteString(vc.Transcription)
	builder.WriteString(", ")
	builder.WriteString("transcription_words=")
	builder.WriteString(fmt.Sprintf("%v", vc.TranscriptionWords))
	builder.WriteString(", ")
	builder.WriteString("transcription_language=")
	builder.WriteString(vc.TranscriptionLanguage)
	builder.WriteString(", ")
	builder.WriteString("transcription_duration=")
	builder.WriteString(fmt.Sprintf("%v", vc.TranscriptionDuration))
	builder.WriteString(", ")
	builder.WriteString("highlights=")
	builder.WriteString(fmt.Sprintf("%v", vc.Highlights))
	builder.WriteString(", ")
	builder.WriteString("suggested_highlights=")
	builder.WriteString(fmt.Sprintf("%v", vc.SuggestedHighlights))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(vc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("highlights_history=")
	builder.WriteString(fmt.Sprintf("%v", vc.HighlightsHistory))
	builder.WriteString(", ")
	builder.WriteString("highlights_history_index=")
	builder.WriteString(fmt.Sprintf("%v", vc.HighlightsHistoryIndex))
	builder.WriteString(", ")
	builder.WriteString("transcription_state=")
	builder.WriteString(vc.TranscriptionState)
	builder.WriteString(", ")
	builder.WriteString("transcription_error=")
	builder.WriteString(vc.TranscriptionError)
	builder.WriteString(", ")
	builder.WriteString("transcription_started_at=")
	builder.WriteString(vc.TranscriptionStartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("transcription_completed_at=")
	builder.WriteString(vc.TranscriptionCompletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// VideoClips is a parsable slice of VideoClip.
type VideoClips []*VideoClip
