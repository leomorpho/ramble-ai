// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MYAPP/ent/project"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Project name
	Name string `json:"name,omitempty"`
	// Project description
	Description string `json:"description,omitempty"`
	// Project file path
	Path string `json:"path,omitempty"`
	// Creation timestamp
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Preferred OpenRouter AI model for this project
	AiModel string `json:"ai_model,omitempty"`
	// Custom AI prompt for segment reordering
	AiPrompt string `json:"ai_prompt,omitempty"`
	// Cached AI-suggested highlight order (array of highlight IDs)
	AiSuggestionOrder []string `json:"ai_suggestion_order,omitempty"`
	// AI model used for the cached suggestion
	AiSuggestionModel string `json:"ai_suggestion_model,omitempty"`
	// When the AI suggestion was created
	AiSuggestionCreatedAt time.Time `json:"ai_suggestion_created_at,omitempty"`
	// Preferred OpenRouter AI model for highlight suggestions
	AiHighlightModel string `json:"ai_highlight_model,omitempty"`
	// Custom AI prompt for highlight suggestions
	AiHighlightPrompt string `json:"ai_highlight_prompt,omitempty"`
	// Last active tab for this project
	ActiveTab string `json:"active_tab,omitempty"`
	// Cached AI silence improvement suggestions
	AiSilenceImprovements []map[string]interface{} `json:"ai_silence_improvements,omitempty"`
	// AI model used for cached silence improvements
	AiSilenceModel string `json:"ai_silence_model,omitempty"`
	// When the AI silence improvements were created
	AiSilenceCreatedAt time.Time `json:"ai_silence_created_at,omitempty"`
	// Current highlight order (array of highlight IDs, 'N' for newlines, or newline objects with titles)
	HighlightOrder []interface{} `json:"highlight_order,omitempty"`
	// FIFO history of highlight orders (last 20 states)
	OrderHistory [][]string `json:"order_history,omitempty"`
	// Current position in order history (-1 = no history)
	OrderHistoryIndex int `json:"order_history_index,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges        ProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Video clips in this project
	VideoClips []*VideoClip `json:"video_clips,omitempty"`
	// Export jobs for this project
	ExportJobs []*ExportJob `json:"export_jobs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VideoClipsOrErr returns the VideoClips value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) VideoClipsOrErr() ([]*VideoClip, error) {
	if e.loadedTypes[0] {
		return e.VideoClips, nil
	}
	return nil, &NotLoadedError{edge: "video_clips"}
}

// ExportJobsOrErr returns the ExportJobs value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ExportJobsOrErr() ([]*ExportJob, error) {
	if e.loadedTypes[1] {
		return e.ExportJobs, nil
	}
	return nil, &NotLoadedError{edge: "export_jobs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldAiSuggestionOrder, project.FieldAiSilenceImprovements, project.FieldHighlightOrder, project.FieldOrderHistory:
			values[i] = new([]byte)
		case project.FieldID, project.FieldOrderHistoryIndex:
			values[i] = new(sql.NullInt64)
		case project.FieldName, project.FieldDescription, project.FieldPath, project.FieldAiModel, project.FieldAiPrompt, project.FieldAiSuggestionModel, project.FieldAiHighlightModel, project.FieldAiHighlightPrompt, project.FieldActiveTab, project.FieldAiSilenceModel:
			values[i] = new(sql.NullString)
		case project.FieldCreatedAt, project.FieldUpdatedAt, project.FieldAiSuggestionCreatedAt, project.FieldAiSilenceCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case project.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case project.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case project.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				pr.Path = value.String
			}
		case project.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case project.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case project.FieldAiModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ai_model", values[i])
			} else if value.Valid {
				pr.AiModel = value.String
			}
		case project.FieldAiPrompt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ai_prompt", values[i])
			} else if value.Valid {
				pr.AiPrompt = value.String
			}
		case project.FieldAiSuggestionOrder:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ai_suggestion_order", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.AiSuggestionOrder); err != nil {
					return fmt.Errorf("unmarshal field ai_suggestion_order: %w", err)
				}
			}
		case project.FieldAiSuggestionModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ai_suggestion_model", values[i])
			} else if value.Valid {
				pr.AiSuggestionModel = value.String
			}
		case project.FieldAiSuggestionCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ai_suggestion_created_at", values[i])
			} else if value.Valid {
				pr.AiSuggestionCreatedAt = value.Time
			}
		case project.FieldAiHighlightModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ai_highlight_model", values[i])
			} else if value.Valid {
				pr.AiHighlightModel = value.String
			}
		case project.FieldAiHighlightPrompt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ai_highlight_prompt", values[i])
			} else if value.Valid {
				pr.AiHighlightPrompt = value.String
			}
		case project.FieldActiveTab:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field active_tab", values[i])
			} else if value.Valid {
				pr.ActiveTab = value.String
			}
		case project.FieldAiSilenceImprovements:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ai_silence_improvements", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.AiSilenceImprovements); err != nil {
					return fmt.Errorf("unmarshal field ai_silence_improvements: %w", err)
				}
			}
		case project.FieldAiSilenceModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ai_silence_model", values[i])
			} else if value.Valid {
				pr.AiSilenceModel = value.String
			}
		case project.FieldAiSilenceCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ai_silence_created_at", values[i])
			} else if value.Valid {
				pr.AiSilenceCreatedAt = value.Time
			}
		case project.FieldHighlightOrder:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field highlight_order", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.HighlightOrder); err != nil {
					return fmt.Errorf("unmarshal field highlight_order: %w", err)
				}
			}
		case project.FieldOrderHistory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field order_history", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.OrderHistory); err != nil {
					return fmt.Errorf("unmarshal field order_history: %w", err)
				}
			}
		case project.FieldOrderHistoryIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_history_index", values[i])
			} else if value.Valid {
				pr.OrderHistoryIndex = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Project.
// This includes values selected through modifiers, order, etc.
func (pr *Project) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryVideoClips queries the "video_clips" edge of the Project entity.
func (pr *Project) QueryVideoClips() *VideoClipQuery {
	return NewProjectClient(pr.config).QueryVideoClips(pr)
}

// QueryExportJobs queries the "export_jobs" edge of the Project entity.
func (pr *Project) QueryExportJobs() *ExportJobQuery {
	return NewProjectClient(pr.config).QueryExportJobs(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(pr.Path)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ai_model=")
	builder.WriteString(pr.AiModel)
	builder.WriteString(", ")
	builder.WriteString("ai_prompt=")
	builder.WriteString(pr.AiPrompt)
	builder.WriteString(", ")
	builder.WriteString("ai_suggestion_order=")
	builder.WriteString(fmt.Sprintf("%v", pr.AiSuggestionOrder))
	builder.WriteString(", ")
	builder.WriteString("ai_suggestion_model=")
	builder.WriteString(pr.AiSuggestionModel)
	builder.WriteString(", ")
	builder.WriteString("ai_suggestion_created_at=")
	builder.WriteString(pr.AiSuggestionCreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ai_highlight_model=")
	builder.WriteString(pr.AiHighlightModel)
	builder.WriteString(", ")
	builder.WriteString("ai_highlight_prompt=")
	builder.WriteString(pr.AiHighlightPrompt)
	builder.WriteString(", ")
	builder.WriteString("active_tab=")
	builder.WriteString(pr.ActiveTab)
	builder.WriteString(", ")
	builder.WriteString("ai_silence_improvements=")
	builder.WriteString(fmt.Sprintf("%v", pr.AiSilenceImprovements))
	builder.WriteString(", ")
	builder.WriteString("ai_silence_model=")
	builder.WriteString(pr.AiSilenceModel)
	builder.WriteString(", ")
	builder.WriteString("ai_silence_created_at=")
	builder.WriteString(pr.AiSilenceCreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("highlight_order=")
	builder.WriteString(fmt.Sprintf("%v", pr.HighlightOrder))
	builder.WriteString(", ")
	builder.WriteString("order_history=")
	builder.WriteString(fmt.Sprintf("%v", pr.OrderHistory))
	builder.WriteString(", ")
	builder.WriteString("order_history_index=")
	builder.WriteString(fmt.Sprintf("%v", pr.OrderHistoryIndex))
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project
