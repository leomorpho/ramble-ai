// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ramble-ai/ent/chatmessage"
	"ramble-ai/ent/chatsession"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChatMessage is the model entity for the ChatMessage schema.
type ChatMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Unique message identifier
	MessageID string `json:"message_id,omitempty"`
	// ID of the chat session this message belongs to
	SessionID int `json:"session_id,omitempty"`
	// Role of the message sender
	Role chatmessage.Role `json:"role,omitempty"`
	// The message content
	Content string `json:"content,omitempty"`
	// Hidden context not sent to frontend
	HiddenContext string `json:"hidden_context,omitempty"`
	// When the message was created
	Timestamp time.Time `json:"timestamp,omitempty"`
	// LLM model used for assistant messages
	Model string `json:"model,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatMessageQuery when eager-loading is set.
	Edges        ChatMessageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ChatMessageEdges holds the relations/edges for other nodes in the graph.
type ChatMessageEdges struct {
	// Session holds the value of the session edge.
	Session *ChatSession `json:"session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatMessageEdges) SessionOrErr() (*ChatSession, error) {
	if e.Session != nil {
		return e.Session, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: chatsession.Label}
	}
	return nil, &NotLoadedError{edge: "session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatmessage.FieldID, chatmessage.FieldSessionID:
			values[i] = new(sql.NullInt64)
		case chatmessage.FieldMessageID, chatmessage.FieldRole, chatmessage.FieldContent, chatmessage.FieldHiddenContext, chatmessage.FieldModel:
			values[i] = new(sql.NullString)
		case chatmessage.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatMessage fields.
func (cm *ChatMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int(value.Int64)
		case chatmessage.FieldMessageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message_id", values[i])
			} else if value.Valid {
				cm.MessageID = value.String
			}
		case chatmessage.FieldSessionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value.Valid {
				cm.SessionID = int(value.Int64)
			}
		case chatmessage.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				cm.Role = chatmessage.Role(value.String)
			}
		case chatmessage.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				cm.Content = value.String
			}
		case chatmessage.FieldHiddenContext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hidden_context", values[i])
			} else if value.Valid {
				cm.HiddenContext = value.String
			}
		case chatmessage.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				cm.Timestamp = value.Time
			}
		case chatmessage.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				cm.Model = value.String
			}
		default:
			cm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatMessage.
// This includes values selected through modifiers, order, etc.
func (cm *ChatMessage) Value(name string) (ent.Value, error) {
	return cm.selectValues.Get(name)
}

// QuerySession queries the "session" edge of the ChatMessage entity.
func (cm *ChatMessage) QuerySession() *ChatSessionQuery {
	return NewChatMessageClient(cm.config).QuerySession(cm)
}

// Update returns a builder for updating this ChatMessage.
// Note that you need to call ChatMessage.Unwrap() before calling this method if this ChatMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *ChatMessage) Update() *ChatMessageUpdateOne {
	return NewChatMessageClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the ChatMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *ChatMessage) Unwrap() *ChatMessage {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatMessage is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *ChatMessage) String() string {
	var builder strings.Builder
	builder.WriteString("ChatMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("message_id=")
	builder.WriteString(cm.MessageID)
	builder.WriteString(", ")
	builder.WriteString("session_id=")
	builder.WriteString(fmt.Sprintf("%v", cm.SessionID))
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", cm.Role))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(cm.Content)
	builder.WriteString(", ")
	builder.WriteString("hidden_context=")
	builder.WriteString(cm.HiddenContext)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(cm.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(cm.Model)
	builder.WriteByte(')')
	return builder.String()
}

// ChatMessages is a parsable slice of ChatMessage.
type ChatMessages []*ChatMessage
