// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ramble-ai/ent/exportjob"
	"ramble-ai/ent/project"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ExportJob is the model entity for the ExportJob schema.
type ExportJob struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Unique job identifier
	JobID string `json:"job_id,omitempty"`
	// Type of export: 'stitched' or 'individual'
	ExportType string `json:"export_type,omitempty"`
	// Export destination folder path
	OutputPath string `json:"output_path,omitempty"`
	// Current stage of export
	Stage string `json:"stage,omitempty"`
	// Progress percentage (0.0 to 1.0)
	Progress float64 `json:"progress,omitempty"`
	// Currently processing file name
	CurrentFile string `json:"current_file,omitempty"`
	// Total number of files to process
	TotalFiles int `json:"total_files,omitempty"`
	// Number of files processed
	ProcessedFiles int `json:"processed_files,omitempty"`
	// Whether the job is complete
	IsComplete bool `json:"is_complete,omitempty"`
	// Whether the job has an error
	HasError bool `json:"has_error,omitempty"`
	// Error message if job failed
	ErrorMessage string `json:"error_message,omitempty"`
	// Whether the job was cancelled
	IsCancelled bool `json:"is_cancelled,omitempty"`
	// Job creation timestamp
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Job completion timestamp
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExportJobQuery when eager-loading is set.
	Edges               ExportJobEdges `json:"edges"`
	project_export_jobs *int
	selectValues        sql.SelectValues
}

// ExportJobEdges holds the relations/edges for other nodes in the graph.
type ExportJobEdges struct {
	// Project this export job belongs to
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExportJobEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExportJob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exportjob.FieldIsComplete, exportjob.FieldHasError, exportjob.FieldIsCancelled:
			values[i] = new(sql.NullBool)
		case exportjob.FieldProgress:
			values[i] = new(sql.NullFloat64)
		case exportjob.FieldID, exportjob.FieldTotalFiles, exportjob.FieldProcessedFiles:
			values[i] = new(sql.NullInt64)
		case exportjob.FieldJobID, exportjob.FieldExportType, exportjob.FieldOutputPath, exportjob.FieldStage, exportjob.FieldCurrentFile, exportjob.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case exportjob.FieldCreatedAt, exportjob.FieldUpdatedAt, exportjob.FieldCompletedAt:
			values[i] = new(sql.NullTime)
		case exportjob.ForeignKeys[0]: // project_export_jobs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExportJob fields.
func (ej *ExportJob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exportjob.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ej.ID = int(value.Int64)
		case exportjob.FieldJobID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value.Valid {
				ej.JobID = value.String
			}
		case exportjob.FieldExportType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field export_type", values[i])
			} else if value.Valid {
				ej.ExportType = value.String
			}
		case exportjob.FieldOutputPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field output_path", values[i])
			} else if value.Valid {
				ej.OutputPath = value.String
			}
		case exportjob.FieldStage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stage", values[i])
			} else if value.Valid {
				ej.Stage = value.String
			}
		case exportjob.FieldProgress:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field progress", values[i])
			} else if value.Valid {
				ej.Progress = value.Float64
			}
		case exportjob.FieldCurrentFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_file", values[i])
			} else if value.Valid {
				ej.CurrentFile = value.String
			}
		case exportjob.FieldTotalFiles:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_files", values[i])
			} else if value.Valid {
				ej.TotalFiles = int(value.Int64)
			}
		case exportjob.FieldProcessedFiles:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field processed_files", values[i])
			} else if value.Valid {
				ej.ProcessedFiles = int(value.Int64)
			}
		case exportjob.FieldIsComplete:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_complete", values[i])
			} else if value.Valid {
				ej.IsComplete = value.Bool
			}
		case exportjob.FieldHasError:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_error", values[i])
			} else if value.Valid {
				ej.HasError = value.Bool
			}
		case exportjob.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				ej.ErrorMessage = value.String
			}
		case exportjob.FieldIsCancelled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_cancelled", values[i])
			} else if value.Valid {
				ej.IsCancelled = value.Bool
			}
		case exportjob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ej.CreatedAt = value.Time
			}
		case exportjob.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ej.UpdatedAt = value.Time
			}
		case exportjob.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				ej.CompletedAt = value.Time
			}
		case exportjob.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_export_jobs", value)
			} else if value.Valid {
				ej.project_export_jobs = new(int)
				*ej.project_export_jobs = int(value.Int64)
			}
		default:
			ej.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExportJob.
// This includes values selected through modifiers, order, etc.
func (ej *ExportJob) Value(name string) (ent.Value, error) {
	return ej.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ExportJob entity.
func (ej *ExportJob) QueryProject() *ProjectQuery {
	return NewExportJobClient(ej.config).QueryProject(ej)
}

// Update returns a builder for updating this ExportJob.
// Note that you need to call ExportJob.Unwrap() before calling this method if this ExportJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (ej *ExportJob) Update() *ExportJobUpdateOne {
	return NewExportJobClient(ej.config).UpdateOne(ej)
}

// Unwrap unwraps the ExportJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ej *ExportJob) Unwrap() *ExportJob {
	_tx, ok := ej.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExportJob is not a transactional entity")
	}
	ej.config.driver = _tx.drv
	return ej
}

// String implements the fmt.Stringer.
func (ej *ExportJob) String() string {
	var builder strings.Builder
	builder.WriteString("ExportJob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ej.ID))
	builder.WriteString("job_id=")
	builder.WriteString(ej.JobID)
	builder.WriteString(", ")
	builder.WriteString("export_type=")
	builder.WriteString(ej.ExportType)
	builder.WriteString(", ")
	builder.WriteString("output_path=")
	builder.WriteString(ej.OutputPath)
	builder.WriteString(", ")
	builder.WriteString("stage=")
	builder.WriteString(ej.Stage)
	builder.WriteString(", ")
	builder.WriteString("progress=")
	builder.WriteString(fmt.Sprintf("%v", ej.Progress))
	builder.WriteString(", ")
	builder.WriteString("current_file=")
	builder.WriteString(ej.CurrentFile)
	builder.WriteString(", ")
	builder.WriteString("total_files=")
	builder.WriteString(fmt.Sprintf("%v", ej.TotalFiles))
	builder.WriteString(", ")
	builder.WriteString("processed_files=")
	builder.WriteString(fmt.Sprintf("%v", ej.ProcessedFiles))
	builder.WriteString(", ")
	builder.WriteString("is_complete=")
	builder.WriteString(fmt.Sprintf("%v", ej.IsComplete))
	builder.WriteString(", ")
	builder.WriteString("has_error=")
	builder.WriteString(fmt.Sprintf("%v", ej.HasError))
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(ej.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("is_cancelled=")
	builder.WriteString(fmt.Sprintf("%v", ej.IsCancelled))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ej.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ej.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(ej.CompletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ExportJobs is a parsable slice of ExportJob.
type ExportJobs []*ExportJob
