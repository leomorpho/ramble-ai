// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MYAPP/ent/exportjob"
	"MYAPP/ent/predicate"
	"MYAPP/ent/project"
	"MYAPP/ent/videoclip"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableName(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProjectUpdate) SetDescription(s string) *ProjectUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDescription(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProjectUpdate) ClearDescription() *ProjectUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetPath sets the "path" field.
func (pu *ProjectUpdate) SetPath(s string) *ProjectUpdate {
	pu.mutation.SetPath(s)
	return pu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePath(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetPath(*s)
	}
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProjectUpdate) SetCreatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableCreatedAt(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProjectUpdate) SetUpdatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetAiModel sets the "ai_model" field.
func (pu *ProjectUpdate) SetAiModel(s string) *ProjectUpdate {
	pu.mutation.SetAiModel(s)
	return pu
}

// SetNillableAiModel sets the "ai_model" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAiModel(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetAiModel(*s)
	}
	return pu
}

// ClearAiModel clears the value of the "ai_model" field.
func (pu *ProjectUpdate) ClearAiModel() *ProjectUpdate {
	pu.mutation.ClearAiModel()
	return pu
}

// SetAiPrompt sets the "ai_prompt" field.
func (pu *ProjectUpdate) SetAiPrompt(s string) *ProjectUpdate {
	pu.mutation.SetAiPrompt(s)
	return pu
}

// SetNillableAiPrompt sets the "ai_prompt" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAiPrompt(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetAiPrompt(*s)
	}
	return pu
}

// ClearAiPrompt clears the value of the "ai_prompt" field.
func (pu *ProjectUpdate) ClearAiPrompt() *ProjectUpdate {
	pu.mutation.ClearAiPrompt()
	return pu
}

// SetAiSuggestionOrder sets the "ai_suggestion_order" field.
func (pu *ProjectUpdate) SetAiSuggestionOrder(i []interface{}) *ProjectUpdate {
	pu.mutation.SetAiSuggestionOrder(i)
	return pu
}

// AppendAiSuggestionOrder appends i to the "ai_suggestion_order" field.
func (pu *ProjectUpdate) AppendAiSuggestionOrder(i []interface{}) *ProjectUpdate {
	pu.mutation.AppendAiSuggestionOrder(i)
	return pu
}

// ClearAiSuggestionOrder clears the value of the "ai_suggestion_order" field.
func (pu *ProjectUpdate) ClearAiSuggestionOrder() *ProjectUpdate {
	pu.mutation.ClearAiSuggestionOrder()
	return pu
}

// SetAiSuggestionModel sets the "ai_suggestion_model" field.
func (pu *ProjectUpdate) SetAiSuggestionModel(s string) *ProjectUpdate {
	pu.mutation.SetAiSuggestionModel(s)
	return pu
}

// SetNillableAiSuggestionModel sets the "ai_suggestion_model" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAiSuggestionModel(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetAiSuggestionModel(*s)
	}
	return pu
}

// ClearAiSuggestionModel clears the value of the "ai_suggestion_model" field.
func (pu *ProjectUpdate) ClearAiSuggestionModel() *ProjectUpdate {
	pu.mutation.ClearAiSuggestionModel()
	return pu
}

// SetAiSuggestionCreatedAt sets the "ai_suggestion_created_at" field.
func (pu *ProjectUpdate) SetAiSuggestionCreatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetAiSuggestionCreatedAt(t)
	return pu
}

// SetNillableAiSuggestionCreatedAt sets the "ai_suggestion_created_at" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAiSuggestionCreatedAt(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetAiSuggestionCreatedAt(*t)
	}
	return pu
}

// ClearAiSuggestionCreatedAt clears the value of the "ai_suggestion_created_at" field.
func (pu *ProjectUpdate) ClearAiSuggestionCreatedAt() *ProjectUpdate {
	pu.mutation.ClearAiSuggestionCreatedAt()
	return pu
}

// SetAiHighlightModel sets the "ai_highlight_model" field.
func (pu *ProjectUpdate) SetAiHighlightModel(s string) *ProjectUpdate {
	pu.mutation.SetAiHighlightModel(s)
	return pu
}

// SetNillableAiHighlightModel sets the "ai_highlight_model" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAiHighlightModel(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetAiHighlightModel(*s)
	}
	return pu
}

// ClearAiHighlightModel clears the value of the "ai_highlight_model" field.
func (pu *ProjectUpdate) ClearAiHighlightModel() *ProjectUpdate {
	pu.mutation.ClearAiHighlightModel()
	return pu
}

// SetAiHighlightPrompt sets the "ai_highlight_prompt" field.
func (pu *ProjectUpdate) SetAiHighlightPrompt(s string) *ProjectUpdate {
	pu.mutation.SetAiHighlightPrompt(s)
	return pu
}

// SetNillableAiHighlightPrompt sets the "ai_highlight_prompt" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAiHighlightPrompt(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetAiHighlightPrompt(*s)
	}
	return pu
}

// ClearAiHighlightPrompt clears the value of the "ai_highlight_prompt" field.
func (pu *ProjectUpdate) ClearAiHighlightPrompt() *ProjectUpdate {
	pu.mutation.ClearAiHighlightPrompt()
	return pu
}

// SetActiveTab sets the "active_tab" field.
func (pu *ProjectUpdate) SetActiveTab(s string) *ProjectUpdate {
	pu.mutation.SetActiveTab(s)
	return pu
}

// SetNillableActiveTab sets the "active_tab" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableActiveTab(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetActiveTab(*s)
	}
	return pu
}

// ClearActiveTab clears the value of the "active_tab" field.
func (pu *ProjectUpdate) ClearActiveTab() *ProjectUpdate {
	pu.mutation.ClearActiveTab()
	return pu
}

// SetAiSilenceImprovements sets the "ai_silence_improvements" field.
func (pu *ProjectUpdate) SetAiSilenceImprovements(m []map[string]interface{}) *ProjectUpdate {
	pu.mutation.SetAiSilenceImprovements(m)
	return pu
}

// AppendAiSilenceImprovements appends m to the "ai_silence_improvements" field.
func (pu *ProjectUpdate) AppendAiSilenceImprovements(m []map[string]interface{}) *ProjectUpdate {
	pu.mutation.AppendAiSilenceImprovements(m)
	return pu
}

// ClearAiSilenceImprovements clears the value of the "ai_silence_improvements" field.
func (pu *ProjectUpdate) ClearAiSilenceImprovements() *ProjectUpdate {
	pu.mutation.ClearAiSilenceImprovements()
	return pu
}

// SetAiSilenceModel sets the "ai_silence_model" field.
func (pu *ProjectUpdate) SetAiSilenceModel(s string) *ProjectUpdate {
	pu.mutation.SetAiSilenceModel(s)
	return pu
}

// SetNillableAiSilenceModel sets the "ai_silence_model" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAiSilenceModel(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetAiSilenceModel(*s)
	}
	return pu
}

// ClearAiSilenceModel clears the value of the "ai_silence_model" field.
func (pu *ProjectUpdate) ClearAiSilenceModel() *ProjectUpdate {
	pu.mutation.ClearAiSilenceModel()
	return pu
}

// SetAiSilenceCreatedAt sets the "ai_silence_created_at" field.
func (pu *ProjectUpdate) SetAiSilenceCreatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetAiSilenceCreatedAt(t)
	return pu
}

// SetNillableAiSilenceCreatedAt sets the "ai_silence_created_at" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAiSilenceCreatedAt(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetAiSilenceCreatedAt(*t)
	}
	return pu
}

// ClearAiSilenceCreatedAt clears the value of the "ai_silence_created_at" field.
func (pu *ProjectUpdate) ClearAiSilenceCreatedAt() *ProjectUpdate {
	pu.mutation.ClearAiSilenceCreatedAt()
	return pu
}

// SetHighlightOrder sets the "highlight_order" field.
func (pu *ProjectUpdate) SetHighlightOrder(i []interface{}) *ProjectUpdate {
	pu.mutation.SetHighlightOrder(i)
	return pu
}

// AppendHighlightOrder appends i to the "highlight_order" field.
func (pu *ProjectUpdate) AppendHighlightOrder(i []interface{}) *ProjectUpdate {
	pu.mutation.AppendHighlightOrder(i)
	return pu
}

// ClearHighlightOrder clears the value of the "highlight_order" field.
func (pu *ProjectUpdate) ClearHighlightOrder() *ProjectUpdate {
	pu.mutation.ClearHighlightOrder()
	return pu
}

// SetOrderHistory sets the "order_history" field.
func (pu *ProjectUpdate) SetOrderHistory(s [][]string) *ProjectUpdate {
	pu.mutation.SetOrderHistory(s)
	return pu
}

// AppendOrderHistory appends s to the "order_history" field.
func (pu *ProjectUpdate) AppendOrderHistory(s [][]string) *ProjectUpdate {
	pu.mutation.AppendOrderHistory(s)
	return pu
}

// ClearOrderHistory clears the value of the "order_history" field.
func (pu *ProjectUpdate) ClearOrderHistory() *ProjectUpdate {
	pu.mutation.ClearOrderHistory()
	return pu
}

// SetOrderHistoryIndex sets the "order_history_index" field.
func (pu *ProjectUpdate) SetOrderHistoryIndex(i int) *ProjectUpdate {
	pu.mutation.ResetOrderHistoryIndex()
	pu.mutation.SetOrderHistoryIndex(i)
	return pu
}

// SetNillableOrderHistoryIndex sets the "order_history_index" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOrderHistoryIndex(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetOrderHistoryIndex(*i)
	}
	return pu
}

// AddOrderHistoryIndex adds i to the "order_history_index" field.
func (pu *ProjectUpdate) AddOrderHistoryIndex(i int) *ProjectUpdate {
	pu.mutation.AddOrderHistoryIndex(i)
	return pu
}

// ClearOrderHistoryIndex clears the value of the "order_history_index" field.
func (pu *ProjectUpdate) ClearOrderHistoryIndex() *ProjectUpdate {
	pu.mutation.ClearOrderHistoryIndex()
	return pu
}

// AddVideoClipIDs adds the "video_clips" edge to the VideoClip entity by IDs.
func (pu *ProjectUpdate) AddVideoClipIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddVideoClipIDs(ids...)
	return pu
}

// AddVideoClips adds the "video_clips" edges to the VideoClip entity.
func (pu *ProjectUpdate) AddVideoClips(v ...*VideoClip) *ProjectUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.AddVideoClipIDs(ids...)
}

// AddExportJobIDs adds the "export_jobs" edge to the ExportJob entity by IDs.
func (pu *ProjectUpdate) AddExportJobIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddExportJobIDs(ids...)
	return pu
}

// AddExportJobs adds the "export_jobs" edges to the ExportJob entity.
func (pu *ProjectUpdate) AddExportJobs(e ...*ExportJob) *ProjectUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.AddExportJobIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearVideoClips clears all "video_clips" edges to the VideoClip entity.
func (pu *ProjectUpdate) ClearVideoClips() *ProjectUpdate {
	pu.mutation.ClearVideoClips()
	return pu
}

// RemoveVideoClipIDs removes the "video_clips" edge to VideoClip entities by IDs.
func (pu *ProjectUpdate) RemoveVideoClipIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveVideoClipIDs(ids...)
	return pu
}

// RemoveVideoClips removes "video_clips" edges to VideoClip entities.
func (pu *ProjectUpdate) RemoveVideoClips(v ...*VideoClip) *ProjectUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.RemoveVideoClipIDs(ids...)
}

// ClearExportJobs clears all "export_jobs" edges to the ExportJob entity.
func (pu *ProjectUpdate) ClearExportJobs() *ProjectUpdate {
	pu.mutation.ClearExportJobs()
	return pu
}

// RemoveExportJobIDs removes the "export_jobs" edge to ExportJob entities by IDs.
func (pu *ProjectUpdate) RemoveExportJobIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveExportJobIDs(ids...)
	return pu
}

// RemoveExportJobs removes "export_jobs" edges to ExportJob entities.
func (pu *ProjectUpdate) RemoveExportJobs(e ...*ExportJob) *ProjectUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.RemoveExportJobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProjectUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProjectUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Path(); ok {
		if err := project.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Project.path": %w`, err)}
		}
	}
	return nil
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(project.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Path(); ok {
		_spec.SetField(project.FieldPath, field.TypeString, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.AiModel(); ok {
		_spec.SetField(project.FieldAiModel, field.TypeString, value)
	}
	if pu.mutation.AiModelCleared() {
		_spec.ClearField(project.FieldAiModel, field.TypeString)
	}
	if value, ok := pu.mutation.AiPrompt(); ok {
		_spec.SetField(project.FieldAiPrompt, field.TypeString, value)
	}
	if pu.mutation.AiPromptCleared() {
		_spec.ClearField(project.FieldAiPrompt, field.TypeString)
	}
	if value, ok := pu.mutation.AiSuggestionOrder(); ok {
		_spec.SetField(project.FieldAiSuggestionOrder, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedAiSuggestionOrder(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldAiSuggestionOrder, value)
		})
	}
	if pu.mutation.AiSuggestionOrderCleared() {
		_spec.ClearField(project.FieldAiSuggestionOrder, field.TypeJSON)
	}
	if value, ok := pu.mutation.AiSuggestionModel(); ok {
		_spec.SetField(project.FieldAiSuggestionModel, field.TypeString, value)
	}
	if pu.mutation.AiSuggestionModelCleared() {
		_spec.ClearField(project.FieldAiSuggestionModel, field.TypeString)
	}
	if value, ok := pu.mutation.AiSuggestionCreatedAt(); ok {
		_spec.SetField(project.FieldAiSuggestionCreatedAt, field.TypeTime, value)
	}
	if pu.mutation.AiSuggestionCreatedAtCleared() {
		_spec.ClearField(project.FieldAiSuggestionCreatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.AiHighlightModel(); ok {
		_spec.SetField(project.FieldAiHighlightModel, field.TypeString, value)
	}
	if pu.mutation.AiHighlightModelCleared() {
		_spec.ClearField(project.FieldAiHighlightModel, field.TypeString)
	}
	if value, ok := pu.mutation.AiHighlightPrompt(); ok {
		_spec.SetField(project.FieldAiHighlightPrompt, field.TypeString, value)
	}
	if pu.mutation.AiHighlightPromptCleared() {
		_spec.ClearField(project.FieldAiHighlightPrompt, field.TypeString)
	}
	if value, ok := pu.mutation.ActiveTab(); ok {
		_spec.SetField(project.FieldActiveTab, field.TypeString, value)
	}
	if pu.mutation.ActiveTabCleared() {
		_spec.ClearField(project.FieldActiveTab, field.TypeString)
	}
	if value, ok := pu.mutation.AiSilenceImprovements(); ok {
		_spec.SetField(project.FieldAiSilenceImprovements, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedAiSilenceImprovements(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldAiSilenceImprovements, value)
		})
	}
	if pu.mutation.AiSilenceImprovementsCleared() {
		_spec.ClearField(project.FieldAiSilenceImprovements, field.TypeJSON)
	}
	if value, ok := pu.mutation.AiSilenceModel(); ok {
		_spec.SetField(project.FieldAiSilenceModel, field.TypeString, value)
	}
	if pu.mutation.AiSilenceModelCleared() {
		_spec.ClearField(project.FieldAiSilenceModel, field.TypeString)
	}
	if value, ok := pu.mutation.AiSilenceCreatedAt(); ok {
		_spec.SetField(project.FieldAiSilenceCreatedAt, field.TypeTime, value)
	}
	if pu.mutation.AiSilenceCreatedAtCleared() {
		_spec.ClearField(project.FieldAiSilenceCreatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.HighlightOrder(); ok {
		_spec.SetField(project.FieldHighlightOrder, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedHighlightOrder(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldHighlightOrder, value)
		})
	}
	if pu.mutation.HighlightOrderCleared() {
		_spec.ClearField(project.FieldHighlightOrder, field.TypeJSON)
	}
	if value, ok := pu.mutation.OrderHistory(); ok {
		_spec.SetField(project.FieldOrderHistory, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedOrderHistory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldOrderHistory, value)
		})
	}
	if pu.mutation.OrderHistoryCleared() {
		_spec.ClearField(project.FieldOrderHistory, field.TypeJSON)
	}
	if value, ok := pu.mutation.OrderHistoryIndex(); ok {
		_spec.SetField(project.FieldOrderHistoryIndex, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedOrderHistoryIndex(); ok {
		_spec.AddField(project.FieldOrderHistoryIndex, field.TypeInt, value)
	}
	if pu.mutation.OrderHistoryIndexCleared() {
		_spec.ClearField(project.FieldOrderHistoryIndex, field.TypeInt)
	}
	if pu.mutation.VideoClipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VideoClipsTable,
			Columns: []string{project.VideoClipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoclip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedVideoClipsIDs(); len(nodes) > 0 && !pu.mutation.VideoClipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VideoClipsTable,
			Columns: []string{project.VideoClipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoclip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.VideoClipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VideoClipsTable,
			Columns: []string{project.VideoClipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoclip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ExportJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ExportJobsTable,
			Columns: []string{project.ExportJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedExportJobsIDs(); len(nodes) > 0 && !pu.mutation.ExportJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ExportJobsTable,
			Columns: []string{project.ExportJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ExportJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ExportJobsTable,
			Columns: []string{project.ExportJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableName(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProjectUpdateOne) SetDescription(s string) *ProjectUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDescription(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProjectUpdateOne) ClearDescription() *ProjectUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetPath sets the "path" field.
func (puo *ProjectUpdateOne) SetPath(s string) *ProjectUpdateOne {
	puo.mutation.SetPath(s)
	return puo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePath(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetPath(*s)
	}
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProjectUpdateOne) SetCreatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableCreatedAt(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProjectUpdateOne) SetUpdatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetAiModel sets the "ai_model" field.
func (puo *ProjectUpdateOne) SetAiModel(s string) *ProjectUpdateOne {
	puo.mutation.SetAiModel(s)
	return puo
}

// SetNillableAiModel sets the "ai_model" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAiModel(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetAiModel(*s)
	}
	return puo
}

// ClearAiModel clears the value of the "ai_model" field.
func (puo *ProjectUpdateOne) ClearAiModel() *ProjectUpdateOne {
	puo.mutation.ClearAiModel()
	return puo
}

// SetAiPrompt sets the "ai_prompt" field.
func (puo *ProjectUpdateOne) SetAiPrompt(s string) *ProjectUpdateOne {
	puo.mutation.SetAiPrompt(s)
	return puo
}

// SetNillableAiPrompt sets the "ai_prompt" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAiPrompt(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetAiPrompt(*s)
	}
	return puo
}

// ClearAiPrompt clears the value of the "ai_prompt" field.
func (puo *ProjectUpdateOne) ClearAiPrompt() *ProjectUpdateOne {
	puo.mutation.ClearAiPrompt()
	return puo
}

// SetAiSuggestionOrder sets the "ai_suggestion_order" field.
func (puo *ProjectUpdateOne) SetAiSuggestionOrder(i []interface{}) *ProjectUpdateOne {
	puo.mutation.SetAiSuggestionOrder(i)
	return puo
}

// AppendAiSuggestionOrder appends i to the "ai_suggestion_order" field.
func (puo *ProjectUpdateOne) AppendAiSuggestionOrder(i []interface{}) *ProjectUpdateOne {
	puo.mutation.AppendAiSuggestionOrder(i)
	return puo
}

// ClearAiSuggestionOrder clears the value of the "ai_suggestion_order" field.
func (puo *ProjectUpdateOne) ClearAiSuggestionOrder() *ProjectUpdateOne {
	puo.mutation.ClearAiSuggestionOrder()
	return puo
}

// SetAiSuggestionModel sets the "ai_suggestion_model" field.
func (puo *ProjectUpdateOne) SetAiSuggestionModel(s string) *ProjectUpdateOne {
	puo.mutation.SetAiSuggestionModel(s)
	return puo
}

// SetNillableAiSuggestionModel sets the "ai_suggestion_model" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAiSuggestionModel(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetAiSuggestionModel(*s)
	}
	return puo
}

// ClearAiSuggestionModel clears the value of the "ai_suggestion_model" field.
func (puo *ProjectUpdateOne) ClearAiSuggestionModel() *ProjectUpdateOne {
	puo.mutation.ClearAiSuggestionModel()
	return puo
}

// SetAiSuggestionCreatedAt sets the "ai_suggestion_created_at" field.
func (puo *ProjectUpdateOne) SetAiSuggestionCreatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetAiSuggestionCreatedAt(t)
	return puo
}

// SetNillableAiSuggestionCreatedAt sets the "ai_suggestion_created_at" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAiSuggestionCreatedAt(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetAiSuggestionCreatedAt(*t)
	}
	return puo
}

// ClearAiSuggestionCreatedAt clears the value of the "ai_suggestion_created_at" field.
func (puo *ProjectUpdateOne) ClearAiSuggestionCreatedAt() *ProjectUpdateOne {
	puo.mutation.ClearAiSuggestionCreatedAt()
	return puo
}

// SetAiHighlightModel sets the "ai_highlight_model" field.
func (puo *ProjectUpdateOne) SetAiHighlightModel(s string) *ProjectUpdateOne {
	puo.mutation.SetAiHighlightModel(s)
	return puo
}

// SetNillableAiHighlightModel sets the "ai_highlight_model" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAiHighlightModel(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetAiHighlightModel(*s)
	}
	return puo
}

// ClearAiHighlightModel clears the value of the "ai_highlight_model" field.
func (puo *ProjectUpdateOne) ClearAiHighlightModel() *ProjectUpdateOne {
	puo.mutation.ClearAiHighlightModel()
	return puo
}

// SetAiHighlightPrompt sets the "ai_highlight_prompt" field.
func (puo *ProjectUpdateOne) SetAiHighlightPrompt(s string) *ProjectUpdateOne {
	puo.mutation.SetAiHighlightPrompt(s)
	return puo
}

// SetNillableAiHighlightPrompt sets the "ai_highlight_prompt" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAiHighlightPrompt(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetAiHighlightPrompt(*s)
	}
	return puo
}

// ClearAiHighlightPrompt clears the value of the "ai_highlight_prompt" field.
func (puo *ProjectUpdateOne) ClearAiHighlightPrompt() *ProjectUpdateOne {
	puo.mutation.ClearAiHighlightPrompt()
	return puo
}

// SetActiveTab sets the "active_tab" field.
func (puo *ProjectUpdateOne) SetActiveTab(s string) *ProjectUpdateOne {
	puo.mutation.SetActiveTab(s)
	return puo
}

// SetNillableActiveTab sets the "active_tab" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableActiveTab(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetActiveTab(*s)
	}
	return puo
}

// ClearActiveTab clears the value of the "active_tab" field.
func (puo *ProjectUpdateOne) ClearActiveTab() *ProjectUpdateOne {
	puo.mutation.ClearActiveTab()
	return puo
}

// SetAiSilenceImprovements sets the "ai_silence_improvements" field.
func (puo *ProjectUpdateOne) SetAiSilenceImprovements(m []map[string]interface{}) *ProjectUpdateOne {
	puo.mutation.SetAiSilenceImprovements(m)
	return puo
}

// AppendAiSilenceImprovements appends m to the "ai_silence_improvements" field.
func (puo *ProjectUpdateOne) AppendAiSilenceImprovements(m []map[string]interface{}) *ProjectUpdateOne {
	puo.mutation.AppendAiSilenceImprovements(m)
	return puo
}

// ClearAiSilenceImprovements clears the value of the "ai_silence_improvements" field.
func (puo *ProjectUpdateOne) ClearAiSilenceImprovements() *ProjectUpdateOne {
	puo.mutation.ClearAiSilenceImprovements()
	return puo
}

// SetAiSilenceModel sets the "ai_silence_model" field.
func (puo *ProjectUpdateOne) SetAiSilenceModel(s string) *ProjectUpdateOne {
	puo.mutation.SetAiSilenceModel(s)
	return puo
}

// SetNillableAiSilenceModel sets the "ai_silence_model" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAiSilenceModel(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetAiSilenceModel(*s)
	}
	return puo
}

// ClearAiSilenceModel clears the value of the "ai_silence_model" field.
func (puo *ProjectUpdateOne) ClearAiSilenceModel() *ProjectUpdateOne {
	puo.mutation.ClearAiSilenceModel()
	return puo
}

// SetAiSilenceCreatedAt sets the "ai_silence_created_at" field.
func (puo *ProjectUpdateOne) SetAiSilenceCreatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetAiSilenceCreatedAt(t)
	return puo
}

// SetNillableAiSilenceCreatedAt sets the "ai_silence_created_at" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAiSilenceCreatedAt(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetAiSilenceCreatedAt(*t)
	}
	return puo
}

// ClearAiSilenceCreatedAt clears the value of the "ai_silence_created_at" field.
func (puo *ProjectUpdateOne) ClearAiSilenceCreatedAt() *ProjectUpdateOne {
	puo.mutation.ClearAiSilenceCreatedAt()
	return puo
}

// SetHighlightOrder sets the "highlight_order" field.
func (puo *ProjectUpdateOne) SetHighlightOrder(i []interface{}) *ProjectUpdateOne {
	puo.mutation.SetHighlightOrder(i)
	return puo
}

// AppendHighlightOrder appends i to the "highlight_order" field.
func (puo *ProjectUpdateOne) AppendHighlightOrder(i []interface{}) *ProjectUpdateOne {
	puo.mutation.AppendHighlightOrder(i)
	return puo
}

// ClearHighlightOrder clears the value of the "highlight_order" field.
func (puo *ProjectUpdateOne) ClearHighlightOrder() *ProjectUpdateOne {
	puo.mutation.ClearHighlightOrder()
	return puo
}

// SetOrderHistory sets the "order_history" field.
func (puo *ProjectUpdateOne) SetOrderHistory(s [][]string) *ProjectUpdateOne {
	puo.mutation.SetOrderHistory(s)
	return puo
}

// AppendOrderHistory appends s to the "order_history" field.
func (puo *ProjectUpdateOne) AppendOrderHistory(s [][]string) *ProjectUpdateOne {
	puo.mutation.AppendOrderHistory(s)
	return puo
}

// ClearOrderHistory clears the value of the "order_history" field.
func (puo *ProjectUpdateOne) ClearOrderHistory() *ProjectUpdateOne {
	puo.mutation.ClearOrderHistory()
	return puo
}

// SetOrderHistoryIndex sets the "order_history_index" field.
func (puo *ProjectUpdateOne) SetOrderHistoryIndex(i int) *ProjectUpdateOne {
	puo.mutation.ResetOrderHistoryIndex()
	puo.mutation.SetOrderHistoryIndex(i)
	return puo
}

// SetNillableOrderHistoryIndex sets the "order_history_index" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOrderHistoryIndex(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetOrderHistoryIndex(*i)
	}
	return puo
}

// AddOrderHistoryIndex adds i to the "order_history_index" field.
func (puo *ProjectUpdateOne) AddOrderHistoryIndex(i int) *ProjectUpdateOne {
	puo.mutation.AddOrderHistoryIndex(i)
	return puo
}

// ClearOrderHistoryIndex clears the value of the "order_history_index" field.
func (puo *ProjectUpdateOne) ClearOrderHistoryIndex() *ProjectUpdateOne {
	puo.mutation.ClearOrderHistoryIndex()
	return puo
}

// AddVideoClipIDs adds the "video_clips" edge to the VideoClip entity by IDs.
func (puo *ProjectUpdateOne) AddVideoClipIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddVideoClipIDs(ids...)
	return puo
}

// AddVideoClips adds the "video_clips" edges to the VideoClip entity.
func (puo *ProjectUpdateOne) AddVideoClips(v ...*VideoClip) *ProjectUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.AddVideoClipIDs(ids...)
}

// AddExportJobIDs adds the "export_jobs" edge to the ExportJob entity by IDs.
func (puo *ProjectUpdateOne) AddExportJobIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddExportJobIDs(ids...)
	return puo
}

// AddExportJobs adds the "export_jobs" edges to the ExportJob entity.
func (puo *ProjectUpdateOne) AddExportJobs(e ...*ExportJob) *ProjectUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.AddExportJobIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearVideoClips clears all "video_clips" edges to the VideoClip entity.
func (puo *ProjectUpdateOne) ClearVideoClips() *ProjectUpdateOne {
	puo.mutation.ClearVideoClips()
	return puo
}

// RemoveVideoClipIDs removes the "video_clips" edge to VideoClip entities by IDs.
func (puo *ProjectUpdateOne) RemoveVideoClipIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveVideoClipIDs(ids...)
	return puo
}

// RemoveVideoClips removes "video_clips" edges to VideoClip entities.
func (puo *ProjectUpdateOne) RemoveVideoClips(v ...*VideoClip) *ProjectUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.RemoveVideoClipIDs(ids...)
}

// ClearExportJobs clears all "export_jobs" edges to the ExportJob entity.
func (puo *ProjectUpdateOne) ClearExportJobs() *ProjectUpdateOne {
	puo.mutation.ClearExportJobs()
	return puo
}

// RemoveExportJobIDs removes the "export_jobs" edge to ExportJob entities by IDs.
func (puo *ProjectUpdateOne) RemoveExportJobIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveExportJobIDs(ids...)
	return puo
}

// RemoveExportJobs removes "export_jobs" edges to ExportJob entities.
func (puo *ProjectUpdateOne) RemoveExportJobs(e ...*ExportJob) *ProjectUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.RemoveExportJobIDs(ids...)
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProjectUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProjectUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Path(); ok {
		if err := project.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Project.path": %w`, err)}
		}
	}
	return nil
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(project.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Path(); ok {
		_spec.SetField(project.FieldPath, field.TypeString, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.AiModel(); ok {
		_spec.SetField(project.FieldAiModel, field.TypeString, value)
	}
	if puo.mutation.AiModelCleared() {
		_spec.ClearField(project.FieldAiModel, field.TypeString)
	}
	if value, ok := puo.mutation.AiPrompt(); ok {
		_spec.SetField(project.FieldAiPrompt, field.TypeString, value)
	}
	if puo.mutation.AiPromptCleared() {
		_spec.ClearField(project.FieldAiPrompt, field.TypeString)
	}
	if value, ok := puo.mutation.AiSuggestionOrder(); ok {
		_spec.SetField(project.FieldAiSuggestionOrder, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedAiSuggestionOrder(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldAiSuggestionOrder, value)
		})
	}
	if puo.mutation.AiSuggestionOrderCleared() {
		_spec.ClearField(project.FieldAiSuggestionOrder, field.TypeJSON)
	}
	if value, ok := puo.mutation.AiSuggestionModel(); ok {
		_spec.SetField(project.FieldAiSuggestionModel, field.TypeString, value)
	}
	if puo.mutation.AiSuggestionModelCleared() {
		_spec.ClearField(project.FieldAiSuggestionModel, field.TypeString)
	}
	if value, ok := puo.mutation.AiSuggestionCreatedAt(); ok {
		_spec.SetField(project.FieldAiSuggestionCreatedAt, field.TypeTime, value)
	}
	if puo.mutation.AiSuggestionCreatedAtCleared() {
		_spec.ClearField(project.FieldAiSuggestionCreatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.AiHighlightModel(); ok {
		_spec.SetField(project.FieldAiHighlightModel, field.TypeString, value)
	}
	if puo.mutation.AiHighlightModelCleared() {
		_spec.ClearField(project.FieldAiHighlightModel, field.TypeString)
	}
	if value, ok := puo.mutation.AiHighlightPrompt(); ok {
		_spec.SetField(project.FieldAiHighlightPrompt, field.TypeString, value)
	}
	if puo.mutation.AiHighlightPromptCleared() {
		_spec.ClearField(project.FieldAiHighlightPrompt, field.TypeString)
	}
	if value, ok := puo.mutation.ActiveTab(); ok {
		_spec.SetField(project.FieldActiveTab, field.TypeString, value)
	}
	if puo.mutation.ActiveTabCleared() {
		_spec.ClearField(project.FieldActiveTab, field.TypeString)
	}
	if value, ok := puo.mutation.AiSilenceImprovements(); ok {
		_spec.SetField(project.FieldAiSilenceImprovements, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedAiSilenceImprovements(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldAiSilenceImprovements, value)
		})
	}
	if puo.mutation.AiSilenceImprovementsCleared() {
		_spec.ClearField(project.FieldAiSilenceImprovements, field.TypeJSON)
	}
	if value, ok := puo.mutation.AiSilenceModel(); ok {
		_spec.SetField(project.FieldAiSilenceModel, field.TypeString, value)
	}
	if puo.mutation.AiSilenceModelCleared() {
		_spec.ClearField(project.FieldAiSilenceModel, field.TypeString)
	}
	if value, ok := puo.mutation.AiSilenceCreatedAt(); ok {
		_spec.SetField(project.FieldAiSilenceCreatedAt, field.TypeTime, value)
	}
	if puo.mutation.AiSilenceCreatedAtCleared() {
		_spec.ClearField(project.FieldAiSilenceCreatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.HighlightOrder(); ok {
		_spec.SetField(project.FieldHighlightOrder, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedHighlightOrder(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldHighlightOrder, value)
		})
	}
	if puo.mutation.HighlightOrderCleared() {
		_spec.ClearField(project.FieldHighlightOrder, field.TypeJSON)
	}
	if value, ok := puo.mutation.OrderHistory(); ok {
		_spec.SetField(project.FieldOrderHistory, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedOrderHistory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldOrderHistory, value)
		})
	}
	if puo.mutation.OrderHistoryCleared() {
		_spec.ClearField(project.FieldOrderHistory, field.TypeJSON)
	}
	if value, ok := puo.mutation.OrderHistoryIndex(); ok {
		_spec.SetField(project.FieldOrderHistoryIndex, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedOrderHistoryIndex(); ok {
		_spec.AddField(project.FieldOrderHistoryIndex, field.TypeInt, value)
	}
	if puo.mutation.OrderHistoryIndexCleared() {
		_spec.ClearField(project.FieldOrderHistoryIndex, field.TypeInt)
	}
	if puo.mutation.VideoClipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VideoClipsTable,
			Columns: []string{project.VideoClipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoclip.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedVideoClipsIDs(); len(nodes) > 0 && !puo.mutation.VideoClipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VideoClipsTable,
			Columns: []string{project.VideoClipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoclip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.VideoClipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.VideoClipsTable,
			Columns: []string{project.VideoClipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videoclip.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ExportJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ExportJobsTable,
			Columns: []string{project.ExportJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedExportJobsIDs(); len(nodes) > 0 && !puo.mutation.ExportJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ExportJobsTable,
			Columns: []string{project.ExportJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ExportJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ExportJobsTable,
			Columns: []string{project.ExportJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exportjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
