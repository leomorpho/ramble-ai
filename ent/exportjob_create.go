// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ramble-ai/ent/exportjob"
	"ramble-ai/ent/project"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExportJobCreate is the builder for creating a ExportJob entity.
type ExportJobCreate struct {
	config
	mutation *ExportJobMutation
	hooks    []Hook
}

// SetJobID sets the "job_id" field.
func (ejc *ExportJobCreate) SetJobID(s string) *ExportJobCreate {
	ejc.mutation.SetJobID(s)
	return ejc
}

// SetExportType sets the "export_type" field.
func (ejc *ExportJobCreate) SetExportType(s string) *ExportJobCreate {
	ejc.mutation.SetExportType(s)
	return ejc
}

// SetOutputPath sets the "output_path" field.
func (ejc *ExportJobCreate) SetOutputPath(s string) *ExportJobCreate {
	ejc.mutation.SetOutputPath(s)
	return ejc
}

// SetStage sets the "stage" field.
func (ejc *ExportJobCreate) SetStage(s string) *ExportJobCreate {
	ejc.mutation.SetStage(s)
	return ejc
}

// SetNillableStage sets the "stage" field if the given value is not nil.
func (ejc *ExportJobCreate) SetNillableStage(s *string) *ExportJobCreate {
	if s != nil {
		ejc.SetStage(*s)
	}
	return ejc
}

// SetProgress sets the "progress" field.
func (ejc *ExportJobCreate) SetProgress(f float64) *ExportJobCreate {
	ejc.mutation.SetProgress(f)
	return ejc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (ejc *ExportJobCreate) SetNillableProgress(f *float64) *ExportJobCreate {
	if f != nil {
		ejc.SetProgress(*f)
	}
	return ejc
}

// SetCurrentFile sets the "current_file" field.
func (ejc *ExportJobCreate) SetCurrentFile(s string) *ExportJobCreate {
	ejc.mutation.SetCurrentFile(s)
	return ejc
}

// SetNillableCurrentFile sets the "current_file" field if the given value is not nil.
func (ejc *ExportJobCreate) SetNillableCurrentFile(s *string) *ExportJobCreate {
	if s != nil {
		ejc.SetCurrentFile(*s)
	}
	return ejc
}

// SetTotalFiles sets the "total_files" field.
func (ejc *ExportJobCreate) SetTotalFiles(i int) *ExportJobCreate {
	ejc.mutation.SetTotalFiles(i)
	return ejc
}

// SetNillableTotalFiles sets the "total_files" field if the given value is not nil.
func (ejc *ExportJobCreate) SetNillableTotalFiles(i *int) *ExportJobCreate {
	if i != nil {
		ejc.SetTotalFiles(*i)
	}
	return ejc
}

// SetProcessedFiles sets the "processed_files" field.
func (ejc *ExportJobCreate) SetProcessedFiles(i int) *ExportJobCreate {
	ejc.mutation.SetProcessedFiles(i)
	return ejc
}

// SetNillableProcessedFiles sets the "processed_files" field if the given value is not nil.
func (ejc *ExportJobCreate) SetNillableProcessedFiles(i *int) *ExportJobCreate {
	if i != nil {
		ejc.SetProcessedFiles(*i)
	}
	return ejc
}

// SetIsComplete sets the "is_complete" field.
func (ejc *ExportJobCreate) SetIsComplete(b bool) *ExportJobCreate {
	ejc.mutation.SetIsComplete(b)
	return ejc
}

// SetNillableIsComplete sets the "is_complete" field if the given value is not nil.
func (ejc *ExportJobCreate) SetNillableIsComplete(b *bool) *ExportJobCreate {
	if b != nil {
		ejc.SetIsComplete(*b)
	}
	return ejc
}

// SetHasError sets the "has_error" field.
func (ejc *ExportJobCreate) SetHasError(b bool) *ExportJobCreate {
	ejc.mutation.SetHasError(b)
	return ejc
}

// SetNillableHasError sets the "has_error" field if the given value is not nil.
func (ejc *ExportJobCreate) SetNillableHasError(b *bool) *ExportJobCreate {
	if b != nil {
		ejc.SetHasError(*b)
	}
	return ejc
}

// SetErrorMessage sets the "error_message" field.
func (ejc *ExportJobCreate) SetErrorMessage(s string) *ExportJobCreate {
	ejc.mutation.SetErrorMessage(s)
	return ejc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (ejc *ExportJobCreate) SetNillableErrorMessage(s *string) *ExportJobCreate {
	if s != nil {
		ejc.SetErrorMessage(*s)
	}
	return ejc
}

// SetIsCancelled sets the "is_cancelled" field.
func (ejc *ExportJobCreate) SetIsCancelled(b bool) *ExportJobCreate {
	ejc.mutation.SetIsCancelled(b)
	return ejc
}

// SetNillableIsCancelled sets the "is_cancelled" field if the given value is not nil.
func (ejc *ExportJobCreate) SetNillableIsCancelled(b *bool) *ExportJobCreate {
	if b != nil {
		ejc.SetIsCancelled(*b)
	}
	return ejc
}

// SetCreatedAt sets the "created_at" field.
func (ejc *ExportJobCreate) SetCreatedAt(t time.Time) *ExportJobCreate {
	ejc.mutation.SetCreatedAt(t)
	return ejc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ejc *ExportJobCreate) SetNillableCreatedAt(t *time.Time) *ExportJobCreate {
	if t != nil {
		ejc.SetCreatedAt(*t)
	}
	return ejc
}

// SetUpdatedAt sets the "updated_at" field.
func (ejc *ExportJobCreate) SetUpdatedAt(t time.Time) *ExportJobCreate {
	ejc.mutation.SetUpdatedAt(t)
	return ejc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ejc *ExportJobCreate) SetNillableUpdatedAt(t *time.Time) *ExportJobCreate {
	if t != nil {
		ejc.SetUpdatedAt(*t)
	}
	return ejc
}

// SetCompletedAt sets the "completed_at" field.
func (ejc *ExportJobCreate) SetCompletedAt(t time.Time) *ExportJobCreate {
	ejc.mutation.SetCompletedAt(t)
	return ejc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (ejc *ExportJobCreate) SetNillableCompletedAt(t *time.Time) *ExportJobCreate {
	if t != nil {
		ejc.SetCompletedAt(*t)
	}
	return ejc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ejc *ExportJobCreate) SetProjectID(id int) *ExportJobCreate {
	ejc.mutation.SetProjectID(id)
	return ejc
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (ejc *ExportJobCreate) SetNillableProjectID(id *int) *ExportJobCreate {
	if id != nil {
		ejc = ejc.SetProjectID(*id)
	}
	return ejc
}

// SetProject sets the "project" edge to the Project entity.
func (ejc *ExportJobCreate) SetProject(p *Project) *ExportJobCreate {
	return ejc.SetProjectID(p.ID)
}

// Mutation returns the ExportJobMutation object of the builder.
func (ejc *ExportJobCreate) Mutation() *ExportJobMutation {
	return ejc.mutation
}

// Save creates the ExportJob in the database.
func (ejc *ExportJobCreate) Save(ctx context.Context) (*ExportJob, error) {
	ejc.defaults()
	return withHooks(ctx, ejc.sqlSave, ejc.mutation, ejc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ejc *ExportJobCreate) SaveX(ctx context.Context) *ExportJob {
	v, err := ejc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ejc *ExportJobCreate) Exec(ctx context.Context) error {
	_, err := ejc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ejc *ExportJobCreate) ExecX(ctx context.Context) {
	if err := ejc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ejc *ExportJobCreate) defaults() {
	if _, ok := ejc.mutation.Stage(); !ok {
		v := exportjob.DefaultStage
		ejc.mutation.SetStage(v)
	}
	if _, ok := ejc.mutation.Progress(); !ok {
		v := exportjob.DefaultProgress
		ejc.mutation.SetProgress(v)
	}
	if _, ok := ejc.mutation.TotalFiles(); !ok {
		v := exportjob.DefaultTotalFiles
		ejc.mutation.SetTotalFiles(v)
	}
	if _, ok := ejc.mutation.ProcessedFiles(); !ok {
		v := exportjob.DefaultProcessedFiles
		ejc.mutation.SetProcessedFiles(v)
	}
	if _, ok := ejc.mutation.IsComplete(); !ok {
		v := exportjob.DefaultIsComplete
		ejc.mutation.SetIsComplete(v)
	}
	if _, ok := ejc.mutation.HasError(); !ok {
		v := exportjob.DefaultHasError
		ejc.mutation.SetHasError(v)
	}
	if _, ok := ejc.mutation.IsCancelled(); !ok {
		v := exportjob.DefaultIsCancelled
		ejc.mutation.SetIsCancelled(v)
	}
	if _, ok := ejc.mutation.CreatedAt(); !ok {
		v := exportjob.DefaultCreatedAt()
		ejc.mutation.SetCreatedAt(v)
	}
	if _, ok := ejc.mutation.UpdatedAt(); !ok {
		v := exportjob.DefaultUpdatedAt()
		ejc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ejc *ExportJobCreate) check() error {
	if _, ok := ejc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`ent: missing required field "ExportJob.job_id"`)}
	}
	if v, ok := ejc.mutation.JobID(); ok {
		if err := exportjob.JobIDValidator(v); err != nil {
			return &ValidationError{Name: "job_id", err: fmt.Errorf(`ent: validator failed for field "ExportJob.job_id": %w`, err)}
		}
	}
	if _, ok := ejc.mutation.ExportType(); !ok {
		return &ValidationError{Name: "export_type", err: errors.New(`ent: missing required field "ExportJob.export_type"`)}
	}
	if v, ok := ejc.mutation.ExportType(); ok {
		if err := exportjob.ExportTypeValidator(v); err != nil {
			return &ValidationError{Name: "export_type", err: fmt.Errorf(`ent: validator failed for field "ExportJob.export_type": %w`, err)}
		}
	}
	if _, ok := ejc.mutation.OutputPath(); !ok {
		return &ValidationError{Name: "output_path", err: errors.New(`ent: missing required field "ExportJob.output_path"`)}
	}
	if v, ok := ejc.mutation.OutputPath(); ok {
		if err := exportjob.OutputPathValidator(v); err != nil {
			return &ValidationError{Name: "output_path", err: fmt.Errorf(`ent: validator failed for field "ExportJob.output_path": %w`, err)}
		}
	}
	if _, ok := ejc.mutation.Stage(); !ok {
		return &ValidationError{Name: "stage", err: errors.New(`ent: missing required field "ExportJob.stage"`)}
	}
	if _, ok := ejc.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "ExportJob.progress"`)}
	}
	if _, ok := ejc.mutation.TotalFiles(); !ok {
		return &ValidationError{Name: "total_files", err: errors.New(`ent: missing required field "ExportJob.total_files"`)}
	}
	if _, ok := ejc.mutation.ProcessedFiles(); !ok {
		return &ValidationError{Name: "processed_files", err: errors.New(`ent: missing required field "ExportJob.processed_files"`)}
	}
	if _, ok := ejc.mutation.IsComplete(); !ok {
		return &ValidationError{Name: "is_complete", err: errors.New(`ent: missing required field "ExportJob.is_complete"`)}
	}
	if _, ok := ejc.mutation.HasError(); !ok {
		return &ValidationError{Name: "has_error", err: errors.New(`ent: missing required field "ExportJob.has_error"`)}
	}
	if _, ok := ejc.mutation.IsCancelled(); !ok {
		return &ValidationError{Name: "is_cancelled", err: errors.New(`ent: missing required field "ExportJob.is_cancelled"`)}
	}
	if _, ok := ejc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ExportJob.created_at"`)}
	}
	if _, ok := ejc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ExportJob.updated_at"`)}
	}
	return nil
}

func (ejc *ExportJobCreate) sqlSave(ctx context.Context) (*ExportJob, error) {
	if err := ejc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ejc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ejc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ejc.mutation.id = &_node.ID
	ejc.mutation.done = true
	return _node, nil
}

func (ejc *ExportJobCreate) createSpec() (*ExportJob, *sqlgraph.CreateSpec) {
	var (
		_node = &ExportJob{config: ejc.config}
		_spec = sqlgraph.NewCreateSpec(exportjob.Table, sqlgraph.NewFieldSpec(exportjob.FieldID, field.TypeInt))
	)
	if value, ok := ejc.mutation.JobID(); ok {
		_spec.SetField(exportjob.FieldJobID, field.TypeString, value)
		_node.JobID = value
	}
	if value, ok := ejc.mutation.ExportType(); ok {
		_spec.SetField(exportjob.FieldExportType, field.TypeString, value)
		_node.ExportType = value
	}
	if value, ok := ejc.mutation.OutputPath(); ok {
		_spec.SetField(exportjob.FieldOutputPath, field.TypeString, value)
		_node.OutputPath = value
	}
	if value, ok := ejc.mutation.Stage(); ok {
		_spec.SetField(exportjob.FieldStage, field.TypeString, value)
		_node.Stage = value
	}
	if value, ok := ejc.mutation.Progress(); ok {
		_spec.SetField(exportjob.FieldProgress, field.TypeFloat64, value)
		_node.Progress = value
	}
	if value, ok := ejc.mutation.CurrentFile(); ok {
		_spec.SetField(exportjob.FieldCurrentFile, field.TypeString, value)
		_node.CurrentFile = value
	}
	if value, ok := ejc.mutation.TotalFiles(); ok {
		_spec.SetField(exportjob.FieldTotalFiles, field.TypeInt, value)
		_node.TotalFiles = value
	}
	if value, ok := ejc.mutation.ProcessedFiles(); ok {
		_spec.SetField(exportjob.FieldProcessedFiles, field.TypeInt, value)
		_node.ProcessedFiles = value
	}
	if value, ok := ejc.mutation.IsComplete(); ok {
		_spec.SetField(exportjob.FieldIsComplete, field.TypeBool, value)
		_node.IsComplete = value
	}
	if value, ok := ejc.mutation.HasError(); ok {
		_spec.SetField(exportjob.FieldHasError, field.TypeBool, value)
		_node.HasError = value
	}
	if value, ok := ejc.mutation.ErrorMessage(); ok {
		_spec.SetField(exportjob.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := ejc.mutation.IsCancelled(); ok {
		_spec.SetField(exportjob.FieldIsCancelled, field.TypeBool, value)
		_node.IsCancelled = value
	}
	if value, ok := ejc.mutation.CreatedAt(); ok {
		_spec.SetField(exportjob.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ejc.mutation.UpdatedAt(); ok {
		_spec.SetField(exportjob.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ejc.mutation.CompletedAt(); ok {
		_spec.SetField(exportjob.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if nodes := ejc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exportjob.ProjectTable,
			Columns: []string{exportjob.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_export_jobs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExportJobCreateBulk is the builder for creating many ExportJob entities in bulk.
type ExportJobCreateBulk struct {
	config
	err      error
	builders []*ExportJobCreate
}

// Save creates the ExportJob entities in the database.
func (ejcb *ExportJobCreateBulk) Save(ctx context.Context) ([]*ExportJob, error) {
	if ejcb.err != nil {
		return nil, ejcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ejcb.builders))
	nodes := make([]*ExportJob, len(ejcb.builders))
	mutators := make([]Mutator, len(ejcb.builders))
	for i := range ejcb.builders {
		func(i int, root context.Context) {
			builder := ejcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExportJobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ejcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ejcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ejcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ejcb *ExportJobCreateBulk) SaveX(ctx context.Context) []*ExportJob {
	v, err := ejcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ejcb *ExportJobCreateBulk) Exec(ctx context.Context) error {
	_, err := ejcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ejcb *ExportJobCreateBulk) ExecX(ctx context.Context) {
	if err := ejcb.Exec(ctx); err != nil {
		panic(err)
	}
}
