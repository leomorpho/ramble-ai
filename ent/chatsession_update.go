// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MYAPP/ent/chatmessage"
	"MYAPP/ent/chatsession"
	"MYAPP/ent/predicate"
	"MYAPP/ent/project"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChatSessionUpdate is the builder for updating ChatSession entities.
type ChatSessionUpdate struct {
	config
	hooks    []Hook
	mutation *ChatSessionMutation
}

// Where appends a list predicates to the ChatSessionUpdate builder.
func (csu *ChatSessionUpdate) Where(ps ...predicate.ChatSession) *ChatSessionUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetSessionID sets the "session_id" field.
func (csu *ChatSessionUpdate) SetSessionID(s string) *ChatSessionUpdate {
	csu.mutation.SetSessionID(s)
	return csu
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (csu *ChatSessionUpdate) SetNillableSessionID(s *string) *ChatSessionUpdate {
	if s != nil {
		csu.SetSessionID(*s)
	}
	return csu
}

// SetProjectID sets the "project_id" field.
func (csu *ChatSessionUpdate) SetProjectID(i int) *ChatSessionUpdate {
	csu.mutation.SetProjectID(i)
	return csu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (csu *ChatSessionUpdate) SetNillableProjectID(i *int) *ChatSessionUpdate {
	if i != nil {
		csu.SetProjectID(*i)
	}
	return csu
}

// SetEndpointID sets the "endpoint_id" field.
func (csu *ChatSessionUpdate) SetEndpointID(s string) *ChatSessionUpdate {
	csu.mutation.SetEndpointID(s)
	return csu
}

// SetNillableEndpointID sets the "endpoint_id" field if the given value is not nil.
func (csu *ChatSessionUpdate) SetNillableEndpointID(s *string) *ChatSessionUpdate {
	if s != nil {
		csu.SetEndpointID(*s)
	}
	return csu
}

// SetCreatedAt sets the "created_at" field.
func (csu *ChatSessionUpdate) SetCreatedAt(t time.Time) *ChatSessionUpdate {
	csu.mutation.SetCreatedAt(t)
	return csu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csu *ChatSessionUpdate) SetNillableCreatedAt(t *time.Time) *ChatSessionUpdate {
	if t != nil {
		csu.SetCreatedAt(*t)
	}
	return csu
}

// SetUpdatedAt sets the "updated_at" field.
func (csu *ChatSessionUpdate) SetUpdatedAt(t time.Time) *ChatSessionUpdate {
	csu.mutation.SetUpdatedAt(t)
	return csu
}

// SetProject sets the "project" edge to the Project entity.
func (csu *ChatSessionUpdate) SetProject(p *Project) *ChatSessionUpdate {
	return csu.SetProjectID(p.ID)
}

// AddMessageIDs adds the "messages" edge to the ChatMessage entity by IDs.
func (csu *ChatSessionUpdate) AddMessageIDs(ids ...int) *ChatSessionUpdate {
	csu.mutation.AddMessageIDs(ids...)
	return csu
}

// AddMessages adds the "messages" edges to the ChatMessage entity.
func (csu *ChatSessionUpdate) AddMessages(c ...*ChatMessage) *ChatSessionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csu.AddMessageIDs(ids...)
}

// Mutation returns the ChatSessionMutation object of the builder.
func (csu *ChatSessionUpdate) Mutation() *ChatSessionMutation {
	return csu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (csu *ChatSessionUpdate) ClearProject() *ChatSessionUpdate {
	csu.mutation.ClearProject()
	return csu
}

// ClearMessages clears all "messages" edges to the ChatMessage entity.
func (csu *ChatSessionUpdate) ClearMessages() *ChatSessionUpdate {
	csu.mutation.ClearMessages()
	return csu
}

// RemoveMessageIDs removes the "messages" edge to ChatMessage entities by IDs.
func (csu *ChatSessionUpdate) RemoveMessageIDs(ids ...int) *ChatSessionUpdate {
	csu.mutation.RemoveMessageIDs(ids...)
	return csu
}

// RemoveMessages removes "messages" edges to ChatMessage entities.
func (csu *ChatSessionUpdate) RemoveMessages(c ...*ChatMessage) *ChatSessionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csu.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *ChatSessionUpdate) Save(ctx context.Context) (int, error) {
	csu.defaults()
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *ChatSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *ChatSessionUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *ChatSessionUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csu *ChatSessionUpdate) defaults() {
	if _, ok := csu.mutation.UpdatedAt(); !ok {
		v := chatsession.UpdateDefaultUpdatedAt()
		csu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *ChatSessionUpdate) check() error {
	if v, ok := csu.mutation.SessionID(); ok {
		if err := chatsession.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "session_id", err: fmt.Errorf(`ent: validator failed for field "ChatSession.session_id": %w`, err)}
		}
	}
	if v, ok := csu.mutation.EndpointID(); ok {
		if err := chatsession.EndpointIDValidator(v); err != nil {
			return &ValidationError{Name: "endpoint_id", err: fmt.Errorf(`ent: validator failed for field "ChatSession.endpoint_id": %w`, err)}
		}
	}
	if csu.mutation.ProjectCleared() && len(csu.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChatSession.project"`)
	}
	return nil
}

func (csu *ChatSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatsession.Table, chatsession.Columns, sqlgraph.NewFieldSpec(chatsession.FieldID, field.TypeInt))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.SessionID(); ok {
		_spec.SetField(chatsession.FieldSessionID, field.TypeString, value)
	}
	if value, ok := csu.mutation.EndpointID(); ok {
		_spec.SetField(chatsession.FieldEndpointID, field.TypeString, value)
	}
	if value, ok := csu.mutation.CreatedAt(); ok {
		_spec.SetField(chatsession.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := csu.mutation.UpdatedAt(); ok {
		_spec.SetField(chatsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if csu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatsession.ProjectTable,
			Columns: []string{chatsession.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatsession.ProjectTable,
			Columns: []string{chatsession.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatsession.MessagesTable,
			Columns: []string{chatsession.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !csu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatsession.MessagesTable,
			Columns: []string{chatsession.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatsession.MessagesTable,
			Columns: []string{chatsession.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// ChatSessionUpdateOne is the builder for updating a single ChatSession entity.
type ChatSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatSessionMutation
}

// SetSessionID sets the "session_id" field.
func (csuo *ChatSessionUpdateOne) SetSessionID(s string) *ChatSessionUpdateOne {
	csuo.mutation.SetSessionID(s)
	return csuo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (csuo *ChatSessionUpdateOne) SetNillableSessionID(s *string) *ChatSessionUpdateOne {
	if s != nil {
		csuo.SetSessionID(*s)
	}
	return csuo
}

// SetProjectID sets the "project_id" field.
func (csuo *ChatSessionUpdateOne) SetProjectID(i int) *ChatSessionUpdateOne {
	csuo.mutation.SetProjectID(i)
	return csuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (csuo *ChatSessionUpdateOne) SetNillableProjectID(i *int) *ChatSessionUpdateOne {
	if i != nil {
		csuo.SetProjectID(*i)
	}
	return csuo
}

// SetEndpointID sets the "endpoint_id" field.
func (csuo *ChatSessionUpdateOne) SetEndpointID(s string) *ChatSessionUpdateOne {
	csuo.mutation.SetEndpointID(s)
	return csuo
}

// SetNillableEndpointID sets the "endpoint_id" field if the given value is not nil.
func (csuo *ChatSessionUpdateOne) SetNillableEndpointID(s *string) *ChatSessionUpdateOne {
	if s != nil {
		csuo.SetEndpointID(*s)
	}
	return csuo
}

// SetCreatedAt sets the "created_at" field.
func (csuo *ChatSessionUpdateOne) SetCreatedAt(t time.Time) *ChatSessionUpdateOne {
	csuo.mutation.SetCreatedAt(t)
	return csuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csuo *ChatSessionUpdateOne) SetNillableCreatedAt(t *time.Time) *ChatSessionUpdateOne {
	if t != nil {
		csuo.SetCreatedAt(*t)
	}
	return csuo
}

// SetUpdatedAt sets the "updated_at" field.
func (csuo *ChatSessionUpdateOne) SetUpdatedAt(t time.Time) *ChatSessionUpdateOne {
	csuo.mutation.SetUpdatedAt(t)
	return csuo
}

// SetProject sets the "project" edge to the Project entity.
func (csuo *ChatSessionUpdateOne) SetProject(p *Project) *ChatSessionUpdateOne {
	return csuo.SetProjectID(p.ID)
}

// AddMessageIDs adds the "messages" edge to the ChatMessage entity by IDs.
func (csuo *ChatSessionUpdateOne) AddMessageIDs(ids ...int) *ChatSessionUpdateOne {
	csuo.mutation.AddMessageIDs(ids...)
	return csuo
}

// AddMessages adds the "messages" edges to the ChatMessage entity.
func (csuo *ChatSessionUpdateOne) AddMessages(c ...*ChatMessage) *ChatSessionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuo.AddMessageIDs(ids...)
}

// Mutation returns the ChatSessionMutation object of the builder.
func (csuo *ChatSessionUpdateOne) Mutation() *ChatSessionMutation {
	return csuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (csuo *ChatSessionUpdateOne) ClearProject() *ChatSessionUpdateOne {
	csuo.mutation.ClearProject()
	return csuo
}

// ClearMessages clears all "messages" edges to the ChatMessage entity.
func (csuo *ChatSessionUpdateOne) ClearMessages() *ChatSessionUpdateOne {
	csuo.mutation.ClearMessages()
	return csuo
}

// RemoveMessageIDs removes the "messages" edge to ChatMessage entities by IDs.
func (csuo *ChatSessionUpdateOne) RemoveMessageIDs(ids ...int) *ChatSessionUpdateOne {
	csuo.mutation.RemoveMessageIDs(ids...)
	return csuo
}

// RemoveMessages removes "messages" edges to ChatMessage entities.
func (csuo *ChatSessionUpdateOne) RemoveMessages(c ...*ChatMessage) *ChatSessionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuo.RemoveMessageIDs(ids...)
}

// Where appends a list predicates to the ChatSessionUpdate builder.
func (csuo *ChatSessionUpdateOne) Where(ps ...predicate.ChatSession) *ChatSessionUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *ChatSessionUpdateOne) Select(field string, fields ...string) *ChatSessionUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated ChatSession entity.
func (csuo *ChatSessionUpdateOne) Save(ctx context.Context) (*ChatSession, error) {
	csuo.defaults()
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *ChatSessionUpdateOne) SaveX(ctx context.Context) *ChatSession {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *ChatSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *ChatSessionUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csuo *ChatSessionUpdateOne) defaults() {
	if _, ok := csuo.mutation.UpdatedAt(); !ok {
		v := chatsession.UpdateDefaultUpdatedAt()
		csuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *ChatSessionUpdateOne) check() error {
	if v, ok := csuo.mutation.SessionID(); ok {
		if err := chatsession.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "session_id", err: fmt.Errorf(`ent: validator failed for field "ChatSession.session_id": %w`, err)}
		}
	}
	if v, ok := csuo.mutation.EndpointID(); ok {
		if err := chatsession.EndpointIDValidator(v); err != nil {
			return &ValidationError{Name: "endpoint_id", err: fmt.Errorf(`ent: validator failed for field "ChatSession.endpoint_id": %w`, err)}
		}
	}
	if csuo.mutation.ProjectCleared() && len(csuo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChatSession.project"`)
	}
	return nil
}

func (csuo *ChatSessionUpdateOne) sqlSave(ctx context.Context) (_node *ChatSession, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatsession.Table, chatsession.Columns, sqlgraph.NewFieldSpec(chatsession.FieldID, field.TypeInt))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatsession.FieldID)
		for _, f := range fields {
			if !chatsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.SessionID(); ok {
		_spec.SetField(chatsession.FieldSessionID, field.TypeString, value)
	}
	if value, ok := csuo.mutation.EndpointID(); ok {
		_spec.SetField(chatsession.FieldEndpointID, field.TypeString, value)
	}
	if value, ok := csuo.mutation.CreatedAt(); ok {
		_spec.SetField(chatsession.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := csuo.mutation.UpdatedAt(); ok {
		_spec.SetField(chatsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if csuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatsession.ProjectTable,
			Columns: []string{chatsession.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatsession.ProjectTable,
			Columns: []string{chatsession.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatsession.MessagesTable,
			Columns: []string{chatsession.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !csuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatsession.MessagesTable,
			Columns: []string{chatsession.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatsession.MessagesTable,
			Columns: []string{chatsession.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChatSession{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
