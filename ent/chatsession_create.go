// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ramble-ai/ent/chatmessage"
	"ramble-ai/ent/chatsession"
	"ramble-ai/ent/project"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChatSessionCreate is the builder for creating a ChatSession entity.
type ChatSessionCreate struct {
	config
	mutation *ChatSessionMutation
	hooks    []Hook
}

// SetSessionID sets the "session_id" field.
func (csc *ChatSessionCreate) SetSessionID(s string) *ChatSessionCreate {
	csc.mutation.SetSessionID(s)
	return csc
}

// SetProjectID sets the "project_id" field.
func (csc *ChatSessionCreate) SetProjectID(i int) *ChatSessionCreate {
	csc.mutation.SetProjectID(i)
	return csc
}

// SetEndpointID sets the "endpoint_id" field.
func (csc *ChatSessionCreate) SetEndpointID(s string) *ChatSessionCreate {
	csc.mutation.SetEndpointID(s)
	return csc
}

// SetCreatedAt sets the "created_at" field.
func (csc *ChatSessionCreate) SetCreatedAt(t time.Time) *ChatSessionCreate {
	csc.mutation.SetCreatedAt(t)
	return csc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csc *ChatSessionCreate) SetNillableCreatedAt(t *time.Time) *ChatSessionCreate {
	if t != nil {
		csc.SetCreatedAt(*t)
	}
	return csc
}

// SetUpdatedAt sets the "updated_at" field.
func (csc *ChatSessionCreate) SetUpdatedAt(t time.Time) *ChatSessionCreate {
	csc.mutation.SetUpdatedAt(t)
	return csc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (csc *ChatSessionCreate) SetNillableUpdatedAt(t *time.Time) *ChatSessionCreate {
	if t != nil {
		csc.SetUpdatedAt(*t)
	}
	return csc
}

// SetSelectedModel sets the "selected_model" field.
func (csc *ChatSessionCreate) SetSelectedModel(s string) *ChatSessionCreate {
	csc.mutation.SetSelectedModel(s)
	return csc
}

// SetNillableSelectedModel sets the "selected_model" field if the given value is not nil.
func (csc *ChatSessionCreate) SetNillableSelectedModel(s *string) *ChatSessionCreate {
	if s != nil {
		csc.SetSelectedModel(*s)
	}
	return csc
}

// SetProject sets the "project" edge to the Project entity.
func (csc *ChatSessionCreate) SetProject(p *Project) *ChatSessionCreate {
	return csc.SetProjectID(p.ID)
}

// AddMessageIDs adds the "messages" edge to the ChatMessage entity by IDs.
func (csc *ChatSessionCreate) AddMessageIDs(ids ...int) *ChatSessionCreate {
	csc.mutation.AddMessageIDs(ids...)
	return csc
}

// AddMessages adds the "messages" edges to the ChatMessage entity.
func (csc *ChatSessionCreate) AddMessages(c ...*ChatMessage) *ChatSessionCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csc.AddMessageIDs(ids...)
}

// Mutation returns the ChatSessionMutation object of the builder.
func (csc *ChatSessionCreate) Mutation() *ChatSessionMutation {
	return csc.mutation
}

// Save creates the ChatSession in the database.
func (csc *ChatSessionCreate) Save(ctx context.Context) (*ChatSession, error) {
	csc.defaults()
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *ChatSessionCreate) SaveX(ctx context.Context) *ChatSession {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *ChatSessionCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *ChatSessionCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *ChatSessionCreate) defaults() {
	if _, ok := csc.mutation.CreatedAt(); !ok {
		v := chatsession.DefaultCreatedAt()
		csc.mutation.SetCreatedAt(v)
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		v := chatsession.DefaultUpdatedAt()
		csc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *ChatSessionCreate) check() error {
	if _, ok := csc.mutation.SessionID(); !ok {
		return &ValidationError{Name: "session_id", err: errors.New(`ent: missing required field "ChatSession.session_id"`)}
	}
	if v, ok := csc.mutation.SessionID(); ok {
		if err := chatsession.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "session_id", err: fmt.Errorf(`ent: validator failed for field "ChatSession.session_id": %w`, err)}
		}
	}
	if _, ok := csc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "ChatSession.project_id"`)}
	}
	if _, ok := csc.mutation.EndpointID(); !ok {
		return &ValidationError{Name: "endpoint_id", err: errors.New(`ent: missing required field "ChatSession.endpoint_id"`)}
	}
	if v, ok := csc.mutation.EndpointID(); ok {
		if err := chatsession.EndpointIDValidator(v); err != nil {
			return &ValidationError{Name: "endpoint_id", err: fmt.Errorf(`ent: validator failed for field "ChatSession.endpoint_id": %w`, err)}
		}
	}
	if _, ok := csc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ChatSession.created_at"`)}
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ChatSession.updated_at"`)}
	}
	if len(csc.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "ChatSession.project"`)}
	}
	return nil
}

func (csc *ChatSessionCreate) sqlSave(ctx context.Context) (*ChatSession, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *ChatSessionCreate) createSpec() (*ChatSession, *sqlgraph.CreateSpec) {
	var (
		_node = &ChatSession{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(chatsession.Table, sqlgraph.NewFieldSpec(chatsession.FieldID, field.TypeInt))
	)
	if value, ok := csc.mutation.SessionID(); ok {
		_spec.SetField(chatsession.FieldSessionID, field.TypeString, value)
		_node.SessionID = value
	}
	if value, ok := csc.mutation.EndpointID(); ok {
		_spec.SetField(chatsession.FieldEndpointID, field.TypeString, value)
		_node.EndpointID = value
	}
	if value, ok := csc.mutation.CreatedAt(); ok {
		_spec.SetField(chatsession.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := csc.mutation.UpdatedAt(); ok {
		_spec.SetField(chatsession.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := csc.mutation.SelectedModel(); ok {
		_spec.SetField(chatsession.FieldSelectedModel, field.TypeString, value)
		_node.SelectedModel = value
	}
	if nodes := csc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatsession.ProjectTable,
			Columns: []string{chatsession.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chatsession.MessagesTable,
			Columns: []string{chatsession.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChatSessionCreateBulk is the builder for creating many ChatSession entities in bulk.
type ChatSessionCreateBulk struct {
	config
	err      error
	builders []*ChatSessionCreate
}

// Save creates the ChatSession entities in the database.
func (cscb *ChatSessionCreateBulk) Save(ctx context.Context) ([]*ChatSession, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*ChatSession, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *ChatSessionCreateBulk) SaveX(ctx context.Context) []*ChatSession {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *ChatSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *ChatSessionCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
