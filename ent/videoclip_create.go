// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MYAPP/ent/project"
	"MYAPP/ent/videoclip"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoClipCreate is the builder for creating a VideoClip entity.
type VideoClipCreate struct {
	config
	mutation *VideoClipMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (vcc *VideoClipCreate) SetName(s string) *VideoClipCreate {
	vcc.mutation.SetName(s)
	return vcc
}

// SetDescription sets the "description" field.
func (vcc *VideoClipCreate) SetDescription(s string) *VideoClipCreate {
	vcc.mutation.SetDescription(s)
	return vcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vcc *VideoClipCreate) SetNillableDescription(s *string) *VideoClipCreate {
	if s != nil {
		vcc.SetDescription(*s)
	}
	return vcc
}

// SetFilePath sets the "file_path" field.
func (vcc *VideoClipCreate) SetFilePath(s string) *VideoClipCreate {
	vcc.mutation.SetFilePath(s)
	return vcc
}

// SetDuration sets the "duration" field.
func (vcc *VideoClipCreate) SetDuration(f float64) *VideoClipCreate {
	vcc.mutation.SetDuration(f)
	return vcc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (vcc *VideoClipCreate) SetNillableDuration(f *float64) *VideoClipCreate {
	if f != nil {
		vcc.SetDuration(*f)
	}
	return vcc
}

// SetFormat sets the "format" field.
func (vcc *VideoClipCreate) SetFormat(s string) *VideoClipCreate {
	vcc.mutation.SetFormat(s)
	return vcc
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (vcc *VideoClipCreate) SetNillableFormat(s *string) *VideoClipCreate {
	if s != nil {
		vcc.SetFormat(*s)
	}
	return vcc
}

// SetWidth sets the "width" field.
func (vcc *VideoClipCreate) SetWidth(i int) *VideoClipCreate {
	vcc.mutation.SetWidth(i)
	return vcc
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (vcc *VideoClipCreate) SetNillableWidth(i *int) *VideoClipCreate {
	if i != nil {
		vcc.SetWidth(*i)
	}
	return vcc
}

// SetHeight sets the "height" field.
func (vcc *VideoClipCreate) SetHeight(i int) *VideoClipCreate {
	vcc.mutation.SetHeight(i)
	return vcc
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (vcc *VideoClipCreate) SetNillableHeight(i *int) *VideoClipCreate {
	if i != nil {
		vcc.SetHeight(*i)
	}
	return vcc
}

// SetFileSize sets the "file_size" field.
func (vcc *VideoClipCreate) SetFileSize(i int64) *VideoClipCreate {
	vcc.mutation.SetFileSize(i)
	return vcc
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (vcc *VideoClipCreate) SetNillableFileSize(i *int64) *VideoClipCreate {
	if i != nil {
		vcc.SetFileSize(*i)
	}
	return vcc
}

// SetCreatedAt sets the "created_at" field.
func (vcc *VideoClipCreate) SetCreatedAt(t time.Time) *VideoClipCreate {
	vcc.mutation.SetCreatedAt(t)
	return vcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vcc *VideoClipCreate) SetNillableCreatedAt(t *time.Time) *VideoClipCreate {
	if t != nil {
		vcc.SetCreatedAt(*t)
	}
	return vcc
}

// SetUpdatedAt sets the "updated_at" field.
func (vcc *VideoClipCreate) SetUpdatedAt(t time.Time) *VideoClipCreate {
	vcc.mutation.SetUpdatedAt(t)
	return vcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vcc *VideoClipCreate) SetNillableUpdatedAt(t *time.Time) *VideoClipCreate {
	if t != nil {
		vcc.SetUpdatedAt(*t)
	}
	return vcc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (vcc *VideoClipCreate) SetProjectID(id int) *VideoClipCreate {
	vcc.mutation.SetProjectID(id)
	return vcc
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (vcc *VideoClipCreate) SetNillableProjectID(id *int) *VideoClipCreate {
	if id != nil {
		vcc = vcc.SetProjectID(*id)
	}
	return vcc
}

// SetProject sets the "project" edge to the Project entity.
func (vcc *VideoClipCreate) SetProject(p *Project) *VideoClipCreate {
	return vcc.SetProjectID(p.ID)
}

// Mutation returns the VideoClipMutation object of the builder.
func (vcc *VideoClipCreate) Mutation() *VideoClipMutation {
	return vcc.mutation
}

// Save creates the VideoClip in the database.
func (vcc *VideoClipCreate) Save(ctx context.Context) (*VideoClip, error) {
	vcc.defaults()
	return withHooks(ctx, vcc.sqlSave, vcc.mutation, vcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vcc *VideoClipCreate) SaveX(ctx context.Context) *VideoClip {
	v, err := vcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcc *VideoClipCreate) Exec(ctx context.Context) error {
	_, err := vcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcc *VideoClipCreate) ExecX(ctx context.Context) {
	if err := vcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vcc *VideoClipCreate) defaults() {
	if _, ok := vcc.mutation.CreatedAt(); !ok {
		v := videoclip.DefaultCreatedAt()
		vcc.mutation.SetCreatedAt(v)
	}
	if _, ok := vcc.mutation.UpdatedAt(); !ok {
		v := videoclip.DefaultUpdatedAt()
		vcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vcc *VideoClipCreate) check() error {
	if _, ok := vcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "VideoClip.name"`)}
	}
	if v, ok := vcc.mutation.Name(); ok {
		if err := videoclip.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "VideoClip.name": %w`, err)}
		}
	}
	if _, ok := vcc.mutation.FilePath(); !ok {
		return &ValidationError{Name: "file_path", err: errors.New(`ent: missing required field "VideoClip.file_path"`)}
	}
	if v, ok := vcc.mutation.FilePath(); ok {
		if err := videoclip.FilePathValidator(v); err != nil {
			return &ValidationError{Name: "file_path", err: fmt.Errorf(`ent: validator failed for field "VideoClip.file_path": %w`, err)}
		}
	}
	if _, ok := vcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VideoClip.created_at"`)}
	}
	if _, ok := vcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VideoClip.updated_at"`)}
	}
	return nil
}

func (vcc *VideoClipCreate) sqlSave(ctx context.Context) (*VideoClip, error) {
	if err := vcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vcc.mutation.id = &_node.ID
	vcc.mutation.done = true
	return _node, nil
}

func (vcc *VideoClipCreate) createSpec() (*VideoClip, *sqlgraph.CreateSpec) {
	var (
		_node = &VideoClip{config: vcc.config}
		_spec = sqlgraph.NewCreateSpec(videoclip.Table, sqlgraph.NewFieldSpec(videoclip.FieldID, field.TypeInt))
	)
	if value, ok := vcc.mutation.Name(); ok {
		_spec.SetField(videoclip.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := vcc.mutation.Description(); ok {
		_spec.SetField(videoclip.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := vcc.mutation.FilePath(); ok {
		_spec.SetField(videoclip.FieldFilePath, field.TypeString, value)
		_node.FilePath = value
	}
	if value, ok := vcc.mutation.Duration(); ok {
		_spec.SetField(videoclip.FieldDuration, field.TypeFloat64, value)
		_node.Duration = value
	}
	if value, ok := vcc.mutation.Format(); ok {
		_spec.SetField(videoclip.FieldFormat, field.TypeString, value)
		_node.Format = value
	}
	if value, ok := vcc.mutation.Width(); ok {
		_spec.SetField(videoclip.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := vcc.mutation.Height(); ok {
		_spec.SetField(videoclip.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if value, ok := vcc.mutation.FileSize(); ok {
		_spec.SetField(videoclip.FieldFileSize, field.TypeInt64, value)
		_node.FileSize = value
	}
	if value, ok := vcc.mutation.CreatedAt(); ok {
		_spec.SetField(videoclip.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vcc.mutation.UpdatedAt(); ok {
		_spec.SetField(videoclip.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := vcc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videoclip.ProjectTable,
			Columns: []string{videoclip.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_video_clips = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VideoClipCreateBulk is the builder for creating many VideoClip entities in bulk.
type VideoClipCreateBulk struct {
	config
	err      error
	builders []*VideoClipCreate
}

// Save creates the VideoClip entities in the database.
func (vccb *VideoClipCreateBulk) Save(ctx context.Context) ([]*VideoClip, error) {
	if vccb.err != nil {
		return nil, vccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vccb.builders))
	nodes := make([]*VideoClip, len(vccb.builders))
	mutators := make([]Mutator, len(vccb.builders))
	for i := range vccb.builders {
		func(i int, root context.Context) {
			builder := vccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VideoClipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vccb *VideoClipCreateBulk) SaveX(ctx context.Context) []*VideoClip {
	v, err := vccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vccb *VideoClipCreateBulk) Exec(ctx context.Context) error {
	_, err := vccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vccb *VideoClipCreateBulk) ExecX(ctx context.Context) {
	if err := vccb.Exec(ctx); err != nil {
		panic(err)
	}
}
