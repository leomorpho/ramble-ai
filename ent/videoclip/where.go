// Code generated by ent, DO NOT EDIT.

package videoclip

import (
	"ramble-ai/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldDescription, v))
}

// FilePath applies equality check predicate on the "file_path" field. It's identical to FilePathEQ.
func FilePath(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldFilePath, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldDuration, v))
}

// Format applies equality check predicate on the "format" field. It's identical to FormatEQ.
func Format(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldFormat, v))
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldWidth, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldHeight, v))
}

// FileSize applies equality check predicate on the "file_size" field. It's identical to FileSizeEQ.
func FileSize(v int64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldFileSize, v))
}

// Transcription applies equality check predicate on the "transcription" field. It's identical to TranscriptionEQ.
func Transcription(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldTranscription, v))
}

// TranscriptionLanguage applies equality check predicate on the "transcription_language" field. It's identical to TranscriptionLanguageEQ.
func TranscriptionLanguage(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldTranscriptionLanguage, v))
}

// TranscriptionDuration applies equality check predicate on the "transcription_duration" field. It's identical to TranscriptionDurationEQ.
func TranscriptionDuration(v float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldTranscriptionDuration, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldUpdatedAt, v))
}

// HighlightsHistoryIndex applies equality check predicate on the "highlights_history_index" field. It's identical to HighlightsHistoryIndexEQ.
func HighlightsHistoryIndex(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldHighlightsHistoryIndex, v))
}

// TranscriptionState applies equality check predicate on the "transcription_state" field. It's identical to TranscriptionStateEQ.
func TranscriptionState(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldTranscriptionState, v))
}

// TranscriptionError applies equality check predicate on the "transcription_error" field. It's identical to TranscriptionErrorEQ.
func TranscriptionError(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldTranscriptionError, v))
}

// TranscriptionStartedAt applies equality check predicate on the "transcription_started_at" field. It's identical to TranscriptionStartedAtEQ.
func TranscriptionStartedAt(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldTranscriptionStartedAt, v))
}

// TranscriptionCompletedAt applies equality check predicate on the "transcription_completed_at" field. It's identical to TranscriptionCompletedAtEQ.
func TranscriptionCompletedAt(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldTranscriptionCompletedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContainsFold(FieldDescription, v))
}

// FilePathEQ applies the EQ predicate on the "file_path" field.
func FilePathEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldFilePath, v))
}

// FilePathNEQ applies the NEQ predicate on the "file_path" field.
func FilePathNEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldFilePath, v))
}

// FilePathIn applies the In predicate on the "file_path" field.
func FilePathIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldFilePath, vs...))
}

// FilePathNotIn applies the NotIn predicate on the "file_path" field.
func FilePathNotIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldFilePath, vs...))
}

// FilePathGT applies the GT predicate on the "file_path" field.
func FilePathGT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldFilePath, v))
}

// FilePathGTE applies the GTE predicate on the "file_path" field.
func FilePathGTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldFilePath, v))
}

// FilePathLT applies the LT predicate on the "file_path" field.
func FilePathLT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldFilePath, v))
}

// FilePathLTE applies the LTE predicate on the "file_path" field.
func FilePathLTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldFilePath, v))
}

// FilePathContains applies the Contains predicate on the "file_path" field.
func FilePathContains(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContains(FieldFilePath, v))
}

// FilePathHasPrefix applies the HasPrefix predicate on the "file_path" field.
func FilePathHasPrefix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasPrefix(FieldFilePath, v))
}

// FilePathHasSuffix applies the HasSuffix predicate on the "file_path" field.
func FilePathHasSuffix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasSuffix(FieldFilePath, v))
}

// FilePathEqualFold applies the EqualFold predicate on the "file_path" field.
func FilePathEqualFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEqualFold(FieldFilePath, v))
}

// FilePathContainsFold applies the ContainsFold predicate on the "file_path" field.
func FilePathContainsFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContainsFold(FieldFilePath, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldDuration))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldFormat, vs...))
}

// FormatGT applies the GT predicate on the "format" field.
func FormatGT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldFormat, v))
}

// FormatGTE applies the GTE predicate on the "format" field.
func FormatGTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldFormat, v))
}

// FormatLT applies the LT predicate on the "format" field.
func FormatLT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldFormat, v))
}

// FormatLTE applies the LTE predicate on the "format" field.
func FormatLTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldFormat, v))
}

// FormatContains applies the Contains predicate on the "format" field.
func FormatContains(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContains(FieldFormat, v))
}

// FormatHasPrefix applies the HasPrefix predicate on the "format" field.
func FormatHasPrefix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasPrefix(FieldFormat, v))
}

// FormatHasSuffix applies the HasSuffix predicate on the "format" field.
func FormatHasSuffix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasSuffix(FieldFormat, v))
}

// FormatIsNil applies the IsNil predicate on the "format" field.
func FormatIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldFormat))
}

// FormatNotNil applies the NotNil predicate on the "format" field.
func FormatNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldFormat))
}

// FormatEqualFold applies the EqualFold predicate on the "format" field.
func FormatEqualFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEqualFold(FieldFormat, v))
}

// FormatContainsFold applies the ContainsFold predicate on the "format" field.
func FormatContainsFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContainsFold(FieldFormat, v))
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldWidth, v))
}

// WidthIsNil applies the IsNil predicate on the "width" field.
func WidthIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldWidth))
}

// WidthNotNil applies the NotNil predicate on the "width" field.
func WidthNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldWidth))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldHeight, v))
}

// HeightIsNil applies the IsNil predicate on the "height" field.
func HeightIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldHeight))
}

// HeightNotNil applies the NotNil predicate on the "height" field.
func HeightNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldHeight))
}

// FileSizeEQ applies the EQ predicate on the "file_size" field.
func FileSizeEQ(v int64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldFileSize, v))
}

// FileSizeNEQ applies the NEQ predicate on the "file_size" field.
func FileSizeNEQ(v int64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldFileSize, v))
}

// FileSizeIn applies the In predicate on the "file_size" field.
func FileSizeIn(vs ...int64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldFileSize, vs...))
}

// FileSizeNotIn applies the NotIn predicate on the "file_size" field.
func FileSizeNotIn(vs ...int64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldFileSize, vs...))
}

// FileSizeGT applies the GT predicate on the "file_size" field.
func FileSizeGT(v int64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldFileSize, v))
}

// FileSizeGTE applies the GTE predicate on the "file_size" field.
func FileSizeGTE(v int64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldFileSize, v))
}

// FileSizeLT applies the LT predicate on the "file_size" field.
func FileSizeLT(v int64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldFileSize, v))
}

// FileSizeLTE applies the LTE predicate on the "file_size" field.
func FileSizeLTE(v int64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldFileSize, v))
}

// FileSizeIsNil applies the IsNil predicate on the "file_size" field.
func FileSizeIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldFileSize))
}

// FileSizeNotNil applies the NotNil predicate on the "file_size" field.
func FileSizeNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldFileSize))
}

// TranscriptionEQ applies the EQ predicate on the "transcription" field.
func TranscriptionEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldTranscription, v))
}

// TranscriptionNEQ applies the NEQ predicate on the "transcription" field.
func TranscriptionNEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldTranscription, v))
}

// TranscriptionIn applies the In predicate on the "transcription" field.
func TranscriptionIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldTranscription, vs...))
}

// TranscriptionNotIn applies the NotIn predicate on the "transcription" field.
func TranscriptionNotIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldTranscription, vs...))
}

// TranscriptionGT applies the GT predicate on the "transcription" field.
func TranscriptionGT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldTranscription, v))
}

// TranscriptionGTE applies the GTE predicate on the "transcription" field.
func TranscriptionGTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldTranscription, v))
}

// TranscriptionLT applies the LT predicate on the "transcription" field.
func TranscriptionLT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldTranscription, v))
}

// TranscriptionLTE applies the LTE predicate on the "transcription" field.
func TranscriptionLTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldTranscription, v))
}

// TranscriptionContains applies the Contains predicate on the "transcription" field.
func TranscriptionContains(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContains(FieldTranscription, v))
}

// TranscriptionHasPrefix applies the HasPrefix predicate on the "transcription" field.
func TranscriptionHasPrefix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasPrefix(FieldTranscription, v))
}

// TranscriptionHasSuffix applies the HasSuffix predicate on the "transcription" field.
func TranscriptionHasSuffix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasSuffix(FieldTranscription, v))
}

// TranscriptionIsNil applies the IsNil predicate on the "transcription" field.
func TranscriptionIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldTranscription))
}

// TranscriptionNotNil applies the NotNil predicate on the "transcription" field.
func TranscriptionNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldTranscription))
}

// TranscriptionEqualFold applies the EqualFold predicate on the "transcription" field.
func TranscriptionEqualFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEqualFold(FieldTranscription, v))
}

// TranscriptionContainsFold applies the ContainsFold predicate on the "transcription" field.
func TranscriptionContainsFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContainsFold(FieldTranscription, v))
}

// TranscriptionWordsIsNil applies the IsNil predicate on the "transcription_words" field.
func TranscriptionWordsIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldTranscriptionWords))
}

// TranscriptionWordsNotNil applies the NotNil predicate on the "transcription_words" field.
func TranscriptionWordsNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldTranscriptionWords))
}

// TranscriptionLanguageEQ applies the EQ predicate on the "transcription_language" field.
func TranscriptionLanguageEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldTranscriptionLanguage, v))
}

// TranscriptionLanguageNEQ applies the NEQ predicate on the "transcription_language" field.
func TranscriptionLanguageNEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldTranscriptionLanguage, v))
}

// TranscriptionLanguageIn applies the In predicate on the "transcription_language" field.
func TranscriptionLanguageIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldTranscriptionLanguage, vs...))
}

// TranscriptionLanguageNotIn applies the NotIn predicate on the "transcription_language" field.
func TranscriptionLanguageNotIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldTranscriptionLanguage, vs...))
}

// TranscriptionLanguageGT applies the GT predicate on the "transcription_language" field.
func TranscriptionLanguageGT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldTranscriptionLanguage, v))
}

// TranscriptionLanguageGTE applies the GTE predicate on the "transcription_language" field.
func TranscriptionLanguageGTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldTranscriptionLanguage, v))
}

// TranscriptionLanguageLT applies the LT predicate on the "transcription_language" field.
func TranscriptionLanguageLT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldTranscriptionLanguage, v))
}

// TranscriptionLanguageLTE applies the LTE predicate on the "transcription_language" field.
func TranscriptionLanguageLTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldTranscriptionLanguage, v))
}

// TranscriptionLanguageContains applies the Contains predicate on the "transcription_language" field.
func TranscriptionLanguageContains(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContains(FieldTranscriptionLanguage, v))
}

// TranscriptionLanguageHasPrefix applies the HasPrefix predicate on the "transcription_language" field.
func TranscriptionLanguageHasPrefix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasPrefix(FieldTranscriptionLanguage, v))
}

// TranscriptionLanguageHasSuffix applies the HasSuffix predicate on the "transcription_language" field.
func TranscriptionLanguageHasSuffix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasSuffix(FieldTranscriptionLanguage, v))
}

// TranscriptionLanguageIsNil applies the IsNil predicate on the "transcription_language" field.
func TranscriptionLanguageIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldTranscriptionLanguage))
}

// TranscriptionLanguageNotNil applies the NotNil predicate on the "transcription_language" field.
func TranscriptionLanguageNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldTranscriptionLanguage))
}

// TranscriptionLanguageEqualFold applies the EqualFold predicate on the "transcription_language" field.
func TranscriptionLanguageEqualFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEqualFold(FieldTranscriptionLanguage, v))
}

// TranscriptionLanguageContainsFold applies the ContainsFold predicate on the "transcription_language" field.
func TranscriptionLanguageContainsFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContainsFold(FieldTranscriptionLanguage, v))
}

// TranscriptionDurationEQ applies the EQ predicate on the "transcription_duration" field.
func TranscriptionDurationEQ(v float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldTranscriptionDuration, v))
}

// TranscriptionDurationNEQ applies the NEQ predicate on the "transcription_duration" field.
func TranscriptionDurationNEQ(v float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldTranscriptionDuration, v))
}

// TranscriptionDurationIn applies the In predicate on the "transcription_duration" field.
func TranscriptionDurationIn(vs ...float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldTranscriptionDuration, vs...))
}

// TranscriptionDurationNotIn applies the NotIn predicate on the "transcription_duration" field.
func TranscriptionDurationNotIn(vs ...float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldTranscriptionDuration, vs...))
}

// TranscriptionDurationGT applies the GT predicate on the "transcription_duration" field.
func TranscriptionDurationGT(v float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldTranscriptionDuration, v))
}

// TranscriptionDurationGTE applies the GTE predicate on the "transcription_duration" field.
func TranscriptionDurationGTE(v float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldTranscriptionDuration, v))
}

// TranscriptionDurationLT applies the LT predicate on the "transcription_duration" field.
func TranscriptionDurationLT(v float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldTranscriptionDuration, v))
}

// TranscriptionDurationLTE applies the LTE predicate on the "transcription_duration" field.
func TranscriptionDurationLTE(v float64) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldTranscriptionDuration, v))
}

// TranscriptionDurationIsNil applies the IsNil predicate on the "transcription_duration" field.
func TranscriptionDurationIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldTranscriptionDuration))
}

// TranscriptionDurationNotNil applies the NotNil predicate on the "transcription_duration" field.
func TranscriptionDurationNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldTranscriptionDuration))
}

// HighlightsIsNil applies the IsNil predicate on the "highlights" field.
func HighlightsIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldHighlights))
}

// HighlightsNotNil applies the NotNil predicate on the "highlights" field.
func HighlightsNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldHighlights))
}

// SuggestedHighlightsIsNil applies the IsNil predicate on the "suggested_highlights" field.
func SuggestedHighlightsIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldSuggestedHighlights))
}

// SuggestedHighlightsNotNil applies the NotNil predicate on the "suggested_highlights" field.
func SuggestedHighlightsNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldSuggestedHighlights))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldUpdatedAt, v))
}

// HighlightsHistoryIsNil applies the IsNil predicate on the "highlights_history" field.
func HighlightsHistoryIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldHighlightsHistory))
}

// HighlightsHistoryNotNil applies the NotNil predicate on the "highlights_history" field.
func HighlightsHistoryNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldHighlightsHistory))
}

// HighlightsHistoryIndexEQ applies the EQ predicate on the "highlights_history_index" field.
func HighlightsHistoryIndexEQ(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldHighlightsHistoryIndex, v))
}

// HighlightsHistoryIndexNEQ applies the NEQ predicate on the "highlights_history_index" field.
func HighlightsHistoryIndexNEQ(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldHighlightsHistoryIndex, v))
}

// HighlightsHistoryIndexIn applies the In predicate on the "highlights_history_index" field.
func HighlightsHistoryIndexIn(vs ...int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldHighlightsHistoryIndex, vs...))
}

// HighlightsHistoryIndexNotIn applies the NotIn predicate on the "highlights_history_index" field.
func HighlightsHistoryIndexNotIn(vs ...int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldHighlightsHistoryIndex, vs...))
}

// HighlightsHistoryIndexGT applies the GT predicate on the "highlights_history_index" field.
func HighlightsHistoryIndexGT(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldHighlightsHistoryIndex, v))
}

// HighlightsHistoryIndexGTE applies the GTE predicate on the "highlights_history_index" field.
func HighlightsHistoryIndexGTE(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldHighlightsHistoryIndex, v))
}

// HighlightsHistoryIndexLT applies the LT predicate on the "highlights_history_index" field.
func HighlightsHistoryIndexLT(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldHighlightsHistoryIndex, v))
}

// HighlightsHistoryIndexLTE applies the LTE predicate on the "highlights_history_index" field.
func HighlightsHistoryIndexLTE(v int) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldHighlightsHistoryIndex, v))
}

// HighlightsHistoryIndexIsNil applies the IsNil predicate on the "highlights_history_index" field.
func HighlightsHistoryIndexIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldHighlightsHistoryIndex))
}

// HighlightsHistoryIndexNotNil applies the NotNil predicate on the "highlights_history_index" field.
func HighlightsHistoryIndexNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldHighlightsHistoryIndex))
}

// TranscriptionStateEQ applies the EQ predicate on the "transcription_state" field.
func TranscriptionStateEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldTranscriptionState, v))
}

// TranscriptionStateNEQ applies the NEQ predicate on the "transcription_state" field.
func TranscriptionStateNEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldTranscriptionState, v))
}

// TranscriptionStateIn applies the In predicate on the "transcription_state" field.
func TranscriptionStateIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldTranscriptionState, vs...))
}

// TranscriptionStateNotIn applies the NotIn predicate on the "transcription_state" field.
func TranscriptionStateNotIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldTranscriptionState, vs...))
}

// TranscriptionStateGT applies the GT predicate on the "transcription_state" field.
func TranscriptionStateGT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldTranscriptionState, v))
}

// TranscriptionStateGTE applies the GTE predicate on the "transcription_state" field.
func TranscriptionStateGTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldTranscriptionState, v))
}

// TranscriptionStateLT applies the LT predicate on the "transcription_state" field.
func TranscriptionStateLT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldTranscriptionState, v))
}

// TranscriptionStateLTE applies the LTE predicate on the "transcription_state" field.
func TranscriptionStateLTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldTranscriptionState, v))
}

// TranscriptionStateContains applies the Contains predicate on the "transcription_state" field.
func TranscriptionStateContains(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContains(FieldTranscriptionState, v))
}

// TranscriptionStateHasPrefix applies the HasPrefix predicate on the "transcription_state" field.
func TranscriptionStateHasPrefix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasPrefix(FieldTranscriptionState, v))
}

// TranscriptionStateHasSuffix applies the HasSuffix predicate on the "transcription_state" field.
func TranscriptionStateHasSuffix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasSuffix(FieldTranscriptionState, v))
}

// TranscriptionStateIsNil applies the IsNil predicate on the "transcription_state" field.
func TranscriptionStateIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldTranscriptionState))
}

// TranscriptionStateNotNil applies the NotNil predicate on the "transcription_state" field.
func TranscriptionStateNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldTranscriptionState))
}

// TranscriptionStateEqualFold applies the EqualFold predicate on the "transcription_state" field.
func TranscriptionStateEqualFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEqualFold(FieldTranscriptionState, v))
}

// TranscriptionStateContainsFold applies the ContainsFold predicate on the "transcription_state" field.
func TranscriptionStateContainsFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContainsFold(FieldTranscriptionState, v))
}

// TranscriptionErrorEQ applies the EQ predicate on the "transcription_error" field.
func TranscriptionErrorEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldTranscriptionError, v))
}

// TranscriptionErrorNEQ applies the NEQ predicate on the "transcription_error" field.
func TranscriptionErrorNEQ(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldTranscriptionError, v))
}

// TranscriptionErrorIn applies the In predicate on the "transcription_error" field.
func TranscriptionErrorIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldTranscriptionError, vs...))
}

// TranscriptionErrorNotIn applies the NotIn predicate on the "transcription_error" field.
func TranscriptionErrorNotIn(vs ...string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldTranscriptionError, vs...))
}

// TranscriptionErrorGT applies the GT predicate on the "transcription_error" field.
func TranscriptionErrorGT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldTranscriptionError, v))
}

// TranscriptionErrorGTE applies the GTE predicate on the "transcription_error" field.
func TranscriptionErrorGTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldTranscriptionError, v))
}

// TranscriptionErrorLT applies the LT predicate on the "transcription_error" field.
func TranscriptionErrorLT(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldTranscriptionError, v))
}

// TranscriptionErrorLTE applies the LTE predicate on the "transcription_error" field.
func TranscriptionErrorLTE(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldTranscriptionError, v))
}

// TranscriptionErrorContains applies the Contains predicate on the "transcription_error" field.
func TranscriptionErrorContains(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContains(FieldTranscriptionError, v))
}

// TranscriptionErrorHasPrefix applies the HasPrefix predicate on the "transcription_error" field.
func TranscriptionErrorHasPrefix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasPrefix(FieldTranscriptionError, v))
}

// TranscriptionErrorHasSuffix applies the HasSuffix predicate on the "transcription_error" field.
func TranscriptionErrorHasSuffix(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldHasSuffix(FieldTranscriptionError, v))
}

// TranscriptionErrorIsNil applies the IsNil predicate on the "transcription_error" field.
func TranscriptionErrorIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldTranscriptionError))
}

// TranscriptionErrorNotNil applies the NotNil predicate on the "transcription_error" field.
func TranscriptionErrorNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldTranscriptionError))
}

// TranscriptionErrorEqualFold applies the EqualFold predicate on the "transcription_error" field.
func TranscriptionErrorEqualFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEqualFold(FieldTranscriptionError, v))
}

// TranscriptionErrorContainsFold applies the ContainsFold predicate on the "transcription_error" field.
func TranscriptionErrorContainsFold(v string) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldContainsFold(FieldTranscriptionError, v))
}

// TranscriptionStartedAtEQ applies the EQ predicate on the "transcription_started_at" field.
func TranscriptionStartedAtEQ(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldTranscriptionStartedAt, v))
}

// TranscriptionStartedAtNEQ applies the NEQ predicate on the "transcription_started_at" field.
func TranscriptionStartedAtNEQ(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldTranscriptionStartedAt, v))
}

// TranscriptionStartedAtIn applies the In predicate on the "transcription_started_at" field.
func TranscriptionStartedAtIn(vs ...time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldTranscriptionStartedAt, vs...))
}

// TranscriptionStartedAtNotIn applies the NotIn predicate on the "transcription_started_at" field.
func TranscriptionStartedAtNotIn(vs ...time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldTranscriptionStartedAt, vs...))
}

// TranscriptionStartedAtGT applies the GT predicate on the "transcription_started_at" field.
func TranscriptionStartedAtGT(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldTranscriptionStartedAt, v))
}

// TranscriptionStartedAtGTE applies the GTE predicate on the "transcription_started_at" field.
func TranscriptionStartedAtGTE(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldTranscriptionStartedAt, v))
}

// TranscriptionStartedAtLT applies the LT predicate on the "transcription_started_at" field.
func TranscriptionStartedAtLT(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldTranscriptionStartedAt, v))
}

// TranscriptionStartedAtLTE applies the LTE predicate on the "transcription_started_at" field.
func TranscriptionStartedAtLTE(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldTranscriptionStartedAt, v))
}

// TranscriptionStartedAtIsNil applies the IsNil predicate on the "transcription_started_at" field.
func TranscriptionStartedAtIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldTranscriptionStartedAt))
}

// TranscriptionStartedAtNotNil applies the NotNil predicate on the "transcription_started_at" field.
func TranscriptionStartedAtNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldTranscriptionStartedAt))
}

// TranscriptionCompletedAtEQ applies the EQ predicate on the "transcription_completed_at" field.
func TranscriptionCompletedAtEQ(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldEQ(FieldTranscriptionCompletedAt, v))
}

// TranscriptionCompletedAtNEQ applies the NEQ predicate on the "transcription_completed_at" field.
func TranscriptionCompletedAtNEQ(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNEQ(FieldTranscriptionCompletedAt, v))
}

// TranscriptionCompletedAtIn applies the In predicate on the "transcription_completed_at" field.
func TranscriptionCompletedAtIn(vs ...time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIn(FieldTranscriptionCompletedAt, vs...))
}

// TranscriptionCompletedAtNotIn applies the NotIn predicate on the "transcription_completed_at" field.
func TranscriptionCompletedAtNotIn(vs ...time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotIn(FieldTranscriptionCompletedAt, vs...))
}

// TranscriptionCompletedAtGT applies the GT predicate on the "transcription_completed_at" field.
func TranscriptionCompletedAtGT(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGT(FieldTranscriptionCompletedAt, v))
}

// TranscriptionCompletedAtGTE applies the GTE predicate on the "transcription_completed_at" field.
func TranscriptionCompletedAtGTE(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldGTE(FieldTranscriptionCompletedAt, v))
}

// TranscriptionCompletedAtLT applies the LT predicate on the "transcription_completed_at" field.
func TranscriptionCompletedAtLT(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLT(FieldTranscriptionCompletedAt, v))
}

// TranscriptionCompletedAtLTE applies the LTE predicate on the "transcription_completed_at" field.
func TranscriptionCompletedAtLTE(v time.Time) predicate.VideoClip {
	return predicate.VideoClip(sql.FieldLTE(FieldTranscriptionCompletedAt, v))
}

// TranscriptionCompletedAtIsNil applies the IsNil predicate on the "transcription_completed_at" field.
func TranscriptionCompletedAtIsNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldIsNull(FieldTranscriptionCompletedAt))
}

// TranscriptionCompletedAtNotNil applies the NotNil predicate on the "transcription_completed_at" field.
func TranscriptionCompletedAtNotNil() predicate.VideoClip {
	return predicate.VideoClip(sql.FieldNotNull(FieldTranscriptionCompletedAt))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.VideoClip {
	return predicate.VideoClip(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.VideoClip {
	return predicate.VideoClip(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VideoClip) predicate.VideoClip {
	return predicate.VideoClip(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VideoClip) predicate.VideoClip {
	return predicate.VideoClip(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VideoClip) predicate.VideoClip {
	return predicate.VideoClip(sql.NotPredicates(p))
}
